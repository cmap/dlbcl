/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/js/local/command/dist/command.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./public/js/local/command/dist/actions/assay.js":
/*!*******************************************************!*\
  !*** ./public/js/local/command/dist/actions/assay.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.show = function(options) {\n    var groupBy = __webpack_require__(/*! Shared/groupBy.js */ \"./public/js/local/command/dist/shared/groupBy.js\");\n    options.dbField = 'pert_icollection';\n    options.lcField = 'assay';\n    options.capitalizedField = 'Assay';\n    options.command = 'assay';\n    groupBy.groupByShow(options);\n};\n\nexports.changeTabHeader = function(tabObject) {\n    // var groupBy = require('Shared/groupBy.js');\n    // groupBy.changeTabHeader(tabObject);\n};\n\n\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/assay.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/cell-space.js":
/*!************************************************************!*\
  !*** ./public/js/local/command/dist/actions/cell-space.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.show = function(options) {\n    exports.changeTabHeader(options.object);\n    var d = $.Deferred();\n    var filter = {\n        // fields: ['cell_iname'],\n        // include: ['cell_lineage', 'cell_icollection']\n    };\n    if (options.ids.length > 0) {\n        filter.where = {\n            or: [{cell_iname: {inq: options.ids}}, {cell_icollection: {inq: options.ids}}]\n        };\n    }\n    var p = $.ajax(clue.API_URL + '/api/cells/?filter=' + JSON.stringify(filter));\n    p.done(function (results) {\n        if (results.length === 0) {\n            return d.reject('No cell lines found');\n        }\n        d.resolve();\n        var $chart = $('<div class=\"col-xs-12\"></div>');\n        var $table = $('<div class=\"col-xs-12\"></div>');\n        $chart.appendTo(options.$el);\n        $table.appendTo(options.$el);\n\n        var columns = [\n            {\n                field: 'cell_iname',\n                name: 'Name'\n            }, {\n                field: 'cell_lineage',\n                name: 'Lineage',\n                getter: function (item) {\n                    // array of {name:value}\n                    return item.cell_lineage.map(function (value) {\n                        return value.name;\n                    });\n                }\n            }, {\n                name: 'Collection',\n                field: 'cell_icollection',\n                getter: function (item) {\n                    // array of {name:value}\n                    return item.cell_icollection.map(function (value) {\n                        return value.name;\n                    });\n                }\n            }];\n\n        // var xValue = ['landmark', 'best inferred', 'inferred', 'not inferred'];\n        // var typeToCount = new morpheus.Map();\n        // xValue.forEach(function (key) {\n        //   typeToCount.set(key, 0);\n        // });\n        //\n        // var yValue = [];\n        // for (var i = 0, length = results.length; i < length; i++) {\n        //   var item = results[i];\n        //   typeToCount.set(item.l1000_type, typeToCount.get(item.l1000_type) + 1);\n        // }\n        //\n        // xValue.forEach(function (key) {\n        //   yValue.push(typeToCount.get(key));\n        // });\n        // var total = 0;\n        // yValue.forEach(function (val) {\n        //   total += val;\n        // });\n        // var x = ['Landmark (lm)', 'Best inferred (bing)', 'Inferred (aig)', 'Not inferred (ni)'];\n        // var trace = {\n        //   x: x,\n        //   y: yValue,\n        //   type: 'bar'\n        // };\n        //\n        // var annotationContent = [];\n        // var plotly = clue.getPlotlyDefaults2();\n        // plotly.layout.xaxis.showgrid = false;\n        // plotly.layout.xaxis.showline = false;\n        //\n        // plotly.layout.annotations = annotationContent;\n        // plotly.layout.width = 500;\n        // plotly.layout.height = 130;\n        // plotly.layout.yaxis.showgrid = false;\n        // plotly.layout.yaxis.zeroline = false;\n        // plotly.layout.yaxis.showline = false;\n        // plotly.layout.yaxis.autotick = true;\n        // plotly.layout.yaxis.ticks = '';\n        // plotly.layout.yaxis.showticklabels = false;\n        // for (var i = 0; i < xValue.length; i++) {\n        //   var result = {\n        //     x: x[i],\n        //     y: yValue[i],\n        //     text: morpheus.Util.intFormat(yValue[i]),\n        //     xanchor: 'center',\n        //     yanchor: 'bottom',\n        //     showarrow: false\n        //   };\n        //   annotationContent.push(result);\n        // }\n        //\n        // plotly.layout.margin.t = 4;\n        // plotly.config.displayModeBar = false;\n        // Plotly.newPlot($chart[0], [trace], plotly.layout, plotly.config);\n        var table = new tablelegs.Table({\n            height: '412px',\n            columnPicker: false,\n            tableClass: 'slick-table slick-bordered-table slick-hover-table',\n            select: true,\n            search: true,\n            export: true,\n            exportFileName: options.object.truncatedCommand + '.txt',\n            $el: $table,\n            columns: columns,\n            items: results\n        });\n    });\n    p.fail(function (err) {\n        d.reject(err);\n    });\n    return d;\n\n};\n\nexports.changeTabHeader = function(tabObject) {\n    $('#headerButtonRow').hide();\n    $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/cell-space.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/class-selectivity.js":
/*!*******************************************************************!*\
  !*** ./public/js/local/command/dist/actions/class-selectivity.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// currently doesn't work on dev.clue.io\nexports.show = function(options) {\n    exports.changeTabHeader(options.object);\n    var xaxisPclIds = [options.ids[0]];\n\n    var yaxisPclIds = options.ids.slice(1);\n    var allPclIds = xaxisPclIds.concat(yaxisPclIds);\n    var $div = $('<div><div data-name=\"legend\"></div><div' +\n        ' style=\"display:inline-block\" data-name=\"chart\"></div><div' +\n        ' style=\"display:inline-block;width:880px;\" data-name=\"table\"></div></div>');\n    $div.appendTo(options.$el);\n    var $plot = $div.find('[data-name=chart]');\n    var $table = $div.find('[data-name=table]');\n    var $legend = $div.find('[data-name=legend]');\n\n    var colorScheme = new morpheus.HeatMapColorScheme(new morpheus.Project(new morpheus.Dataset({\n        rows: 1,\n        columns: 1\n    })), {\n        type: 'fixed',\n        map: [\n            {\n                value: 0,\n                color: '#deebf7'\n            }, {\n                value: 0.8,\n                color: '#deebf7'\n            }, {\n                value: 0.9,\n                color: '#9ecae1'\n            }, {\n                value: 1,\n                color: '#3182bd'\n            }]\n    });\n\n    var p = morpheus.DatasetUtil.read(clue.API_URL +\n        '/data-api/slice/?name=pcl_summary&cfield=pert_id&cfield=pert_iname&cfield=class_selectivity&rfield=pert_id&cquery=pert_collection:(TS)&rquery=pert_id:(' +\n        allPclIds.join(' ') + ')').done(function (dataset) {\n        // x axis is connectivity to PCL, y axis is selectivity\n// rows are pcls, columns are perts\n\n        var pertCollection = dataset.getColumnMetadata().getByName('pert_collection');\n        var columnIndices = [];\n\n        if (dataset.getRowCount() <= 1) {\n            return $el.html('Not all PCLs found.');\n        }\n        var fullClassSelectivity = dataset.getColumnMetadata().getByName('class_selectivity');\n        var tmp = {\n            getRowCount: function () {\n                return fullClassSelectivity.size();\n            },\n            getColumnCount: function () {\n                return 1;\n            },\n            getValue: function (rowIndex, columnIndex) {\n                return fullClassSelectivity.getValue(rowIndex);\n            },\n            getRowMetadata: function () {\n                return new morpheus.MetadataModel(fullClassSelectivity.size());\n            }\n        };\n\n        var legend = new morpheus.HistogramLegend(tmp, colorScheme, null);\n        legend.setName('Class Selectivity Legend');\n        legend.setBinSize(0.05);\n        legend.repaint();\n        $('<h6>Connectivity to ' + xaxisPclIds.join(', ') + ' vs. ' + (yaxisPclIds.length === 1 ? '' : 'maximum ') +\n            'connectivity to ' + yaxisPclIds.join(', ') + '. Color shows perturbagen class selectivity.</h6>').appendTo($legend);\n\n        $legend.append($(legend.canvas));\n        var pclIdToIndexMap = morpheus.VectorUtil.createValueToIndexMap(\n            dataset.getRowMetadata().getByName('pert_id'));\n        var xIndices = [];\n        xaxisPclIds.forEach(function (id) {\n            xIndices.push(pclIdToIndexMap.get(id));\n        });\n        var yIndices = [];\n        yaxisPclIds.forEach(function (id) {\n            yIndices.push(pclIdToIndexMap.get(id));\n        });\n\n        var xaxisDataset = new morpheus.SlicedDatasetView(dataset, xIndices, null);\n        var yaxisDataset = new morpheus.SlicedDatasetView(dataset, yIndices, null);\n\n        var traces = [];\n        var selectivityVector = xaxisDataset.getColumnMetadata().getByName('class_selectivity');\n        var pertIdVector = xaxisDataset.getColumnMetadata().getByName('pert_id');\n        var pertNameVector = xaxisDataset.getColumnMetadata().getByName('pert_iname');\n\n        var trace = {\n            mode: 'markers',\n            type: 'scatter',\n            x: [],\n            marker: {\n                size: 4,\n                symbol: 'circle-open',\n                color: []\n            },\n            y: [],\n            text: []\n            // hoverinfo: 'text'\n        };\n        traces.push(trace);\n        var min = Number.MAX_VALUE;\n        var max = -Number.MAX_VALUE;\n        var pertIdToIndex = new morpheus.Map();\n        for (var j = 0, ncols = xaxisDataset.getColumnCount(); j < ncols; j++) {\n            // compute max across all rows\n            var xmax = -Number.MAX_VALUE;\n\n            for (var i = 0, nrows = xaxisDataset.getRowCount(); i < nrows; i++) {\n                xmax = Math.max(xmax, xaxisDataset.getValue(i, j));\n            }\n            var ymax = -Number.MAX_VALUE;\n            for (var i = 0, nrows = yaxisDataset.getRowCount(); i < nrows; i++) {\n                ymax = Math.max(ymax, yaxisDataset.getValue(i, j));\n            }\n            pertIdToIndex.set(pertIdVector.getValue(j), j);\n            trace.x.push(xmax);\n            trace.y.push(ymax);\n\n            trace.text.push(pertNameVector.getValue(j) + ', ' + pertIdVector.getValue(j) + ', selectivity: ' +\n                morpheus.Util.nf(selectivityVector.getValue(j)));\n            trace.marker.color.push(colorScheme.getColor(0, 0, selectivityVector.getValue(j)));\n            //  }\n        }\n        // filter and highlight by target, moa, pert name, pert_type, x, y, selectivity\n        // fixed color by selectivity\n        var correlation = morpheus.Spearman(morpheus.VectorUtil.arrayAsVector(trace.x),\n            morpheus.VectorUtil.arrayAsVector(trace.y));\n        var table;\n        var filteredIds;\n        var allResults;\n        $.ajax(clue.API_URL + '/api/perts?filter=' + JSON.stringify({\n                fields: ['pert_id', 'pert_iname', 'pert_type', 'target', 'moa'],\n                where: {\n                    pert_icollection: touchstoneColl\n                }\n            })).done(function (results) {\n            allResults = results;\n\n            table = new tablelegs.Table({\n                height: '412px',\n                columnPicker: true,\n                tableClass: 'slick-table slick-bordered-table slick-hover-table',\n                select: true,\n                search: true,\n                export: true,\n                rowHeight: 18,\n                $el: $table,\n                columns: [\n                    {\n                        field: 'pert_iname',\n                        name: 'Name'\n                    }, {\n                        field: 'pert_type',\n                        name: 'Type',\n                        renderer: function (item, value) {\n                            if (value === 'trt_cp') {\n                                return '<i class=\"text-center glyphicon glyphicon-adjust touchstone-cp\"></i>';\n                            } else if (value === 'trt_sh.cgs') {\n                                return '<i class=\"text-center glyphicon glyphicon-minus-sign touchstone-kd\"></i>';\n                            } else if (value === 'trt_oe') {\n                                return '<i class=\"text-center glyphicon glyphicon-plus-sign touchstone-oe\"></i>';\n                            } else {\n                                return value;\n                            }\n                        }\n                    }, {\n                        field: 'pert_id',\n                        name: 'Perturbagen Id'\n                    }, {\n                        field: 'target',\n                        name: 'Target'\n                    }, {\n                        field: 'moa',\n                        name: 'MOA'\n                    }],\n                items: allResults\n            });\n            table.on('selectionChanged', function (e) {\n                var selectedRows = e.selectedRows;\n                if (selectedRows == null || selectedRows.length === 0) {\n                    Plotly.Fx.hover($plot[0], []);\n                } else {\n                    var points = [];\n                    selectedRows.forEach(function (row) {\n                        var item = table.getItems()[row];\n                        points.push({\n                            curveNumber: 0,\n                            pointNumber: pertIdToIndex.get(item.pert_id)\n                        });\n                    });\n                    Plotly.Fx.hover($plot[0], points);\n                }\n            });\n            var tableFilter = {\n                isEmpty: function () {\n                    return filteredIds == null;\n                },\n                init: function () {\n\n                },\n                accept: function (item) {\n                    return filteredIds.has(item.pert_id);\n                }\n            };\n            // add the facet filters to the table filter\n            table.getFilter().add(tableFilter);\n            table.refilter();\n        });\n        var plotly = clue.getPlotlyDefaults2();\n        // plotly.layout.xaxis.range = [79, 101];\n        plotly.layout.xaxis.title = xaxisPclIds.join(', ');\n        plotly.layout.title = 'Spearman ' + morpheus.Util.nf(correlation);\n        // plotly.layout.yaxis.range = [79, 101];\n        var yaxisPcls = morpheus.VectorUtil.getValues(yaxisDataset.getRowMetadata().getByName('pert_id'));\n        plotly.layout.yaxis.title = yaxisPcls.length === 1 ? yaxisPcls[0] : 'Max of ' +\n            ' ' + yaxisPcls.join(', ');\n        plotly.layout.dragmode = 'select';\n        plotly.layout.shapes = [\n            {\n                type: 'line',\n                x0: -110,\n                y0: -100,\n                x1: 100,\n                y1: 100,\n                line: {\n                    color: 'LightGrey',\n                    width: 1,\n                    dash: 'longdash'\n                }\n            }];\n        Plotly.plot($plot[0], traces, plotly.layout, plotly.config);\n\n        $plot[0].on('plotly_selected', function (data) {\n            filteredIds = null;\n            if (data != null) {\n                filteredIds = new morpheus.Set();\n                var points = data.points;\n                for (var i = 0; i < points.length; i++) {\n                    var id = pertIdVector.getValue(points[i].pointNumber);\n                    filteredIds.add(id);\n                }\n            }\n            if (table != null) {\n                table.refilter();\n            }\n\n        });\n    }).fail(function (err) {\n        $vis.html('Unexpected error. Please try again.');\n    });\n\n};\n\nexports.changeTabHeader = function(tabObject) {\n    $('#headerButtonRow').hide();\n    $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/class-selectivity.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/conn.js":
/*!******************************************************!*\
  !*** ./public/js/local/command/dist/actions/conn.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n *\n * @param options.q25 Array of q25 values\n * @param options.q50 Array of median values\n * @param options.q75 Array of q75 values\n * @param options.xaxisLabels Array of x axis labels\n * @param options.yaxisTitle\n * @param options.el Plotly element\n */\n//conn\nexports.changeTabHeader = function(tabObject) {\n    setupHeader(tabObject);\n    showInputInterpretations(tabObject);\n};\nfunction buildDropdownHeader(title,text) {\n  return '<li class=\"dropdown-header\">' +\n    '<p class=\"dropdown-header-text\"><b>' + title + '</b><br/>' + text +\n    '</p></li>';\n}\nfunction buildDropdownOption(interpretation, assay, text) {\n    return '<li><a href=\"#\" data-interpretation=\"' + interpretation + '\" data-assay=\"' + assay + '\">' +\n        '<p class=\"dropdown-text\"><b>' + text + '</b></p></a></li>';\n}\nfunction setupInputInterpretations(object) {\n    var $interpretation = object.$el.find('.input-interpretation');\n    $interpretation.show();\n    var dropdownTitles = {topConnOption:'Top Connections',introspectOption:'Introspect',topConnGcpOption:'Top Connections (GCP)'};\n    var dropdownList = buildDropdownHeader('Top Connections',\n      'Show top connections between<br> selected perturbagens and the<br> reference Touchstone dataset');\n\n    dropdownList += buildDropdownOption('top', 'L1000', 'Gene expression (L1000)');\n    dropdownList += buildDropdownOption('top', 'GCP', 'Histone profiling (GCP)');\n    dropdownList += buildDropdownOption('top', 'P100', 'Phosphoproteomics (P100)');\n    if (object.ids.length > 1) {\n        dropdownList += buildDropdownHeader('Introspect',\n          'View internal connectivities<br> between selected perturbagens');\n        dropdownList += buildDropdownOption('introspect', 'L1000', 'Gene expression (L1000)');\n        dropdownList += buildDropdownOption('introspect', 'GCP', 'Histone profiling (GCP)');\n        dropdownList += buildDropdownOption('introspect', 'P100', 'Phosphoproteomics (P100)');\n    }\n    object.$el.find('.input-interpretation-options').html(dropdownList);\n    object.$el.find('.active-option').text('Top Connections (L1000)');\n    // object.$el.find('[data-option=\"top-l1000\"]').on('click',{object:object}, function(e){\n    //     var object = e.data.object;\n    //     object.$el.find('[data-type=tab]').hide();\n    //     object.$el.find('[data-name=topTab]').show();\n    //     object.$el.find('.active-option').text(dropdownTitles.topConnOption);\n    //     object.$el.find('.display-form').hide(function() {\n    //       object.formBuilders.top['L1000'].$form.fadeIn();\n    //     });\n    //\n    // });\n    // object.$el.find('[data-option=\"introspect-l1000\"]').on('click',{object:object}, function(e){\n    //     var object = e.data.object;\n    //     object.$el.find('[data-type=tab]').hide();\n    //     object.$el.find('[data-name=introspectTab]').show();\n    //     updateIntrospect(object);\n    //     object.$el.find('.active-option').text(dropdownTitles.introspectOption);\n    //     object.$el.find('.display-form').hide(function() {\n    //       object.formBuilders.introspect['L1000'].$form.fadeIn();\n    //     });\n    //\n    // });\n    $interpretation.find('a').on('click',{object:object}, function(e){\n      var object = e.data.object;\n      updateTab(object,$(this).data('interpretation'),$(this).data('assay'));\n        // object.$el.find('[data-type=tab]').hide();\n        // object.$el.find('[data-name=introspectTab]').show();\n        // object.$el.find('.active-option').text(dropdownTitles.introspectOption);\n        // object.$el.find('.display-form').hide(function() {\n        // });\n\n    });\n}\nfunction setupOutButtons(object) {\n  var outHtml = '<span>See all connections:&nbsp;' +\n  '<button type=\"button\" class=\"btn-send-to-app\" data-name=\"show-heatmap\"><i class=\"fa fa-align-left\"></i></button>' +\n  '<button type=\"button\" class=\"btn-send-to-app\" data-name=\"show-detailed-list\"><i class=\"fa fa-th\"></i></button></span>';\n  //   var outHtml =  '<label class=\"pull-left btn-sm hidden-xs hidden-sm\">See all connections: </label>' +\n  //   '<button class=\"btn btn-sm btn-send-to-app\"><i class=\"fa fa-align-left\"></i></button>' +\n  //   '<button class=\"btn btn-sm btn-send-to-app\"><i class=\"fa fa-th\"></i></button>';\n  object.$el.find('.command-out-links').prepend(outHtml);\n  object.$el.find('[data-name=\"show-heatmap\"]').on('click',{object:object}, function(e) {\n    window.open('/icv?pert_id=' + e.data.object.ids.join('&pert_id='));\n  });\n  object.$el.find('[data-name=\"show-detailed-list\"]').on('click',{object:object}, function(e) {\n    window.open('/connection?url=data.clue.io/tsv2/digests/' + object.ids.join('&url=data.clue.io/tsv2/digests/'));\n  });\n}\nfunction setupExportOptions(object) {\n    var $el = object.$el;\n    $el.find('.command-out-links').show();\n    var topConnHeatMap = object.topConnHeatMaps;\n    var $exportOptions = $el.find('.export-options');\n    var exportOptionsHtml = '<input type=\"radio\" name=\"exportType\" value=\"0\" class=\"export-radio\">' +\n        'Export the top connection data as a GCT (.gct, Version 1.3)</input><br>';\n    $exportOptions.html(exportOptionsHtml);\n    $el.find('.export-btn-confirm').on('click',{heatmaps:object.topConnHeatMaps, o:object, $el: object.$el},function(e) {\n      executeExport(e.data.heatmaps[object.activeTopConn], $el);\n    });\n    $el.find('.export-btn-cancel').on('click',{object:object},function(e) {\n      e.data.object.$el.find('.export-modal').modal('hide');\n    });\n    $el.find('.export-btn').on('click',{$el:object.$el},function(e) {\n      e.data.$el.find('.export-warning').html('');\n      e.data.$el.find('.export-pending').html('');\n    });\n}\nfunction setupIntrospectFormBuilder(object, cellLines, assay) {\n  object.formBuilders.introspect[assay] = new morpheus.FormBuilder({formStyle: 'inline'});\n  if (object.ids.length > 2) {\n    object.formBuilders.introspect[assay].append({\n      type: 'bootstrap-select',\n      name: 'cluster_introspect_data',\n      options: ['Summary', 'Each cell line individually'].concat(cellLines),\n      value: 'Each cell line individually'\n    });\n    object.formBuilders.introspect[assay].append({\n      type: 'checkbox',\n      name: 'compress_heat_maps'\n    });\n  }\n  object.formBuilders.introspect[assay].$form.find('label').addClass('display-label');\n  object.formBuilders.introspect[assay].$form.find('.bootstrap-select').addClass('display-selector-button');\n  object.formBuilders.introspect[assay].$form.addClass('display-form');\n  object.formBuilders.introspect[assay].find('cluster_introspect_data').on('change', {object:object,assay:assay}, function (e) {\n    reorderIntrospect(e.data.object, e.data.assay);\n  });\n  object.formBuilders.introspect[assay].find('compress_heat_maps').on('change', {object:object,assay:assay}, function (e) {\n    var isFit = e.data.object.formBuilders.introspect[e.data.assay].getValue('compress_heat_maps');\n    if (!isFit) {\n      e.data.object.cellLineToInfo[e.data.assay].forEach(function (info, cell) {\n        if (cell !== 'Summary') {\n          info.heatMap.getHeatMapElementComponent().getRowPositions().setSize(13);\n          info.heatMap.getHeatMapElementComponent().getColumnPositions().setSize(13);\n          info.heatMap.addTrack('name', true, {display: ['text']});\n          info.heatMap.addTrack('type', true, {display: ['color']});\n          info.heatMap.addTrack('name', false, {display: ['text']});\n          if(info.dataset.getRowMetadata().getByName('type')) {\n            info.heatMap.addTrack('type', false, {display: ['color']});\n          }\n          if(info.dataset.getRowMetadata().getByName('search term')) {\n            info.heatMap.addTrack('search term', false, {display: ['text']});\n          }\n          info.heatMap.revalidate();\n          info.$el.css({\n            width: object.maxWidth,\n            height: object.maxHeight\n          });\n        }\n      });\n    } else {\n      var shrunkWidth = 0;\n      var shrunkHeight = 0;\n      e.data.object.cellLineToInfo[assay].forEach(function (info, cell) {\n        if (cell !== 'Summary') {\n          info.$el.css({\n            width: '',\n            height: ''\n          });\n          info.heatMap.getHeatMapElementComponent().getRowPositions().setSize(3);\n          info.heatMap.getHeatMapElementComponent().getColumnPositions().setSize(3);\n          info.heatMap.removeTrack('name', true);\n          info.heatMap.removeTrack('type', true);\n          info.heatMap.removeTrack('name', false);\n          info.heatMap.removeTrack('type', false);\n          info.heatMap.removeTrack('search term', false);\n          info.heatMap.revalidate();\n          shrunkWidth = Math.max(shrunkWidth, info.$el.width());\n          shrunkHeight = Math.max(shrunkHeight, info.$el.height());\n        }\n      });\n    }\n  });\n  object.formBuilders.introspect[assay].$form.appendTo(object.$el.find('.header-display-options'));\n}\nfunction setupTopFormBuilder(object, assay) {\n  object.formBuilders.top[assay].$form.find('label').addClass('display-label');\n  object.formBuilders.top[assay].$form.find('.bootstrap-select').addClass('display-selector-button');\n  object.formBuilders.top[assay].$form.addClass('display-form');\n  object.formBuilders.top[assay].find('cell_lines').on('change', {o: object, assay: assay}, function (e) {\n    var object = e.data.o;\n    var assay = e.data.assay;\n    object.selectedCellLineSets[assay] = new morpheus.Set();\n    var values = object.formBuilders.top[assay].getValue('cell_lines');\n    if (values != null) {\n      values.forEach(function (value) {\n        object.selectedCellLineSets[assay].add(value);\n      });\n    }\n      const p = updateColumnFilter(object, assay);\n      p.then(function () {\n          return \"done\"\n      }).catch(function (ee) {\n          return \"done\"\n      })\n  });\n  object.formBuilders.top[assay].find('perturbagens').on('change', {o: object, assay: assay}, function (e) {\n    var object = e.data.o;\n    var assay = e.data.assay;\n    object.selectedPertSets[assay] = new morpheus.Set();\n    var values = object.formBuilders.top[assay].getValue('perturbagens');\n    if (values != null) {\n      values.forEach(function (value) {\n        object.selectedPertSets[assay].add(value);\n      });\n    }\n      const p = updateColumnFilter(object, assay);\n      p.then(function () {\n\n      }).catch(function (ee) {\n\n      });\n  });\n  object.formBuilders.top[assay].find('group_by').on('change', {o: object, assay: assay}, function (e) {\n    var object = e.data.o;\n    var assay = e.data.assay;\n    var groupBy = object.formBuilders.top[assay].getValue('group_by');\n    var keys;\n    var groupByField = null;\n    var heatMaps = [object.topConnHeatMaps[assay]];\n    if(assay==='L1000') { heatMaps = heatMaps.concat(object.heatMapSubsets) };\n    if (groupBy === 'None') {\n      keys = [new morpheus.SortKey('name', 0, true)];\n      object.topConnHeatMaps[assay].getProject().setColumnSortKeys(keys, false);\n    }\n    else if (groupBy === 'Cell Line') {\n        keys = [\n          new morpheus.SortKey('cell_id', 0, true),\n          new morpheus.SortKey('type', 1, true),\n          new morpheus.SortKey('name', 0, true)];\n        groupByField = 'cell_id';\n    }\n    else if (groupBy === 'Perturbagen') {\n        keys = [\n          new morpheus.SortKey('type', 1, true),\n          new morpheus.SortKey('name', 0, true),\n          new morpheus.SortKey('cell_id', 0, true)];\n        groupByField = '_id';\n    }\n    keys.forEach(function (key) {\n      key.setLockOrder(1);\n    });\n    heatMaps.forEach(function (heatMap) {\n      heatMap.getProject().setColumnSortKeys(keys, false);\n      heatMap.getProject().setGroupColumns(groupByField == null ? [] : [new morpheus.SortKey(groupByField, 0, true)], true);\n        // if(groupByField) {\n        //\n        // }\n    });\n      //\n      //   if(assay==='L1000') {\n      //\n      //   }\n      //   object.topConnHeatMaps[assay].getProject().setColumnSortKeys(keys, false);\n      //   object.topConnHeatMaps[assay].getProject().setGroupColumns(groupByField == null ? [] : [new morpheus.SortKey(groupByField, 0, true)], true);\n      // }\n  });\n  object.formBuilders.top[assay].$form.appendTo(object.$el.find('.header-display-options'));\n}\nfunction executeExport(topConnHeatMap, $el) {\n    $el.find('.export-warning').html('');\n    var inputType = $el.find('input[name=\"exportType\"]:checked').val();\n    var fileName = $el.find('.export-filename-prompt').val();\n    fileName = fileName ? fileName : 'command_output';\n\n    if(!inputType) {\n      $el.find('.export-warning').html('No option selected');\n    }\n    else {\n        if(inputType==0) {\n            exports.saveTopConnHeatMap(topConnHeatMap, fileName);\n        }\n        $el.find('.export-modal').modal('hide');\n    }\n}\n\nfunction setupHeader(object) {\n  setupInputInterpretations(object);\n  setupOutButtons(object);\n  setupExportOptions(object);\n}\nexports.saveTopConnHeatMap = function(heatMap, fileName) {\n    var project = heatMap.getProject();\n    var series = project.getFullDataset().getName(0);\n    options = {\n        project: project,\n        heatMap: heatMap,\n        input: {\n            file_format: '1.3',\n            save_selection_only: 1,\n            file_name: fileName,\n            series: project.getFullDataset().getName(0)\n        }\n    };\n    morpheus.SaveDatasetTool.prototype.execute(options);\n};\nfunction createLineBoxPlot(options) {\n    var traces = [];\n    var text = [];\n    for (var i = 0; i < options.q50.length; i++) {\n        var label = 'Median: ' + morpheus.Util.nf(options.q50[i]);\n        if (options.q75) {\n            label += ', Q75: ' + morpheus.Util.nf(options.q75[i]) + ', Q25: ' + morpheus.Util.nf(options.q25[i]);\n        }\n        text.push(label);\n\n    }\n    var color = 'rgb(0, 0, 0)';\n    traces.push({\n            x: options.xaxisLabels,\n            y: options.q50,\n            text: text,\n            hoverinfo: 'x+text',\n            line: {color: color},\n            mode: 'lines',\n            type: 'scatter',\n            showlegend: true\n        }\n    );\n\n    // q75, top of fill\n    if (options.q75) {\n        traces.push({\n                text: text,\n                hoverinfo: 'x+text',\n                x: options.xaxisLabels,\n                y: options.q75,\n                line: {color: 'transparent'},\n                type: 'scatter',\n                showlegend: false\n            }\n        );\n    }\n    // q25\n    if (options.q25) {\n        traces.push({\n            text: text,\n            hoverinfo: 'x+text',\n            x: options.xaxisLabels,\n            y: options.q25,\n            fill: 'tonexty',\n            fillcolor: 'rgba(100,100,100, .2)',\n            line: {color: 'transparent'},\n            type: 'scatter',\n            showlegend: false\n        });\n    }\n\n    var plotlyDefaults = clue.getPlotlyDefaults2();\n    var layout = plotlyDefaults.layout;\n    var config = plotlyDefaults.config;\n    config.displayModeBar = false;\n    layout.showlegend = false;\n    layout.xaxis.fixedrange = true;\n    layout.yaxis.fixedrange = true;\n    if(options.assay==='L1000') {\n      layout.yaxis.range = [-101, 101];\n    }\n    else {\n      layout.yaxis.range = [-1.01, 1.01];\n    }\n    layout.xaxis.tickangle = -90;\n    layout.yaxis.title = options.yaxisTitle;\n    // layout.yaxis.tickvals = [-100, -90, 0, 90, 100];\n\n    layout.width = 300;\n    layout.height = 200;\n    layout.margin.b = 70;\n    layout.margin.t = 10;\n    layout.margin.r = 6;\n\n    Plotly.newPlot(options.el, traces, layout, config);\n}\nexports.show = function(options) {\n  var promises = [];\n  if (clue.ICV.L1000_ANNOTATION_LINES_ROWS == null || clue.ICV.L1000_ANNOTATION_LINES_COLUMNS == null) {\n    var annotationPromise = morpheus.Util.readLines(clue.ICV.ANNOTATIONS);\n    promises.push(annotationPromise);\n      annotationPromise.then(function (lines) {\n      clue.ICV.L1000_ANNOTATION_LINES_ROWS = lines;\n      clue.ICV.L1000_ANNOTATION_LINES_COLUMNS = lines;\n    });\n  }\n  if (clue.ICV.PROT_ANNOTATION_LINES_ROWS == null || clue.ICV.PROT_ANNOTATION_LINES_COLUMNS == null) {\n    var annotationPromise = morpheus.Util.readLines(clue.ICV.PROT_ANNOTATIONS);\n    promises.push(annotationPromise);\n      annotationPromise.then(function (lines) {\n      clue.ICV.PROT_ANNOTATION_LINES_ROWS = lines;\n      clue.ICV.PROT_ANNOTATION_LINES_COLUMNS = lines;\n    });\n  }\n  if (clue.ICV.PCL_METADATA == null) {\n    var p = $.ajax(clue.API_URL + '/api/pcls/?filter={\"include\":{\"relation\":\"perts\",\"scope\":{\"fields\":[\"pert_id\"]}}}');\n    p.done(function (results) {\n      clue.ICV.PCL_METADATA = results;\n    });\n    promises.push(p);\n  }\n  var object = options.object;\n  object.updated = {\n    introspect : {},\n    top : {}\n  };\n  object.formBuilders = {\n    introspect : {},\n    top : {}\n  };\n  object.fullDatasets = {};\n  object.selectedPertSets = {};\n  object.selectedCellLineSets = {};\n  object.cellLineVectors = {};\n  object.nameVectors = {};\n  object.idToIndexes = {};\n  object.cellLineToInfo = {\n    L1000: new morpheus.Map(),\n    GCP: new morpheus.Map(),\n    P100: new morpheus.Map()\n  };\n  object.topConnHeatMaps = {};\n  options.ids.forEach(function(str,idx) {\n    options.ids[idx] = str.replace(/ccsbbroad/i, 'ccsbBroad');\n  });\n  object.ids = options.ids;\n  object.introspectUpdated = false;\n  object.idToSearchTerms = options.idToSearchTerms;\n  object.activeOption = 'topConnOption';\n  object.$el = options.$el;\n  object.tokens = options.tokens;\n  var showSearchTerms = false;\n  object.showSearchTerms = showSearchTerms;\n  var html = [];\n  var topConnHelp = 'The \"score\" column is the median' +\n    ' connectivity' +\n    ' score' +\n    ' across the <b>selected' +\n    ' perturbagens' +\n    ' and cell lines.</b>';\n  html.push('<div class=\"col-xs-12\">');\n  html.push('<div data-name=\"colorscale\" data-assay=\"L1000\"><img style=\"width:205px;height:auto;\" class=\"img-key pull-right\" src=\"//assets.clue.io/clue/public/img/command/conn_legend.png\"></div>');\n  html.push('<div style=\"display: none;\" data-name=\"colorscale\" data-assay=\"GCP\"><img style=\"width:205px;height:auto;\" class=\"img-key pull-right\" src=\"//assets.clue.io/clue/public/img/command/conn_legend_prot.png\"></div>');\n  html.push('<div style=\"display: none;\" data-name=\"colorscale\" data-assay=\"P100\"><img style=\"width:205px;height:auto;\" class=\"img-key pull-right\" src=\"//assets.clue.io/clue/public/img/command/conn_legend_prot.png\"></div>');\n  html.push('<div data-name=\"topTab\" data-assay=\"L1000\" data-interpretation=\"top\" data-type=\"tab\">');\n  html.push('<div data-name=\"top\"><span data-interpretation=\"top\" class=\"extra-info-text\">' + topConnHelp + '<br/>The top and bottom scores are shown' +\n    ' separately' +\n    ' for' +\n    ' perturbagen classes, compounds, genetic' +\n    ' perturbations' +\n    ' (overexpressions' +\n    ' and knockdowns).</span></div>');\n  html.push('<label class=\"conn-heatmap-title\">Perturbagen class</label>');\n  html.push('<div data-name=\"topOne\" class=\"conn-heatmap-subsection\"></div>');\n  html.push('<label class=\"conn-heatmap-title\">Compound</label>');\n\n  html.push('<div data-name=\"topTwo\" class=\"conn-heatmap-subsection\"></div>');\n  html.push('<label class=\"conn-heatmap-title\">Genetic</label>');\n\n  html.push('<div data-name=\"topThree\" class=\"conn-heatmap-subsection\"></div>');\n  html.push('</div>');\n  html.push('<div style=\"display: none;\"  data-assay=\"GCP\" data-interpretation=\"top\" data-name=\"topTab\"' +\n    ' data-type=\"tab\"><div data-name=\"top\"><span data-interpretation=\"top\" class=\"extra-info-text\">' + topConnHelp + '</span></div></div>');\n  html.push('<div style=\"display: none;\" data-assay=\"P100\" data-interpretation=\"top\" data-name=\"topTab\"' +\n    ' data-type=\"tab\"><div data-name=\"top\"><span data-interpretation=\"top\" class=\"extra-info-text\">' + topConnHelp + '</span></div></div>');\n  html.push('<div data-assay=\"L1000\" data-interpretation=\"introspect\" data-name=\"introspectTab\"' +\n      ' data-type=\"tab\"></div>');\n  html.push('<div data-assay=\"GCP\" data-interpretation=\"introspect\" data-name=\"introspectTab\"' +\n    ' data-type=\"tab\"></div>');\n  html.push('<div data-assay=\"P100\" data-interpretation=\"introspect\" data-name=\"introspectTab\"' +\n    ' data-type=\"tab\"></div>');\n// probably don't need this: <div data-name=\"introspect\"></div>\n  html.push('</div>');\n\n  var $el = $(html.join(''));\n  $el.appendTo(options.$el);\n  $el.hide();\n  var f = $.Deferred();\n\n  $.when.apply($, promises).done(function () {\n    var d = updateTopConnections(object, 'L1000');\n    d.done(function () {\n      setupHeader(options.object);\n      $el.show();\n      f.resolve();\n    }).fail(function () {\n      console.log('updateTopConnections failed');\n    });\n  });\n// when something is clicked:\n    // hide all headers, selectors and tabs\n    // show loading el\n    // call update function\n    // once done, re-reveal everything\n\n  return f;\n};\n// object.selectedCellLines, object.cellLineVectors, object.nameVectors, object.typeVector, fullDataset, object.cellLineDataset, object.selectedPerts, heatMap\nasync function updateColumnFilter(object, assay) {\n  var columnIndices = null;\n  var pertName = null;\n\n  if (object.selectedCellLineSets[assay] != null && object.selectedCellLineSets[assay].size() > 0) {\n    columnIndices = [];\n    for (var j = 0; j < object.cellLineVectors[assay].size(); j++) {\n      pertName = object.nameVectors[assay].getValue(j);\n        if (assay === 'L1000') {\n            pertName = pertName + '-' + object.typeVector.getValue(j);\n        }\n      if (object.selectedCellLineSets[assay].has(object.cellLineVectors[assay].getValue(j))) {\n        columnIndices.push(j);\n      }\n    }\n  }\n  object.cellLineDataset = new morpheus.SlicedDatasetView(object.fullDatasets[assay], null, columnIndices);\n  var indexVector = object.cellLineDataset.getColumnMetadata().add('is_index');\n  var connectionsDataset = object.cellLineDataset;\n  if (object.selectedPertSets[assay] != null && object.selectedPertSets[assay].size() > 0) {\n    // pick refererence perts\n    var currentDatasetTypeVector = object.cellLineDataset.getColumnMetadata().getByName('type');\n    var currentDatasetNameVector = object.cellLineDataset.getColumnMetadata().getByName('name');\n    var pertIndices = [];\n    for (var j = 0; j < object.cellLineDataset.getColumnCount(); j++) {\n      pertName = currentDatasetNameVector.getValue(j);\n        if (assay === 'L1000') {\n            pertName = pertName + '-' + object.typeVector.getValue(j);\n        }\n      if (object.selectedPertSets[assay].has(pertName)) {\n        pertIndices.push(j);\n        indexVector.setValue(j, true);\n      }\n    }\n\n    connectionsDataset = new morpheus.SlicedDatasetView(object.cellLineDataset, null, pertIndices);\n  }\n  var rowIds = getTopRowIds(connectionsDataset);\n  var rowIndices = [];\n  for (var i = 0, size = rowIds.length; i < size; i++) {\n    rowIndices.push(object.idToIndexes[assay].get(rowIds[i]));\n  }\n  var ds = new morpheus.SlicedDatasetView(object.cellLineDataset, rowIndices, null);\n    var heatMap = object.topConnHeatMaps[assay];\n    heatMap.promise.then(function () {\n        const project = heatMap.getProject();\n        project.setRowSortKeys(morpheus.SortKey.keepExistingSortKeys(\n            [new morpheus.SortKey('score', morpheus.SortKey.SortOrder.DESCENDING, false)],\n            project.getRowSortKeys()), false);\n        project.setFullDataset(ds, true);\n\n        if (assay === 'L1000') {\n            var heatMaps = object.heatMapSubsets;\n            var rowIdsMap = getTopRowIdsMap(connectionsDataset);\n\n            rowIdsMap.forEach(function (rowIds, idx) {\n                var rowIndices = [];\n\n                for (var i = 0, size = rowIds.length; i < size; i++) {\n                    rowIndices.push(object.idToIndexes[assay].get(rowIds[i]));\n                }\n                var ds = new morpheus.SlicedDatasetView(object.cellLineDataset, rowIndices, null);\n                var heatMap = heatMaps[idx];\n                const project1 = heatMap.getProject();\n                project1.setRowSortKeys(morpheus.SortKey.keepExistingSortKeys(\n                    [new morpheus.SortKey('score', morpheus.SortKey.SortOrder.DESCENDING, false)],\n                    project1.getRowSortKeys()), false);\n                project1.setFullDataset(ds, true);\n            });\n        }\n        return \"done\";\n    }).catch(function (ee) {\n        console.log(\"Error: \", ee);\n        return \"done\"\n    });\n}\nfunction getTopRowIds(dataset) {\n    var medianVector = dataset.getRowMetadata().add('score');\n    var view = new morpheus.DatasetRowView(dataset);\n    for (var i = 0; i < medianVector.size(); i++) {\n        medianVector.setValue(i, morpheus.Median(view.setIndex(i)));\n    }\n    var project = new morpheus.Project(dataset);\n    project.setRowSortKeys([new morpheus.SortKey('score', morpheus.SortKey.SortOrder.DESCENDING, false)], true);\n    dataset = project.getSortedFilteredDataset();\n\n    var ids = [];\n    if(dataset.getRowMetadata().getByName('group_by')) {\n      var typeToIndices = morpheus.VectorUtil.createValueToIndicesMap(\n        dataset.getRowMetadata().getByName('group_by'));\n      [0, 1, 2].forEach(function (type) {\n        var subset = new morpheus.SlicedDatasetView(dataset, typeToIndices.get(type), null);\n        medianVector = subset.getRowMetadata().getByName('score');\n        var idVector = subset.getRowMetadata().getByName('id');\n        var n = type === 0 ? 5 : 10;\n        for (var i = 0; i < n; i++) {\n          ids.push(idVector.getValue(i));\n        }\n        // NaNs are at bottom\n        var bottomIds = [];\n        for (var i = 0, j = idVector.size() - 1; bottomIds.length < n; i++, j--) {\n          if (!isNaN(medianVector.getValue(j))) {\n            bottomIds.push(idVector.getValue(j));\n          }\n        }\n        bottomIds.reverse();\n        ids = ids.concat(bottomIds);\n      });\n    }\n    else {\n        var idVector = dataset.getRowMetadata().getByName('id');\n        var n = 20;\n        for (var i = 0; i < n; i++) {\n          ids.push(idVector.getValue(i));\n        }\n        // NaNs are at bottom\n        var bottomIds = [];\n        for (var i = 0, j = idVector.size() - 1; bottomIds.length < n; i++, j--) {\n          if (!isNaN(medianVector.getValue(j))) {\n            bottomIds.push(idVector.getValue(j));\n          }\n        }\n        bottomIds.reverse();\n        ids = ids.concat(bottomIds);\n    }\n    return ids;\n}\nfunction getTopRowIdsMap(dataset) {\n  var medianVector = dataset.getRowMetadata().add('score');\n  var view = new morpheus.DatasetRowView(dataset);\n  for (var i = 0; i < medianVector.size(); i++) {\n    medianVector.setValue(i, morpheus.Median(view.setIndex(i)));\n  }\n  var project = new morpheus.Project(dataset);\n  project.setRowSortKeys([new morpheus.SortKey('score', morpheus.SortKey.SortOrder.DESCENDING, false)], true);\n  dataset = project.getSortedFilteredDataset();\n\n  var idsMap = [];\n  var typeToIndices = morpheus.VectorUtil.createValueToIndicesMap(\n    dataset.getRowMetadata().getByName('group_by'));\n  [0, 1, 2].forEach(function (type) {\n    var ids = [];\n    var subset = new morpheus.SlicedDatasetView(dataset, typeToIndices.get(type), null);\n    medianVector = subset.getRowMetadata().getByName('score');\n    var idVector = subset.getRowMetadata().getByName('id');\n    var n = type === 0 ? 5 : 10;\n    for (var i = 0; i < n; i++) {\n      ids.push(idVector.getValue(i));\n    }\n    // NaNs are at bottom\n    var bottomIds = [];\n    for (var i = 0, j = idVector.size() - 1; bottomIds.length < n; i++, j--) {\n      if (!isNaN(medianVector.getValue(j))) {\n        bottomIds.push(idVector.getValue(j));\n      }\n    }\n    bottomIds.reverse();\n    ids = ids.concat(bottomIds);\n    idsMap.push(ids);\n  });\n  return idsMap;\n}\nfunction reorderIntrospect(object, assay) {\n    var cellLineToInfo = object.cellLineToInfo[assay];\n    var clusterBy = object.formBuilders.introspect[assay].getValue('cluster_introspect_data');\n    if (clusterBy === 'Each cell line individually') {\n        // set order\n        cellLineToInfo.forEach(function (value, cell) {\n            value.heatMap.getProject().setFullDataset(value.dataset, true);\n        });\n    } else {\n        var dataset = cellLineToInfo.get(clusterBy).dataset;\n        var pertIdVector = dataset.getRowMetadata().getByName('id');\n        // put other heat maps in this order\n        cellLineToInfo.forEach(function (value, cell) {\n            var order = [];\n            var newPertIdToIndex = morpheus.VectorUtil.createValueToIndexMap(\n                value.dataset.getRowMetadata().getByName('id'));\n            for (var i = 0; i < pertIdVector.size(); i++) {\n                var index = newPertIdToIndex.remove(pertIdVector.getValue(i));\n                if (index !== undefined) {\n                    order.push(index);\n                }\n            }\n            // add on missing\n            newPertIdToIndex.forEach(function (index, pert) {\n                order.push(index);\n            });\n\n            value.heatMap.getProject().setFullDataset(new morpheus.SlicedDatasetView(value.dataset, order, order), true);\n        });\n\n    }\n}\n\nfunction updateTab(object,interpretation,assay) {\n  object.$el.find('[data-type=tab]').hide();\n  object.$el.find('[data-name=colorscale]').hide();\n  // $el is content, loadingEl is sibling\n  object.$el.parent().find('[data-name=loading]').show();\n  object.$el.find('.display-form').hide();\n  var optionText = '';\n  var d = null;\n\n  // putting inside \"done\" is messing with maxHeight stuff\n  object.$el.parent().find('[data-name=loading]').hide();\n  object.$el.find('[data-name=colorscale][data-assay='+assay+']').fadeIn();\n  object.$el.find('[data-type=tab][data-assay='+assay+'][data-interpretation='+interpretation+']').fadeIn();\n\n\n  if(interpretation==='top') {\n    d = updateTopConnections(object,assay);\n    optionText = optionText + 'Top Connections ';\n  }\n  else {\n    d = updateIntrospect(object,assay);\n    optionText = optionText + 'Introspect ';\n  }\n  optionText = optionText + '(' + assay + ')';\n  object.$el.find('.active-option').text(optionText);\n  d.done(function() {\n    if(object.formBuilders[interpretation][assay]) {\n      object.formBuilders[interpretation][assay].$form.fadeIn();\n    }\n  }).fail(function() {\n    console.log('update function failed');\n  });\n}\n\n// TODO BW: move show code to here, assay specific pull data, show form builder\nfunction updateTopConnections(object, assay) {\n  var d = $.Deferred();\n  var $el = object.$el.find('[data-assay='+assay+'][data-interpretation=top]');\n  object.activeTopConn = assay;\n  if(object.updated.top[assay]) {\n    d.resolve();\n    return d;\n  }\n  else {\n    var defaultLine = null;\n    var rowSize = null;\n    var colorScheme = null;\n    var rowNames = null;\n    if(assay==='L1000') {\n      colorScheme = clue.createGutcColorScheme();\n      defaultLine = 'Summary';\n      rowSize=0;\n      rowNames = [\n        {\n          field: 'empty',\n          display: 'text'\n        }];\n    }\n    else {\n      colorScheme = clue.ICV.ProteomicsColorScheme;\n      defaultLine = 'MCF7';\n      rowSize=14;\n      rowNames = [\n        {\n          field: 'score',\n          display: ['text']\n        }, {\n          field: 'name',\n          display: 'text'\n        }, {\n          field: 'moa',\n          display: 'text'\n        }];\n    }\n    object.updated.top[assay] = true;\n    var promises = [];\n    var $top = $el.find('[data-name=top]');\n    var $topOne = $el.find('[data-name=topOne]');\n    var $topTwo = $el.find('[data-name=topTwo]');\n    var $topThree = $el.find('[data-name=topThree]');\n    var connData = __webpack_require__(/*! Shared/connData.js */ \"./public/js/local/command/dist/shared/connData.js\");\n    connData.getData(object.ids,assay).done(\n      function (dataset) {\n      var fullDataset = dataset;\n      // add description to rows, type to columns\n      // separate heat maps for pcl, genetic, compound\n      if (object.tokens.length > 1 && !object.showSearchTerms) {\n        fullDataset.getColumnMetadata().remove(morpheus.MetadataUtil.indexOf(fullDataset.getColumnMetadata(), 'search' +\n          ' term'));\n      }\n      var tmp = new morpheus.Project(fullDataset);\n      tmp.setColumnSortKeys([\n        new morpheus.SortKey('type', morpheus.SortKey.SortOrder.DESCENDING, true),\n        new morpheus.SortKey('name', morpheus.SortKey.SortOrder.ASCENDING, true),\n        new morpheus.SortKey('cell_id', morpheus.SortKey.SortOrder.ASCENDING, true)], true);\n      fullDataset = tmp.getSortedFilteredDataset();\n\n      if (object.tokens.length > 1) {\n        var pertIdVector = fullDataset.getColumnMetadata().getByName('_id');\n        var pertNameVector = fullDataset.getColumnMetadata().getByName('name');\n        var searchTermVector = fullDataset.getColumnMetadata().add('search term');\n        for (var j = 0; j < pertIdVector.size(); j++) {\n          var searchTerms = object.idToSearchTerms.get(pertIdVector.getValue(j).toUpperCase());\n          if (pertNameVector.getValue(j) !== searchTerms[0]) {\n            object.showSearchTerms = true;\n          }\n          searchTermVector.setValue(j, searchTerms);\n        }\n        if (!object.showSearchTerms) {\n          $top.addClass('conn-heatmap-no-search-terms');\n          fullDataset.getColumnMetadata().remove(morpheus.MetadataUtil.indexOf(fullDataset.getColumnMetadata(), 'search' +\n            ' term'));\n        }\n      }\n      else {\n        $top.addClass('conn-heatmap-no-search-terms');\n      }\n\n\n      // l1000 specific?\n      if(assay==='L1000') {\n        object.typeVector = fullDataset.getRowMetadata().getByName('type');\n        var groupByVector = fullDataset.getRowMetadata().add('group_by');\n        var typeMap = {\n          CP: 1,\n          PCL: 0\n        };\n        for (var i = 0, size = object.typeVector.size(); i < size; i++) {\n          var type = object.typeVector.getValue(i);\n          if (type === 'OE' || type === 'KD') {\n            groupByVector.setValue(i, 2);\n          } else {\n            groupByVector.setValue(i, typeMap[type]);\n          }\n        }\n      }\n\n      object.idToIndexes[assay] = morpheus.VectorUtil.createValueToIndexMap(fullDataset.getRowMetadata().getByName('id'));\n      object.cellLineVectors[assay] = fullDataset.getColumnMetadata().getByName('cell_id');\n      object.nameVectors[assay] = fullDataset.getColumnMetadata().getByName('name');\n      for (var i = 0, size = object.cellLineVectors[assay].size(); i < size; i++) {\n        var cell = object.cellLineVectors[assay].getValue(i);\n        if (cell === 'summary') {\n          object.cellLineVectors[assay].setValue(i, 'Summary');\n        }\n      }\n      var cellLineToIndices = morpheus.VectorUtil.createValueToIndicesMap(object.cellLineVectors[assay]);\n      var cellLines = cellLineToIndices.keys();\n      cellLines.sort();\n      var currentDataset = new morpheus.SlicedDatasetView(fullDataset, null, cellLineToIndices.get(defaultLine));\n      var rowIds = getTopRowIds(currentDataset);\n      var rowIndices = [];\n      for (var i = 0, size = rowIds.length; i < size; i++) {\n        rowIndices.push(object.idToIndexes[assay].get(rowIds[i]));\n      }\n\n        var ds = new morpheus.SlicedDatasetView(currentDataset, rowIndices, null);\n\n      var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n      var heatMapOptions = {\n        height: -1,\n        colorScheme: colorScheme,\n        dataset: ds,\n        el: $top,\n        toolbar: utils.quickMorpheusToolbar({\n          saveImage: false\n        }),\n        rowSize: rowSize,\n        rowGapSize: 0,\n        columnGapSize: 20,\n        columnsSortable: false,\n        inlineTooltip: false,\n        menu: false,\n        renderReady: function (heatMap) {\n          heatMap.getHeatMapElementComponent().getColorScheme()\n            .getConditions().add({\n            series: 'PCL',\n            color: '#fdf801',\n            shape: 'circle',\n            v1: 1,\n            v1Op: 'gte',\n            inheritColor: false,\n            accept: function (val) {\n              return val === 1;\n            }\n          });\n        },\n        autohideTabBar: true,\n        popupEnabled: true,\n        columns: [\n          {\n            field: 'cell_id',\n            display: 'text'\n          }, {\n            field: 'search term',\n            display: 'text'\n          }, {\n            field: 'name',\n            colorByField: 'is_index',\n            display: ['text']\n          }, {\n            field: 'type',\n            display: ['color']\n          }],\n        rows: rowNames\n      };\n      object.selectedCellLineSets[assay] = new morpheus.Set();\n      object.selectedCellLineSets[assay].add(defaultLine);\n          object.topConnHeatMaps[assay] = new morpheus.HeatMap(heatMapOptions);\n\n          if (assay === 'L1000') {\n              var heatMapsOptions = {\n                  height: -1,\n                  colorScheme: clue.createGutcColorScheme(),\n                  dataset: ds,\n                  el: $top,\n                  toolbar: utils.quickMorpheusToolbar({\n                      saveImage: false\n                  }),\n                  columnGapSize: 20,\n                  columnsSortable: false,\n                  menu: false,\n                  renderReady: function (heatMap) {\n                      heatMap.getHeatMapElementComponent().getColorScheme()\n                          .getConditions().add({\n                          series: 'PCL',\n                          color: '#fdf801',\n                          shape: 'circle',\n                          v1: 1,\n                          v1Op: 'gte',\n                          inheritColor: false,\n                          accept: function (val) {\n                              return val === 1;\n                          }\n                      });\n                  },\n                  autohideTabBar: true,\n                  popupEnabled: true,\n                  rowGroupBy: [\n                      {\n                          field: 'group_by',\n                          type: 'annotation'\n                      }],\n                  rowSortBy: [\n                      {\n                          field: 'group_by',\n                          type: 'annotation',\n                          order: 0,\n                          lockOrder: 1\n                      }, {\n                          field: 'score',\n                          type: 'annotation',\n                          order: 1\n                      }],\n                  columns: [\n                      {\n                          field: 'empty',\n                          display: ['text']\n                      }],\n                  rows: [\n                      {\n                          field: 'score',\n                          display: ['text']\n                      }, {\n                          field: 'type',\n                          display: 'color'\n                      }, {\n                          field: 'name',\n                          display: 'text'\n                      }, {\n                          field: 'description',\n                          display: 'text'\n                      }]\n              };\n              object.heatMapSubsets = [];\n              // heatMapOptions.columns = [];\n              heatMapsOptions.el = $topOne;\n              object.heatMapSubsets.push(new morpheus.HeatMap(heatMapsOptions));\n              heatMapsOptions.el = $topTwo;\n              object.heatMapSubsets.push(new morpheus.HeatMap(heatMapsOptions));\n              heatMapsOptions.el = $topThree;\n              object.heatMapSubsets.push(new morpheus.HeatMap(heatMapsOptions));\n              object.heatMapSubsets.forEach(function (heatMap) {\n                  heatMap.on('change', function (e) {\n                      if (e.name == 'setMousePosition') {\n                          object.topConnHeatMaps[assay].setMousePosition(-1, e.arguments[1], e.arguments[2]);\n                      }\n                  });\n              });\n          }\n\n\n          $el.find(\"[data-name=tip]\").each(function (index) {\n              $(this).css(\"margin-bottom\", \"15px\");\n          });\n          $el.find(\"[data-name=toolbar]\").each(function (index) {\n              $(this).css(\"height\", \"0\");\n          });\n          object.formBuilders.top[assay] = new morpheus.FormBuilder({formStyle: 'inline'});\n          object.formBuilders.top[assay].append({\n              name: 'cell_lines',\n              type: 'bootstrap-select',\n              multiple: true,\n              options: cellLines,\n              value: defaultLine\n          });\n\n          if (object.ids.length > 1) {\n              var pertNames = [];\n              for (var i = 0; i < object.nameVectors[assay].size(); i++) {\n                  var cellLine = object.cellLineVectors[assay].getValue(i);\n                  if (cellLine === defaultLine) {\n                      var pertName = object.nameVectors[assay].getValue(i);\n                      if (assay === 'L1000') {\n                          pertName = pertName + '-' + object.typeVector.getValue(i)\n                      }\n                      pertNames.push(pertName);\n                  }\n              }\n              pertNames.sort(function (a, b) {\n                  a = a.toLowerCase();\n                  b = b.toLowerCase();\n                  return (a === b ? 0 : (a < b ? -1 : 1));\n              });\n              object.formBuilders.top[assay].append({\n                  name: 'perturbagens',\n                  multiple: true,\n                  type: 'bootstrap-select',\n                  options: pertNames,\n                  value: pertNames,\n                  selectAll: true\n              });\n              var $select = object.formBuilders.top[assay].find('perturbagens');\n              $select.data('actions-box', 'true');\n              $select.selectpicker('selectAll');\n              $select.selectpicker('render');\n              object.formBuilders.top[assay].append({\n                  name: 'group_by',\n                  type: 'bootstrap-select',\n                  options: ['Cell Line', 'None', 'Perturbagen'],\n                  value: 'None'\n              });\n          }\n          object.fullDatasets[assay] = fullDataset;\n          const p = updateColumnFilter(object, assay);\n          p.then(function () {\n              const q = setupTopFormBuilder(object, assay);\n              q.then(function () {\n                  d.resolve();\n                  $el.show();\n              }).catch(function (ee) {\n                  d.resolve();\n                  $el.show();\n              });\n\n          }).catch(function (ee) {\n              d.resolve();\n              $el.show();\n          });\n    })\n    .fail(function () {\n      $el.empty();\n      $('<span class=\"extra-info-text\">No ' + assay +\n        ' connectivity data for the given search terms ' +\n        'exist in this version of Command.</span>').appendTo($el);\n      d.resolve();\n      $el.show();\n    });\n    return d;\n  }\n  return;\n}\n\n\n\n// TODO BW : assay specific pull data, show form builder\nfunction updateIntrospect(object,assay) {\n  var d = $.Deferred();\n  var $el = object.$el;\n  if (object.updated.introspect[assay]) {\n    d.resolve();\n    return d;\n  }\n  object.updated.introspect[assay] = true;\n  var heatmapRows = [];\n  var heatmapColumns = [];\n  var cellLines = [];\n  var colorScheme = null;\n  var defaultLine = 'Summary';\n  if (assay === 'L1000') {\n    heatmapRows = [\n      {\n        field: 'type',\n        display: 'color'\n      }, {\n        field: 'name',\n        display: 'text'\n      }, {\n        field: 'search term',\n        display: 'text'\n      }];\n    heatmapColumns = [\n      {\n        field: 'name',\n        display: 'text'\n      }, {\n        field: 'type',\n        display: 'color'\n      }];\n    cellLines = clue.CORE_CELL_LINES;\n    colorScheme = clue.createGutcColorScheme();\n  }\n  else {\n    heatmapRows = [\n      {\n        field: 'name',\n        display: 'text'\n      }, {\n        field: 'search term',\n        display: 'text'\n      }];\n    heatmapColumns = [\n      {\n        field: 'name',\n        display: 'text'\n      }];\n    cellLines = clue.PROTEOMICS_CELL_LINES;\n    colorScheme = clue.ICV.ProteomicsColorScheme;\n  }\n\n\n  var options = {ids: object.ids};\n  var $el = object.$el;\n  var cellLineToInfo = object.cellLineToInfo[assay];\n  var $introspect = object.$el.find('[data-type=tab][data-assay='+assay+'][data-interpretation=introspect]');\n  var showSearchTerms = object.showSearchTerms;\n\n  var maxHeight = 0;\n  var maxWidth = 0;\n\n  var html = [];\n  html.push('<div style=\"display: flex;flex-direction: row;\">');\n  html.push('<div style=\"margin-right:10px;\">');\n  html.push('<div style=\"border:thin' +\n    ' solid #E5E6E7; min-width:300px;min-height:200px;\"><div style=\"text-align:' +\n    ' center;\">Interconnectedness Summary</div><div' +\n    ' data-name=\"quartiles\"></div></div>');\n  html.push('<div data-cell=\"Summary\" style=\"border:thin' +\n    ' solid #E5E6E7; min-width:300px;min-height:300px;display:' +\n    ' inline-block;\"><div style=\"margin-bottom:-20px;text-align:' +\n    ' center;\">Summary</div></div>');\n  html.push('</div>');\n  var cellText = '';\n  html.push('<div style=\"display: flex;flex-direction: row;flex-wrap:wrap;\">');\n  cellLines.forEach(function (cell) {\n    cellText = cell + ' (' + clue.CORE_CELL_LINES_LINEAGE[cell] + ')';\n    html.push('<div data-cell=\"' + cell + '\" style=\"border:thin' +\n      ' solid #E5E6E7; min-width:300px;min-height:300px;display:' +\n      ' inline-block;\"><div style=\"margin-bottom:-20px;text-align: center;\">' + cellText + '</div></div>');\n\n  });\n  html.push('</div>');\n  html.push('</div>');\n  $(html.join('')).appendTo($introspect);\n  var introspectRemoved = false;\n\n  var promises = [];\n  var connData = __webpack_require__(/*! Shared/connData.js */ \"./public/js/local/command/dist/shared/connData.js\");\n  connData.filterIds(object.ids,assay).done(function(ids) {\n    if(ids.length>1) {\n      ['Summary'].concat(cellLines).forEach(function (cell) {\n        var $el = $introspect.find('[data-cell=' + cell + ']');\n        ids = ids.sort();\n        var introspectData = __webpack_require__(/*! Shared/introspectData.js */ \"./public/js/local/command/dist/shared/introspectData.js\");\n        var p = introspectData.get({\n          rowIds: ids,\n          columnIds: ids,\n          cellLine: cell,\n          symmetric: true,\n          order: true,\n          assay: assay\n        });\n        var def = $.Deferred();\n        promises.push(def);\n        p.fail(function () {\n          $el.remove();\n          if (cell === defaultLine) {\n            introspectRemoved = true;\n          }\n          //$el.html('Unable to load');\n        });\n        p.done(function (ds) {\n          if (ds.getColumnCount() === 1) {\n            if (cell === defaultLine) {\n              introspectRemoved = true;\n            }\n            $el.append('<div style=\"text-align: center; position: relative; top: 40%\">Insufficient data to show heatmap</div>');\n            return;\n          }\n          var introspectDataset = ds;\n          const opts = {};\n          if (assay === 'L1000') {\n\n\n              opts.dataset = introspectDataset;\n              opts.fileColumnNamesToInclude = null;\n              opts.lines = clue.ICV.L1000_ANNOTATION_LINES_COLUMNS;\n              opts.isColumns = true;\n              opts.sets = null;\n              opts.metadataName = 'id';\n              opts.fileColumnName = 'pert_id';\n              new morpheus.OpenFileTool().annotate(opts);\n\n              opts.lines = clue.ICV.L1000_ANNOTATION_LINES_ROWS;\n              opts.isColumns = false;\n              new morpheus.OpenFileTool().annotate(opts);\n          }\n          else {\n              opts.dataset = introspectDataset;\n              opts.fileColumnNamesToInclude = null;\n              opts.lines = clue.ICV.PROT_ANNOTATION_LINES_COLUMNS;\n              opts.isColumns = true;\n              opts.sets = null;\n              opts.metadataName = 'id';\n              opts.fileColumnName = 'pert_id';\n              new morpheus.OpenFileTool().annotate(opts);\n\n              opts.lines = clue.ICV.PROT_ANNOTATION_LINES_ROWS;\n              opts.isColumns = false;\n              new morpheus.OpenFileTool().annotate(opts);\n\n            introspectDataset.getColumnMetadata().getByName('pert_iname').setName('name');\n            introspectDataset.getRowMetadata().getByName('pert_iname').setName('name');\n          }\n          var hcl = new morpheus.HCluster(\n            morpheus.HCluster.computeDistanceMatrix(introspectDataset, morpheus.Pearson), morpheus.AverageLinkage);\n          introspectDataset = new morpheus.SlicedDatasetView(introspectDataset,\n            hcl.reorderedIndices, hcl.reorderedIndices);\n          var scrollTop = document.body.scrollTop;\n          if (showSearchTerms) {\n            var pertIdVector = introspectDataset.getRowMetadata().getByName('id');\n            var searchTermVector = introspectDataset.getRowMetadata().add('search term');\n            for (var j = 0; j < pertIdVector.size(); j++) {\n              // todo bw: rid/cid info is still weird for CCSBBROAD id's\n              searchTermVector.setValue(j, object.idToSearchTerms.get(pertIdVector.getValue(j).toUpperCase()));\n            }\n          }\n          var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n          var heatMap = new morpheus.HeatMap({\n            width: -1,\n            height: -1,\n            el: $el,\n            rows: heatmapRows,\n            columns: heatmapColumns,\n            symmetric: false,\n            toolbar: utils.quickMorpheusToolbar({\n              saveImage: false\n            }),\n            menu: false,\n            dataset: introspectDataset,\n            colorScheme: colorScheme,\n            autohideTabBar: true\n          });\n          if (cell !== 'Summary') {\n            object.maxWidth = Math.max(maxWidth, Math.ceil($el.width()));\n            object.maxHeight = Math.max(maxHeight, Math.ceil($el.height()));\n          }\n          if (introspectDataset != null) {\n            cellLineToInfo.set(cell, {\n              $el: $el,\n              heatMap: heatMap,\n              dataset: introspectDataset\n            });\n          }\n        });\n        p.always(function () {\n          def.resolve();\n        });\n      });\n    }\n    else {\n      introspectRemoved=true;\n      var p = $.Deferred();\n      promises.push(p);\n      p.resolve();\n    }\n    $.when.apply($, promises).done(function () {\n      if (introspectRemoved) {\n        $introspect.html('Could not find sufficient ' + assay + ' connectivity data matching your search terms to display internal connectivities.');\n        d.resolve();\n      }\n      else {\n        var q25 = [];\n        var q50 = [];\n        var q75 = [];\n        var boxCellLines = [];\n        var showQuantiles = false;\n        if (cellLineToInfo.has('Summary')) {\n          showQuantiles = cellLineToInfo.get('Summary').dataset.getRowCount() > 2;\n        }\n        ['Summary'].concat(cellLines).forEach(function (cell) {\n          if (cellLineToInfo.has(cell)) {\n            var ds = cellLineToInfo.get(cell).dataset;\n            if (ds != null) {\n              var medians = [];\n              for (var i = 0; i < ds.getRowCount(); i++) {\n                var values = [];\n                for (var j = 0; j < ds.getColumnCount(); j++) {\n                  var value = ds.getValue(i, j);\n                  if (!isNaN(value)) {\n                    values.push(value);\n                  }\n                }\n                medians.push(morpheus.ArrayPercentile(values, 50, false));\n              }\n              // median of medians\n              var boxItem = new morpheus.BoxPlotItem(morpheus.VectorUtil.arrayAsVector(medians));\n              q50.push(boxItem.median);\n              if (showQuantiles) {\n                q25.push(boxItem.q1);\n                q75.push(boxItem.q3);\n              } else {\n                q25.push(boxItem.median);\n                q75.push(boxItem.median);\n              }\n              boxCellLines.push(cell);\n            }\n          }\n        });\n        var scrollTop = document.body.scrollTop;\n        var $quartiles = $introspect.find('[data-name=quartiles]');\n\n        createLineBoxPlot({\n          q25: showQuantiles ? q25 : null,\n          q50: q50,\n          q75: showQuantiles ? q75 : null,\n          xaxisLabels: boxCellLines,\n          el: $quartiles[0],\n          yaxisTitle: 'Connectivity Score',\n          assay: assay\n        });\n        $introspect.find('[data-cell]').each(function () {\n          $(this).css({\n            width: object.maxWidth,\n            height: object.maxHeight,\n            'min-width': '',\n            'min-height': ''\n          });\n        });\n        // cellLineToInfo.forEach(function (heatMap, cellLine) {\n        //   if (heatMap) {\n        //     heatMap.getHeatMapElementComponent().getRowPositions().setSize(1);\n        //     heatMap.getHeatMapElementComponent().getColumnPositions().setSize(1);\n        //     heatMap.revalidate();\n        //   }\n        // });\n\n        // $quartiles.parent().css({\n        //   width: maxWidth,\n        //   height: maxHeight\n        // });\n        document.body.scrollTop = scrollTop;\n        // introspectFormBuilder.setValue('file_name', name);\n        setupIntrospectFormBuilder(object, cellLines, assay);\n        d.resolve();\n      }\n    })\n      .fail(function () {\n        if (introspectRemoved) {\n          $introspect.html('Could not find sufficient ' + assay + ' connectivity data matching your search terms to display internal connectivities.');\n          d.resolve();\n        }\n      });\n  })\n    .fail(function () {\n      $introspect.html('Could not find matching data for your search terms ' + assay + ' to display internal connectivities.');\n      d.resolve();\n    });\n  return d;\n}\n\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/conn.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/gene-mod.js":
/*!**********************************************************!*\
  !*** ./public/js/local/command/dist/actions/gene-mod.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.show = function(options) {\n    exports.changeTabHeader(options.object);\n    var d = $.Deferred();\n    var zs = __webpack_require__(/*! Shared/zs.js */ \"./public/js/local/command/dist/shared/zs.js\");\n    zs.getZScoreDataset(null, options.ids.map(function (item) {\n        return item.entrez_id;\n    })).fail(function () {\n        d.reject();\n    }).done(function (dataset) {\n        var html = [];\n        html.push('<div class=\"col-xs-12\">');\n        html.push('</div>');\n        var $el = $(html.join(''));\n        $el.appendTo(options.$el);\n        d.resolve();\n        var items = [];\n        for (var j = 0; j < dataset.getColumnCount(); j++) {\n            items.push({\n                j: j\n            });\n        }\n        var pertNameVector = dataset.getColumnMetadata().getByName('pert_iname');\n        var cellVector = dataset.getColumnMetadata().getByName('cell_id');\n        var typeVector = dataset.getColumnMetadata().getByName('pert_type');\n        var pertIdVector = dataset.getColumnMetadata().getByName('pert_id');\n        var doseVector = dataset.getColumnMetadata().getByName('pert_idose');\n        var ccVector = dataset.getColumnMetadata().getByName('distil_cc_q75');\n        var ssVector = dataset.getColumnMetadata().getByName('distil_ss');\n        var geneVector = dataset.getRowMetadata().getByName('pr_gene_symbol');\n        var columns = [];\n        morpheus.Util.seq(dataset.getRowCount()).forEach(function (i) {\n            columns.push({\n                name: geneVector.getValue(i),\n                getter: function (item) {\n                    return dataset.getValue(i, item.j);\n                }\n            });\n        });\n\n        columns = columns.concat([\n            {\n                field: 'pert_iname',\n                name: 'Name',\n                getter: function (item) {\n                    return pertNameVector.getValue(item.j);\n                }\n            }, {\n                field: 'cell_id',\n                name: 'Cell',\n                getter: function (item) {\n                    return cellVector.getValue(item.j);\n                }\n            }, {\n                field: 'pert_type',\n                name: 'Type',\n                getter: function (item) {\n                    return typeVector.getValue(item.j);\n                },\n                renderer: function (item, value) {\n                    if (value === 'trt_cp') {\n                        return '<i class=\"text-center glyphicon glyphicon-adjust touchstone-cp\"></i>';\n                    } else if (value === 'trt_sh.cgs') {\n                        return '<i class=\"text-center glyphicon glyphicon-minus-sign touchstone-kd\"></i>';\n                    } else if (value === 'trt_oe') {\n                        return '<i class=\"text-center glyphicon glyphicon-plus-sign touchstone-oe\"></i>';\n                    } else {\n                        return value;\n                    }\n                }\n            }, {\n                field: 'pert_id',\n                name: 'Perturbagen Id',\n                getter: function (item) {\n                    return pertIdVector.getValue(item.j);\n                }\n            }, {\n                field: 'pert_idose',\n                name: 'Dose',\n                getter: function (item) {\n                    return doseVector.getValue(item.j);\n                }\n            }, {\n                field: 'distil_cc_q75',\n                name: 'Replicate Correlation',\n                getter: function (item) {\n                    return ccVector.getValue(item.j);\n                }\n            }, {\n                field: 'distil_ss',\n                name: 'Signature Strength',\n                getter: function (item) {\n                    return ssVector.getValue(item.j);\n                }\n            }]);\n        var table = new tablelegs.Table({\n            height: '412px',\n            columnPicker: true,\n            tableClass: 'slick-table slick-bordered-table slick-hover-table',\n            select: false,\n            search: true,\n            export: true,\n            $el: $el,\n            columns: columns,\n            items: items\n        });\n    });\n    return d;\n};\n\nexports.changeTabHeader = function(tabObject) {\n    $('#headerButtonRow').hide();\n    $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/gene-mod.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/gene-space.js":
/*!************************************************************!*\
  !*** ./public/js/local/command/dist/actions/gene-space.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function executeExport(table,$el) {\n  $el.find('.export-warning').html('');\n  var inputType = $el.find('input[name=\"exportType\"]:checked').val();\n  var fileName = $el.find('.export-filename-prompt').val();\n  fileName = fileName ? fileName : 'command_output';\n\n  if(!inputType) {\n    $el.find('.export-warning').html('No option selected');\n  }\n  else {\n    if (!morpheus.Util.endsWith(fileName.toLowerCase(), '.txt')) {\n      fileName += '.txt';\n    }\n    var blob = new Blob([table.toText()], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, fileName, true);\n    $el.find('.export-modal').modal('hide');\n  }\n}\nfunction setupExportOptions(object) {\n  var $el = object.$el;\n  $el.find('.command-out-links').show();\n  var $exportOptions = $el.find('.export-options');\n  var exportOptionsHtml = '<input type=\"radio\" name=\"exportType\" value=\"0\" class=\"export-radio\">' +\n    'Export the data as a tab-delimited text file</input><br>';\n  $exportOptions.html(exportOptionsHtml);\n  $el.find('.export-btn-confirm').on('click',{table:object.table, $el: object.$el},function(e) {\n    executeExport(object.table, $el);\n  });\n  $el.find('.export-btn-cancel').on('click',{object:object},function(e) {\n    e.data.object.$el.find('.export-modal').modal('hide');\n  });\n  $el.find('.export-btn').on('click',{$el:object.$el},function(e) {\n    e.data.$el.find('.export-warning').html('');\n    e.data.$el.find('.export-pending').html('');\n  });\n}\n\nfunction setupHeader(object) {\n    setupExportOptions(object);\n}\n\nexports.show = function(options) {\n    var ids = options.ids;\n    var idToSearchTerms = options.idToSearchTerms;\n    var $el = options.$el;\n    var d = $.Deferred();\n    // split into batches of 5000\n    var results = [];\n    var promises = [];\n    if (ids.length === 0) {\n        promises.push($.ajax(clue.API_URL + '/api/genes/?filter=' + JSON.stringify({\n                fields: [\n                    'entrez_id',\n                    'gene_symbol',\n                    'gene_name',\n                    'gene_family',\n                    'l1000_type',\n                    'rna_seq_corr',\n                    'rna_seq_corr_fraction_self_rank']\n            })).done(function (geneResults) {\n            results = geneResults;\n        }));\n    } else {\n        var start = 0;\n        var batchSize = 5000;\n        var end = batchSize;\n        while (start < ids.length) {\n            promises.push($.ajax(clue.API_URL + '/api/genes/?filter=' + JSON.stringify({\n                    fields: [\n                        'entrez_id',\n                        'gene_symbol',\n                        'gene_name',\n                        'gene_family',\n                        'l1000_type',\n                        'rna_seq_corr',\n                        'rna_seq_corr_fraction_self_rank'], where: {\n                        entrez_id: {inq: ids.slice(start, Math.min(end, ids.length))}\n                    }\n                })).done(function (geneResults) {\n                results = results.concat(geneResults);\n            }));\n            start = end;\n            end += batchSize;\n        }\n\n    }\n    $.when.apply($, promises).fail(function () {\n        d.reject();\n    }).done(function () {\n\n        var $chart = $('<div class=\"col-xs-12\"></div>');\n        var $table = $('<div class=\"col-xs-12\"></div>');\n        $chart.appendTo(options.$el);\n        $table.appendTo(options.$el);\n        var columns = [\n            {\n                field: 'entrez_id',\n                name: 'Entrez ID'\n            }, {\n                field: 'gene_symbol',\n                name: 'Symbol'\n            }, {\n                field: 'gene_name',\n                name: 'Name'\n            }, {\n                field: 'gene_family',\n                name: 'Gene Family'\n            }, {\n                name: 'Type',\n                field: 'l1000_type'\n            }];\n        var xValue = ['landmark', 'best inferred', 'inferred', 'not inferred'];\n        var typeToCount = new morpheus.Map();\n        xValue.forEach(function (key) {\n            typeToCount.set(key, 0);\n        });\n        var yValue = [];\n        for (var i = 0, length = results.length; i < length; i++) {\n            var item = results[i];\n            typeToCount.set(item.l1000_type, typeToCount.get(item.l1000_type) + 1);\n        }\n        if (typeToCount.get('landmark') > 0 || typeToCount.get('best inferred') > 0 ||\n            typeToCount.get('inferred') > 0) {\n            columns = columns.concat([\n                {\n                    name: 'RNA-Seq Correlation',\n                    field: 'rna_seq_corr'\n                }, {\n                    name: 'RNA-Seq Correlation Self-Rank',\n                    field: 'rna_seq_corr_fraction_self_rank'\n                }]);\n        }\n        xValue.forEach(function (key) {\n            yValue.push(typeToCount.get(key));\n        });\n        var total = 0;\n        yValue.forEach(function (val) {\n            total += val;\n        });\n        var x = ['Landmark (lm)', 'Best inferred (bing)', 'Inferred (aig)', 'Not inferred (ni)'];\n        var trace = {\n            x: x,\n            y: yValue,\n            type: 'bar'\n            // text: yValue.map(function (val) {\n            //   return 100 * morpheus.Util.nf(val / total) + '%';\n            // })\n        };\n\n        var annotationContent = [];\n        var plotly = clue.getPlotlyDefaults2();\n        plotly.layout.xaxis.showgrid = false;\n        plotly.layout.xaxis.showline = false;\n\n        plotly.layout.annotations = annotationContent;\n        plotly.layout.width = 500;\n        plotly.layout.height = 130;\n        plotly.layout.yaxis.showgrid = false;\n        plotly.layout.yaxis.zeroline = false;\n        plotly.layout.yaxis.showline = false;\n        plotly.layout.yaxis.autotick = true;\n        plotly.layout.yaxis.ticks = '';\n        plotly.layout.yaxis.showticklabels = false;\n        for (var i = 0; i < xValue.length; i++) {\n            var result = {\n                x: x[i],\n                y: yValue[i],\n                text: morpheus.Util.intFormat(yValue[i]),\n                xanchor: 'center',\n                yanchor: 'bottom',\n                showarrow: false\n            };\n            annotationContent.push(result);\n        }\n\n        plotly.layout.margin.t = 4;\n        plotly.config.displayModeBar = false;\n        d.resolve();\n        Plotly.newPlot($chart[0], [trace], plotly.layout, plotly.config);\n        options.object.table = new tablelegs.Table({\n            height: '412px',\n            columnPicker: false,\n            tableClass: 'slick-table slick-bordered-table slick-hover-table',\n            select: true,\n            search: true,\n            export: false,\n            exportFileName: options.object.truncatedCommand + '.txt',\n            $el: $table,\n            columns: columns,\n            items: results\n        });\n        setupHeader(options.object);\n    });\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/gene-space.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/gex.js":
/*!*****************************************************!*\
  !*** ./public/js/local/command/dist/actions/gex.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var colorMap;\nvar nf = d3.format('.1f');\n\n// not currently working on dev.clue.io\nexports.show = function (options) {\n    options.dataset = {\n      label: 'L1000 normalized',\n      zscore: 'Primary Site',\n      columnAnnotations: [\n        { // map cell_id to ccle_id\n          file: 'https://s3.amazonaws.com/data.clue.io/cell/cell-mapping.tsv',\n          datasetField: 'cell_id',\n          fileField: 'cell_id'\n        }, {\n          file: 'https://s3.amazonaws.com/data.clue.io/cell/cell_app.tsv',\n          datasetField: 'ccle_id',\n          fileField: 'CCLE Name'\n        }],\n      featureField: 'pr_gene_symbol',\n      datasetReady: function (ds) {\n        clue.Gex.fixCcleDataset(ds);\n      },\n      dataset: morpheus.DatasetUtil.read(clue.API_URL +\n        '/data-api/slice/?name=clinedb_QNORM&cfield=cell_id&cfield=id&cfield=cell_lineage&rfield=pr_gene_symbol&rquery=id:(' +\n        options.ids.join(' ') + ')')\n    };\n    return clue.Gex(options);\n  };\nclue.Gex = function (options) {\n    var $el = options.$el;\n    var d = $.Deferred();\n    var promises = [];\n    var datasetFunctionsToInvoke = [];\n\n    if (options.dataset.columnAnnotations && options.dataset.columnAnnotations.length > 0) {\n      var columnDef = morpheus.DatasetUtil.annotate({\n        annotations: options.dataset.columnAnnotations,\n        isColumns: true\n      });\n      columnDef.then(function (callbacks) {\n        datasetFunctionsToInvoke.push(callbacks);\n      });\n      promises.push(columnDef);\n    }\n    promises.push(options.dataset.dataset);\n    options.dataset.dataset.then(function (result) {\n      options.dataset.dataset = result;\n    });\n    const pp = Promise.all(promises)\n    pp.catch(function () {\n      d.reject();\n    }).then(function () {\n      var dataset = options.dataset.dataset;\n      for (var i = 0; i < datasetFunctionsToInvoke.length; i++) {\n        var functions = datasetFunctionsToInvoke[i];\n        if (functions) {\n          functions.forEach(function (f) {\n            f(dataset);\n          });\n        }\n        if (options.dataset.datasetReady) {\n          options.dataset.datasetReady(dataset);\n        }\n        // sort by featureField\n        var featureVector = dataset.getRowMetadata().getByName(options.dataset.featureField);\n        var rowOrder = morpheus.Util.indexSort(morpheus.VectorUtil.toArray(featureVector), true);\n        options.dataset.dataset = new morpheus.SlicedDatasetView(dataset, rowOrder, null);\n      }\n\n      var genes = morpheus.VectorUtil.getValues(options.dataset.dataset.getRowMetadata().getByName(options.dataset.featureField));\n      colorMap = morpheus.VectorColorModel.TABLEAU10; //morpheus.VectorColorModel.getColorMapForNumber(options.datasets[0].dataset.getRowCount());\n      var charts = [];\n      var view = {};\n      var datasetInfo = clue.Gex.createDatasets(dataset, options.dataset.zscore);\n      datasetInfo.done(function (dataset) {\n        view.dataset = dataset;\n        view.genes = genes;\n        var object = options.object;\n        object.$el = options.$el;\n        object.view = view;\n        object.dataset = dataset;\n        charts.push(view);\n        var $row = $('<div class=\"row\"><div class=\"col-xs-4\"><div data-section=\"cellLineSelector\" /><div data-section=\"helpText\" /></div><div class=\"col-xs-8\" data-section=\"chart\" /></div>');\n        $el.append($row);\n        var $row2 = $('<div class=\"row\"><div class=\"col-xs-4\"></div><div id=\"gTable\" class=\"col-xs-8\" data-section=\"gTable\"></div></div>');\n        $el.append($row2);\n        var $chart = $el.find('[data-section=\"chart\"]');\n        view.el = $chart[0];\n\n        const $table =  $el.find('[data-section=\"gTable\"]');\n\n        // $chart.css('display', 'inline-block');\n\n        function setUpInterface(object) {\n          var genes = object.view.genes;\n          var $el = object.$el;\n          object.displayFormBuilder = new morpheus.FormBuilder({formStyle: 'inline'});\n          // three column table\n          // first column: cell lines\n          // radio buttons, hides/shows different checkbox columns\n\n          // second column: sort/group\n          // dropdown for groupby\n          var groupByOptions = ['None', 'Lineage'];\n          for (var i = 0; i < genes.length; i++) {\n            groupByOptions.push(genes[i] + ': Mutational status');\n            groupByOptions.push(genes[i] + ': Copy number');\n          }\n          object.displayFormBuilder.append({\n            name: 'group_points_by',\n            type: 'bootstrap-select',\n            options: groupByOptions,\n            value: groupByOptions[0]\n          });\n          // sortby (if no groupby)\n          var sortOptions = [];\n          for (var i = 0; i < genes.length; i++) {\n            sortOptions.push(genes[i] + ': High to Low');\n            sortOptions.push(genes[i] + ': Low to High');\n          }\n          sortOptions.push('Id: A to Z');\n          sortOptions.push('Id: Z to A');\n          var dataOptions = Object.keys(clue.Gex.DATA_NAMES);\n          object.displayFormBuilder.append({\n            name: 'data_format',\n            type: 'bootstrap-select',\n            options: dataOptions,\n            value: dataOptions[0]\n          });\n          // optional show gene (if groupby is not none and >1 gene)\n          if(genes.length>1) {\n            var geneOptions = genes;\n            object.displayFormBuilder.append({\n              name: 'gene_shown',\n              type: 'bootstrap-select',\n              options: geneOptions,\n              value: geneOptions[0]\n            });\n          }\n          else {\n            view.geneShown = genes[0];\n          }\n          object.displayFormBuilder.append({\n            name: 'sort_by',\n            type: 'bootstrap-select',\n            options: sortOptions,\n            value: sortOptions[0] // high to low of first gene as default\n          });\n          object.sortOptionsBuilt = sortOptions;\n          object.sortOptionsDefault = ['Default','Median: High to Low','Median: Low to High'];\n        };\n        function renderCellLineSelector(object) {\n          var view = object.view;\n          var dataset = view.dataset;\n          var $el = object.$el;\n          object.$el.find('[data-section=\"cellLineSelector\"]').append('<label>Select cell lines:</label><br>' +\n            '<input type=\"radio\" name=\"cellLines\" value=\"core\"> Core Lines<br>' +\n            '<input type=\"radio\" name=\"cellLines\" value=\"byId\" checked> By ID<br>' +\n            '<input type=\"radio\" name=\"cellLines\" value=\"byLineage\"> By lineage' +\n            '<div class=\"pad-top-8\" data-section=\"byIdCheckbox\"></div><div class=\"pad-top-8\" data-section=\"byLineageCheckbox\"></div>');\n          object.$el.find('[data-section=\"cellLineSelector\"]').on('change', {object:object}, function(e) {\n            updateSelectedLines(e.data.object);\n            updateSelectedTable(e.data.object);\n            updateCharts(e.data.object.view);\n          });\n          view.idColumn = tablelegs.Table.createCheckBoxColumn({\n            field: 'value',\n            name: 'value',\n            cssClass: '',\n            resizable: true,\n            exportLink: false,\n            searchable: true,\n            renderer: function (item, value) {\n              return '<label><input data-tablelegs-toggle=\"true\" type=\"checkbox\" '\n                + (this.set.has(value) ? ' checked' : '') + '/>' + ' ' + value + '</label>';\n            }\n          });\n          view.idColumn.width = undefined;\n          view.idColumn.maxWidth = undefined;\n          view.idColumn.minWidth = undefined;\n          var cellLineSelector = new tablelegs.Table({\n            $el: $el.find('[data-section=\"byIdCheckbox\"]'),\n            columnPicker: false,\n            tableClass: 'filter-group',\n            showAll: false,\n            height: '275px',\n            showHeader: false,\n            export: false,\n            search: true,\n            select: false,\n            autocomplete: false,\n            columns: [view.idColumn],\n            items: _.map(dataset, function (obj) {\n              return {value: obj.name}\n            })\n          });\n          Object.keys(dataset).forEach(function (name) {\n            view.idColumn.set.add(name);\n          });\n          var lineageCount = _.countBy(_.sortBy(dataset,'lineage'),'lineage');\n          view.lineageColumn = tablelegs.Table.createCheckBoxColumn({\n            field: 'value',\n            name: 'value',\n            cssClass: '',\n            resizable: true,\n            exportLink: false,\n            searchable: true,\n            renderer: function (item, value) {\n              return '<label><input data-tablelegs-toggle=\"true\" type=\"checkbox\" '\n                + (this.set.has(value) ? ' checked' : '') + '/>' + ' ' + item.text + '</label>';\n            }\n          });\n          view.lineageColumn.width = undefined;\n          view.lineageColumn.maxWidth = undefined;\n          view.lineageColumn.minWidth = undefined;\n          var cellLineSelector2 = new tablelegs.Table({\n            $el: $el.find('[data-section=\"byLineageCheckbox\"]'),\n            columnPicker: false,\n            tableClass: 'filter-group',\n            showAll: false,\n            height: '275px',\n            showHeader: false,\n            export: false,\n            search: false,\n            select: false,\n            autocomplete: false,\n            columns: [view.lineageColumn],\n            items: _.map(lineageCount, function (count, key) {\n              return {value: key,\n                text: (key + ' (' + count + ')')}\n            })\n          });\n          cellLineSelector.redraw();\n          $el.find('[data-section=\"byIdCheckbox\"] .slick-viewport').css('height','265px');\n          cellLineSelector.trigger('checkBoxSelectionChanged');\n          createCheckboxListener(cellLineSelector,object);\n          cellLineSelector2.redraw();\n          $el.find('[data-section=\"byLineageCheckbox\"] .slick-viewport').css('height','265px');\n          createCheckboxListener(cellLineSelector2,object);\n        }\n        function renderHelpText($el) {\n          $el.append('<br><a class=\"pad-top-12\" href=\"https://portals.broadinstitute.org/ccle/page?gene=' +\n            genes[0] + '\" target=\"_blank\">View in CCLE Portal</a><br><br>');\n          $el.append('<span data-container=\"body\" data-toggle=\"popover\" data-trigger=\"click focus\" ' +\n            \"data-popover-config='\" + '[{\"target_self\":\"true\",\"content_id\":\"tt_command_gex_data_format\",\"placement\":\"top\"}]' + \"'\" +\n            ' data-tooltip-class=\"\" style=\"color: #005D99;\" id=\"i_command_gex_data_format\" ' +\n            'class=\"dashed-hover-underline tooltip_trigger\">About data format</span><br>');\n          $el.append('<span data-container=\"body\" data-toggle=\"popover\" data-trigger=\"click focus\" ' +\n            \"data-popover-config='\" + '[{\"target_self\":\"true\",\"content_id\":\"tt_command_gex_copy_number\",\"placement\":\"top\"}]' + \"'\" +\n            ' data-tooltip-class=\"\" style=\"color: #005D99;\" id=\"i_command_gex_copy_number\" ' +\n            'class=\"dashed-hover-underline tooltip_trigger\">About copy number</span><br>');\n          $el.append('<span data-container=\"body\" data-toggle=\"popover\" data-trigger=\"click focus\" ' +\n            \"data-popover-config='\" + '[{\"target_self\":\"true\",\"content_id\":\"tt_command_gex_version\",\"placement\":\"top\"}]' + \"'\" +\n            ' data-tooltip-class=\"\" style=\"color: #005D99;\" id=\"i_command_gex_version\" ' +\n            'class=\"dashed-hover-underline tooltip_trigger\">Data source/version</span><br>');\n        }\n\n\n        setUpInterface(object);\n        renderCellLineSelector(object);\n        renderHelpText(object.$el.find('[data-section=\"helpText\"]'));\n\n\n        // checkbox columns, require dataset\n\n        // first view is line chart by default\n        updateDataType(object);\n        updateGeneShown(object);\n        updateGroupBy(object);\n        updateSortBy(object);\n        updateSelectedLines(object);\n        updateSelectedTable(object);\n        clue.Gex.createLineChart(view);\n        setupHeader(options.object);\n        d.resolve();\n\n      });\n    });\n    return d;\n  };\n\nclue.Gex.DATA_TYPES = {\n  Z_SCORE: 'Z-Scores',\n  Z_SCORE_WITHIN: 'Z-Scores Within Primary Site',\n  QNORM: 'Normalized'\n};\nclue.Gex.DATA_NAMES = {\n  'Z-Scores': 'Z_SCORE',\n  'Z-Scores Within Primary Site': 'Z_SCORE_WITHIN',\n  'Normalized': 'QNORM'\n};\nclue.Gex.DATA_LABELS = {\n  'Z-Scores': 'z-score',\n  'Z-Scores Within Primary Site': 'z-score within primary site',\n  'Normalized': 'normalized'\n};\nfunction calculateMedianOrder(dataset,groupByField,sortField) {\n  // median of [3, 5, 4, 4, 1, 1, 2, 3] = 3\n  var medianDataset = _.groupBy(dataset,groupByField);\n  medianDataset = _.map(medianDataset, function(arr,key) {\n    var numbers = arr.map(function(obj) {\n      return obj[sortField];\n    });\n    numbers = numbers.sort(function(a, b){return a - b});\n    var median = null;\n    var numsLen = numbers.length;\n    if (numsLen % 2 === 0 ) {\n      // average of two middle numbers\n      median = (numbers[numsLen / 2 - 1] + numbers[numsLen / 2]) / 2;\n    } else { // is odd\n      // middle number only\n      median = numbers[(numsLen - 1) / 2];\n    }\n    return {\"name\": key, \"median\": median};\n  });\n  return _.pluck(_.sortBy(medianDataset,\"median\"),\"name\");\n}\nclue.Gex.createGroupedBoxPlot = function (view) {\n    var selectedLines = view.selectedLines;\n    var allDatasets = _.filter(view.dataset, function (obj) {\n      return _.contains(selectedLines, obj.name);\n    });\n\n    // other option, if groupBy is empty\n    var xVals = null;\n    var xLabel = '';\n    var xField = '';\n    if(view.groupBy.pluckField) {\n      allDatasets = _.sortBy(allDatasets, view.groupBy.pluckField);\n      xLabel = view.groupBy.pluckField;\n      xField = view.groupBy.pluckField;\n    }\n    else {\n      xField = view.groupBy.gene + '_' + view.groupBy.field;\n    }\n    xVals = _.pluck(allDatasets, xField);\n    var yField = view.geneShown + '_exp_' + clue.Gex.DATA_NAMES[view.dataType];\n    var yVals = _.pluck(allDatasets, yField);\n    var keys = _.pluck(allDatasets, 'name');\n    var layout = {\n      width: window.innerWidth*.66-50,\n      margin: {\n        b : 200\n      },\n      hovermode: 'closest',\n      title: '',\n      xaxis: {\n        zeroline: false, hoverformat: '.2f', title: xLabel\n      },\n      yaxis: {\n        zeroline: false, hoverformat: '.1f', title: (view.geneShown +\n        ' by ' + clue.Gex.DATA_LABELS[view.dataType])\n      },\n      boxmode: 'group'\n    };\n    var allBins = null;\n    if(view.groupBy.field === 'CN_bin') {\n      layout.xaxis.title = view.groupBy.gene + ' by copy number';\n      allBins = ['Deletion', 'Loss', 'No change', 'Gain', 'Amplification', 'No data'];\n      layout.xaxis.categoryorder = \"array\";\n      // layout.xaxis.categoryarray = _.intersection(allBins,yVals);\n    }\n    else if(view.groupBy.field === 'Mut_status') {\n      layout.xaxis.title = view.groupBy.gene + ' mutational status';\n      allBins = ['Silent', 'Missense_Mutation', 'Nonsense_Mutation',\n        'Frame_Shift_Ins', 'Frame_Shift_Del', 'In_Frame_Ins', 'In_Frame_Del', 'Splice_Site', 'No annotation'];\n      layout.xaxis.categoryorder = \"array\";\n      // layout.xaxis.categoryarray = _.intersection(allBins,yVals);\n    }\n    if(view.sortBy === 'median') {\n      var sortedBins = calculateMedianOrder(allDatasets,xField,yField);\n      if(view.sortByReverse) { sortedBins = sortedBins.reverse(); }\n      if(allBins) {\n        for(var i=0; i<allBins.length; i++) {\n          if(!sortedBins.includes(allBins[i])) {\n            sortedBins.push(allBins[i]);\n          }\n        }\n      }\n      layout.xaxis.categoryarray = sortedBins;\n    }\n    else {\n      layout.xaxis.categoryarray = allBins;\n    }\n\n\n    var trace1 = {\n      y: yVals,\n      x: xVals,\n      text: keys,\n      name: view.geneShown,\n      marker: {color: colorMap[0]},\n      type: 'box',\n      boxpoints: 'all',\n      pointpos: 0,\n      jitter: 0.05,\n      hoverinfo: 'x+y+text'\n    };\n    var data = [trace1];\n    Plotly.newPlot(view.el, data, layout);\n  };\nclue.Gex.createLineChart = function (view) {\n  var allDatasets = view.dataset;\n  var selectedLines = view.selectedLines;\n  var allDatasetsFiltered = _.filter(allDatasets, function (obj) {\n    return _.contains(selectedLines, obj.name);\n  });\n  var hoverText = null;\n  var traces = [];\n  var yMax = 0;\n  var yMin = 0;\n  view.genes.forEach(function (gene, i) {\n    hoverText = _.map(allDatasetsFiltered, function(obj) {\n      return obj[(gene + '_exp_' + clue.Gex.DATA_NAMES[view.dataType])].toFixed(5) +\n        ' (' + gene + ' ' + clue.Gex.DATA_NAMES[view.dataType] + ')' +\n        '<br>Copy number: ' + obj[gene+'_CN_bin'] +\n        '<br>Mutation: ' + obj[gene+'_Mut_status'];\n    });\n    var yVals = _.pluck(allDatasetsFiltered, (gene + '_exp_' + clue.Gex.DATA_NAMES[view.dataType]));\n    yMax = _.max(yVals)>yMax ? _.max(yVals) : yMax;\n    yMin = _.min(yVals)<yMin ? _.min(yVals) : yMin;\n    traces.push({\n        x: _.pluck(allDatasetsFiltered, 'name'),\n        y: yVals,\n        mode: 'markers',\n        line: {\n          shape: 'hvh',\n          color: colorMap[i % colorMap.length],\n          width: 4\n        },\n        marker: { size: 8 },\n        name: gene,\n        type: 'scatter',\n        hoverinfo: 'x+text',\n        text: hoverText\n      }\n    );\n  });\n  // times .66 because col-xs-8\n  var proposedWidth = (view.selectedLines.length+2)*60;\n  proposedWidth = (window.innerWidth*.66-100) < proposedWidth ? window.innerWidth*.66-100 : proposedWidth;\n  var layout = {\n    height: 600,\n    width: window.innerWidth*.66-50,\n    margin: {\n      t: 40,\n      l: 50,\n      r: (window.innerWidth*.66-proposedWidth)-50,\n      b: 200\n    },\n    hovermode: 'x',\n    title: '',\n    xaxis: {\n      zeroline: false, hoverformat: '.2f', title: 'Cell Line'\n    },\n    yaxis: {\n      hoverformat: '.2r', title: clue.Gex.DATA_LABELS[view.dataType]\n    }\n  };\n  if(allDatasetsFiltered.length>80) {\n    layout.xaxis.showticklabels = false;\n  }\n  if(view.dataType!=clue.Gex.DATA_TYPES.QNORM) {\n    var yMax = yMax>5 ? yMax+2 : 5;\n    var yMin = yMin<-5 ? yMin+2 : -5;\n    layout.yaxis.range = [yMin,yMax];\n    layout.shapes = [\n      {\n        type: 'rect',\n        xref: 'paper',\n        yref: 'y',\n        x0: 0,\n        y0: 2,\n        x1: 1,\n        y1: yMax,\n        fillcolor: '#dd4444',\n        opacity: 0.2,\n        line: {\n          width: 0\n        }\n      },\n      // 1st highlight during Feb 4 - Feb 6\n      {\n        type: 'rect',\n        xref: 'paper',\n        yref: 'y',\n        x0: 0,\n        y0: -2,\n        x1: 1,\n        y1: yMin,\n        fillcolor: '#4444dd',\n        opacity: 0.2,\n        line: {\n          width: 0\n        }\n      }\n    ]\n  }\n  else {\n    layout.yaxis.rangemode = 'tozero';\n    layout.yaxis.autorange = true;\n  }\n  Plotly.newPlot(view.el, traces, layout);\n};\nclue.Gex.createDatasets = function (dataset, field) {\n    dataset = clue.Gex.fixCcleDataset(dataset);\n    var zscoredDataset = morpheus.DatasetUtil.copy(dataset);\n    var zscoredWithinLineageDataset = morpheus.DatasetUtil.copy(dataset);\n    var lineageToIds = new morpheus.Map();\n\n    var lineageIndicesPairs = [{\n      name: 'other',\n      indices: []\n    }];\n\n    morpheus.VectorUtil.createValueToIndicesMap(dataset.getColumnMetadata().getByName(field)).forEach(function (indices, value) {\n      if (value === 'unknown') {\n        lineageIndicesPairs[0].indices = lineageIndicesPairs[0].indices.concat(indices);\n      } else {\n        lineageIndicesPairs.push({\n          name: '' + value,\n          indices: indices\n        });\n      }\n    });\n\n    if (lineageIndicesPairs[0].indices.length === 0) {\n      lineageIndicesPairs.splice(0, 1);\n    }\n    lineageIndicesPairs.sort(function (p1, p2) {\n      var a = p1.name.toLowerCase();\n      var b = p2.name.toLowerCase();\n      return (a === b ? 0 : (a < b ? -1 : 1));\n    });\n    for (var i = 0, nrows = dataset.getRowCount(); i < nrows; i++) {\n      lineageIndicesPairs.forEach(function (p) {\n        var slice = new morpheus.SlicedDatasetView(dataset, null, p.indices);\n        var zscore = new morpheus.SlicedDatasetView(zscoredWithinLineageDataset, null, p.indices);\n        var view = new morpheus.DatasetRowView(slice);\n        view.setIndex(i);\n        var median = morpheus.Median(view);\n        var mad = morpheus.MAD(view, median);\n        if (mad === 0) {\n          mad = 0.2;\n        }\n        for (var j = 0, ncols = slice.getColumnCount(); j < ncols; j++) {\n          var val = slice.getValue(i, j);\n          val = (val - median) / mad;\n          zscore.setValue(i, j, val);\n        }\n      });\n    }\n    var view = new morpheus.DatasetRowView(dataset);\n    for (var i = 0, nrows = dataset.getRowCount(); i < nrows; i++) {\n      view.setIndex(i);\n      var median = morpheus.Median(view);\n      var mad = morpheus.MAD(view, median);\n      if (mad === 0) {\n        mad = 0.2;\n      }\n      for (var j = 0, ncols = dataset.getColumnCount(); j < ncols; j++) {\n        var val = dataset.getValue(i, j);\n        val = (val - median) / mad;\n        zscoredDataset.setValue(i, j, val);\n      }\n    }\n\n    var f = $.Deferred();\n\n    var expDatasets = {'Z_SCORE': zscoredDataset, 'Z_SCORE_WITHIN': zscoredWithinLineageDataset, 'QNORM': dataset};\n\n    // compile all 3 datasets together\n    var geneSymbolArray = morpheus.VectorUtil.toArray(view.dataset.getRowMetadata().getByName('pr_gene_symbol'));\n    var ccleIdArray = morpheus.VectorUtil.toArray(view.dataset.getColumnMetadata().getByName('ccle_id'));\n    var primarySiteArray = morpheus.VectorUtil.toArray(view.dataset.getColumnMetadata().getByName('Primary Site'));\n    var allDatasets = {};\n    ccleIdArray.forEach(function (cellName, cellIdx) {\n      var dataObj = {};\n      dataObj.name = cellName;\n      dataObj.lineage = primarySiteArray[cellIdx];\n      geneSymbolArray.forEach(function (geneName, geneIdx) {\n        var mutStatus = geneName + '_Mut_status';\n        var mutChange = geneName + '_cDNA_change';\n        var cnNum = geneName + '_CN_num';\n        var cnBin = geneName + '_CN_bin';\n        dataObj[cnNum] = '-';\n        dataObj[cnBin] = 'No data';\n        dataObj[mutChange] = '-';\n        dataObj[mutStatus] = 'No annotation';\n        for (var dataType in expDatasets) {\n          var expName = geneName + '_exp_' + dataType;\n          dataObj[expName] = expDatasets[dataType].getValue(geneIdx, cellIdx);\n        }\n      });\n      allDatasets[cellName] = dataObj;\n    });\n\n\n    // get top-level cell line annotation (site, cancer, etc.)\n    // for each gene, create a datasets object\n    // once all of these dataset objects for a gene are made, fold them into top-level cell line data\n    // once all \"folding in\" of datasets are finished (need promise for this), this is your master set of json objects:\n    // cell line is unique identifier, and then all its associated data (gex and annotations)\n\n\n    // getting all data from matrix_value together\n    var dPromises = [];\n    geneSymbolArray.forEach(function (gene) {\n      var d = $.Deferred();\n      dPromises.push(d);\n      var pPromises = [];\n      var geneDataset = {};\n      var p = clue.Gex.getCNForGeneCCLE(gene);\n      p.done(function (dataset) {\n        geneDataset.copyNumber = dataset;\n      });\n      pPromises.push(p);\n      p = clue.Gex.getMutForGeneCCLE(gene);\n      p.done(function (dataset) {\n        geneDataset.mutStatus = dataset;\n      });\n      pPromises.push(p);\n      $.when.apply($, pPromises).done(function () {\n        var cnNum = gene + '_CN_num';\n        var cnBin = gene + '_CN_bin';\n        geneDataset.copyNumber.forEach(function (o) {\n          if (allDatasets[o.i]) {\n            allDatasets[o.i][cnNum] = o.v;\n            allDatasets[o.i][cnBin] = o.cn_bin;\n          }\n        });\n\n        var mutStatus = gene + '_Mut_status';\n        var mutChange = gene + '_cDNA_change';\n        geneDataset.mutStatus.forEach(function (o) {\n          var mutStatusVal = o.Variant_Classification;\n          var mutChangeVal = o.cDNA_Change;\n          o.values.forEach(function (v) {\n            if (allDatasets[v.i]) {\n              allDatasets[v.i][mutStatus] = mutStatusVal;\n              allDatasets[v.i][mutChange] = mutChangeVal;\n            }\n\n          });\n        });\n        d.resolve();\n      });\n    });\n    $.when.apply($, dPromises).done(function () {\n      f.resolve(allDatasets);\n    });\n    return f;\n  };\nclue.Gex.getCNForGeneCCLE = function (gene) {\n    var deferred = $.Deferred();\n    var filterObject = {\n      where: {f: gene, d: \"CCLE_CN_2013-12-03\"},\n      fields: [\"v\", \"i\"],\n      order: \"v ASC\"\n      //,limit:100\n    };\n\n    $.ajax(\n      clue.API_URL + '/api/matrix_values?filter=' + JSON.stringify(filterObject)\n    ).done(function (results) {\n      results.forEach(function (o) {\n        if (o.v < -1.1) {\n          o.cn_bin = 'Deletion'\n        }\n        else if (o.v < -0.25) {\n          o.cn_bin = 'Loss'\n        }\n        else if (o.v >= 0.7) {\n          o.cn_bin = 'Amplification';\n        }\n        else if (o.v >= 0.2) {\n          o.cn_bin = 'Gain'\n        }\n        else {\n          o.cn_bin = 'No change'\n        }\n      });\n      deferred.resolve(results);\n    }).fail(function () {\n      deferred.resolve(null);\n    });\n\n    return deferred;\n  };\nclue.Gex.getMutForGeneCCLE = function (gene) {\n    var deferred = $.Deferred();\n    var filterObject = {\n      where: {Symbol: gene},\n      include: {values: 1}\n      //,limit:100\n    };\n    $.ajax(\n      clue.API_URL + '/api/matrix_features?filter=' + JSON.stringify(filterObject)\n    ).done(function (results) {\n      deferred.resolve(results);\n    }).fail(function () {\n      deferred.resolve(null);\n    });\n\n    return deferred;\n  };\nclue.Gex.fixCcleDataset = function (dataset) {\n    var primarySite = dataset.getColumnMetadata().getByName('Primary Site');\n    var lineageVector = dataset.getColumnMetadata().getByName('cell_lineage');\n    var cellIdVector = dataset.getColumnMetadata().getByName('cell_id');\n    var ccleNameVector = dataset.getColumnMetadata().getByName('ccle_id');\n    for (var i = 0; i < cellIdVector.size(); i++) {\n      var id = cellIdVector.getValue(i);\n      // CD34, NEU, NPC\n      if (primarySite.getValue(i) == null || primarySite.getValue(i) == '') {\n        var lineage = lineageVector.getValue(i);\n        if (lineage === 'CNS') {\n          lineage = 'central_nervous_system';\n        } else if (lineage === 'bone marrow') {\n          lineage = 'bone';\n        }\n        primarySite.setValue(i, lineage);\n        ccleNameVector.setValue(i, id.toUpperCase() + '_' + lineage);\n      }\n    }\n    return dataset;\n  };\nfunction setupHeader(object) {\n  showExportOptions(object);\n  setupDisplayOptions(object);\n}\nfunction setupDisplayOptions(object) {\n  object.displayFormBuilder.$form.find('label').addClass('display-label');\n  object.displayFormBuilder.$form.find('.bootstrap-select').addClass('display-selector-button');\n  object.displayFormBuilder.$form.addClass('display-form');\n  object.displayFormBuilder.$form.appendTo(object.$el.find('.header-display-options'));\n  object.displayFormBuilder.find('data_format').on('change', {object:object}, function (e) {\n    updateDataType(e.data.object);\n    updateSortBy(e.data.object);\n    updateCharts(e.data.object.view);\n  });\n  object.displayFormBuilder.find('sort_by').on('change', {object:object}, function (e) {\n    updateSortBy(e.data.object);\n    updateCharts(e.data.object.view);\n  });\n  object.displayFormBuilder.find('group_points_by').on('change', {object:object}, function (e) {\n    updateGroupBy(e.data.object);\n    updateSortBy(e.data.object);\n    updateCharts(e.data.object.view);\n  });\n  object.displayFormBuilder.find('gene_shown').on('change', {object:object}, function (e) {\n    updateGeneShown(e.data.object);\n    updateCharts(e.data.object.view);\n  });\n}\nfunction updateCharts(view) {\n  if (!view.groupBy) {\n    clue.Gex.createLineChart(view);\n  } else {\n    clue.Gex.createGroupedBoxPlot(view);\n  }\n}\nfunction updateDataType(object) {\n  object.view.dataType = object.displayFormBuilder.getValue(\"data_format\");\n}\nfunction updateGeneShown(object) {\n  if(object.view.genes.length>1) {\n    object.view.geneShown = object.displayFormBuilder.getValue(\"gene_shown\");\n  }\n}\nfunction updateGroupBy(object) {\n  var $el = object.$el;\n  var groupBy =  object.displayFormBuilder.getValue(\"group_points_by\");\n  var $geneShown = object.displayFormBuilder.find('gene_shown').parent().parent().addClass('hide-important');\n  if(groupBy==='None') {\n    $el.find('[data-section=\"uiGeneShown\"]').hide();\n    $geneShown.addClass('hide-important');\n    object.view.groupBy = false;\n    object.displayFormBuilder.setOptions('sort_by',object.sortOptionsBuilt,true);\n  }\n  else {\n    // $el.find('[data-section=\"uiSortBy\"]').hide();\n    // $sortBy.addClass('hide-important');\n    $el.find('[data-section=\"uiGeneShown\"]').show();\n    $geneShown.removeClass('hide-important');\n    var index = groupBy.indexOf(':');\n    if (index >= 0) {\n      var gene = groupBy.substring(0, index).trim();\n      var field = groupBy.substring(index + 1).trim();\n      field = (field === 'Mutational status' ? 'Mut_status' : 'CN_bin');\n      object.view.groupBy = {\n        gene: gene,\n        field: field\n      };\n    }\n    else {\n      object.view.groupBy = {pluckField: 'lineage'};\n    }\n    object.displayFormBuilder.setOptions('sort_by',object.sortOptionsDefault,true);\n  }\n}\nfunction updateSortBy(object) {\n  // get sortby\n  var sortBy = object.displayFormBuilder.getValue(\"sort_by\");\n  var index = sortBy.indexOf(':');\n  object.view.sortByReverse = false;\n  if (index >= 0) {\n    var field1 = sortBy.substring(0, index).trim();\n    if (field1==='Id') {\n      field1 = 'name';\n    }\n    else if (field1==='Median') {\n      field1 = 'median';\n    }\n    else {\n      field1 += '_exp_' + clue.Gex.DATA_NAMES[object.view.dataType];\n    }\n    object.view.dataset = _.sortBy(object.view.dataset, field1);\n    var field2 = sortBy.substring(index + 1).trim();\n    if (field2==='Z to A' || field2==='High to Low') {\n      object.view.dataset = object.view.dataset.reverse();\n      object.view.sortByReverse = true;\n    }\n\n    object.view.sortBy = field1;\n  }\n  else {\n    object.view.sortBy = 'default';\n  }\n}\nfunction createCheckboxListener(selector, object) {\n  selector.on('checkBoxSelectionChanged',function (e) {\n    updateSelectedLines(object);\n    updateSelectedTable(object);\n    updateCharts(object.view);\n  });\n}\n\nfunction updateSelectedTable(object) {\n  const $el = object.$el;\n  const dataset = object.dataset;\n  const genes = object.view.genes;\n  // const gTable = $el.find('[=\"gTable\"]');\n  const gTable = $el.find('[data-section=\"gTable\"]');\n  gTable.html('');\n\n  if (!genes || genes.length > 1) {\n    return;\n  }\n  const gene = genes[0];\n  const items = _.toArray(dataset);\n  console.log(items);\n  const table = new tablelegs.Table({\n    search: true,\n    showAll: false,\n    export: false,\n    exportFileName: 'gex_export.txt',\n    $el: gTable,\n    items: items,\n    columns: [\n      {\n        name: 'Name',\n        field: 'name',\n        visible: true\n      },\n      {\n        name: 'Lineage',\n        field: 'lineage',\n        visible: true\n      },\n      {\n        name: 'z-score',\n        field: gene + '_exp_Z_SCORE',\n        visible: true\n      },\n      {\n        name: 'q-norm',\n        field: gene + '_exp_QNORM',\n        visible: true\n      }\n    ]\n  });\n  table.setSortColumns([{\n    name: 'z-score',\n    ascending: false\n  }]);\n\n}\n\nfunction updateSelectedLines(object) {\n  var $el = object.$el;\n  var view = object.view;\n  var radioVal = $el.find('[name=\"cellLines\"]:checked').val();\n  if(radioVal==='core') {\n    $el.find('[data-section=\"byLineageCheckbox\"]').hide();\n    $el.find('[data-section=\"byIdCheckbox\"]').hide();\n    view.selectedLines = clue.CORE_CELL_LINES_CCLE;\n  }\n  else if(radioVal==='byId') {\n    $el.find('[data-section=\"byLineageCheckbox\"]').hide();\n    $el.find('[data-section=\"byIdCheckbox\"]').show();\n    view.selectedLines = view.idColumn.set.values();\n  }\n  else {\n    $el.find('[data-section=\"byLineageCheckbox\"]').show();\n    $el.find('[data-section=\"byIdCheckbox\"]').hide();\n    var lineages = view.lineageColumn.set.values();\n    view.selectedLines = _.pluck(_.filter(object.view.dataset,\n      function(obj){ return lineages.indexOf(obj.lineage)!=-1}), 'name');\n  }\n}\nfunction showExportOptions(object) {\n  var $el = object.$el;\n  $el.find('.command-out-links').show();\n  var topConnHeatMap = object.topConnHeatMap;\n  var $exportOptions = $el.find('.export-options');\n  var exportOptionsHtml = '<input type=\"radio\" name=\"exportType\" value=\"0\" class=\"export-radio\">' +\n    'Export the selected data as a comma-separated file (.csv)</input><br>';\n  $exportOptions.html(exportOptionsHtml);\n  $el.find('.export-btn-confirm').on('click',{object: object},function(e) {\n    executeExport(e.data.object);\n  });\n  $el.find('.export-btn-cancel').on('click',{object:object},function(e) {\n    e.data.object.$el.find('.export-modal').modal('hide');\n  });\n  $el.find('.export-btn').on('click',{$el:object.$el},function(e) {\n    e.data.$el.find('.export-warning').html('');\n    e.data.$el.find('.export-pending').html('');\n  });\n\n}\nfunction executeExport(object) {\n  var $el = object.$el;\n  $el.find('.export-warning').html('');\n  var inputType = $el.find('input[name=\"exportType\"]:checked').val();\n  var fileName = $el.find('.export-filename-prompt').val();\n  fileName = fileName ? fileName : 'command_output';\n  if(!inputType) {\n    $el.find('.export-warning').html('No option selected');\n  }\n  else {\n    if(inputType==0) {\n      saveDatasetToCsv(object,fileName);\n    }\n    $el.find('.export-modal').modal('hide');\n  }\n}\nfunction saveDatasetToCsv(object,fname) {\n  // make header\n\n  var dataset = _.filter(object.dataset, function (obj) {\n    return _.contains(object.view.selectedLines, obj.name);\n  });\n  dataset = _.sortBy(dataset, 'name');\n  var header = _.keys(dataset[0]);\n  // iterate over each\n  var csvContent = header.join(',') + '\\n';\n  dataset.forEach(function (obj) {\n    for (var i = 0; i < header.length - 1; i++) {\n        csvContent += obj[header[i]] + ','\n    }\n    csvContent += obj[header[header.length-1]] + '\\n';\n  });\n\n  var blob = new Blob([csvContent], {type:'text/csv'});\n  var csvUrl = window.URL.createObjectURL(blob);\n\n  var link = document.createElement(\"a\");\n  link.setAttribute(\"href\", csvUrl);\n  link.setAttribute(\"download\", fname+\".csv\");\n  link.click();\n}\n\n\n\n\n\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/gex.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/hex.js":
/*!*****************************************************!*\
  !*** ./public/js/local/command/dist/actions/hex.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.show = function(options) {\n    exports.changeTabHeader(options.object);\n    var ids = options.ids;\n    var $el = options.$el;\n    var d = $.Deferred();\n    var promises = [];\n    var datasetFunctionsToInvoke;\n    var columnDef = morpheus.DatasetUtil.annotate({\n        annotations: [\n            {\n                file: 'https://s3.amazonaws.com/data.clue.io/cell/cell%20app%20all.xlsx',\n                datasetField: 'ccle_id',\n                fileField: 'CCLE Name'\n            }],\n        isColumns: true\n    });\n    columnDef.done(function (callbacks) {\n        datasetFunctionsToInvoke = callbacks;\n    });\n    promises.push(columnDef);\n    var p = morpheus.DatasetUtil.read(\n        clue.API_URL + '/data-api/slice/?name=CCLE_GCP&cfield=CommonLineName&cfield=Lineage&rfield=id&rquery=id:(' +\n        ids.join(' ') + ')&user_key=' + clue.USER_KEY);\n    promises.push(p);\n    var dataset;\n    p.done(function (ds) {\n        dataset = ds;\n        var cellIdVector = ds.getColumnMetadata().add('ccle_id');\n        var nameVector = ds.getColumnMetadata().getByName('CommonLineName');\n        var lineageVector = ds.getColumnMetadata().getByName('Lineage');\n        for (var i = 0; i < cellIdVector.size(); i++) {\n            var name = nameVector.getValue(i);\n            var lineage = lineageVector.getValue(i);\n            name = name.replace(/[:;. -\\/]/g, '');\n            nameVector.setValue(i, name.toUpperCase());\n            var id = name + '_' + lineage;\n            id = id.toUpperCase();\n            cellIdVector.setValue(i, id);\n        }\n\n    });\n    $.when.apply($, promises).fail(function () {\n        d.reject();\n    }).done(function () {\n        datasetFunctionsToInvoke.forEach(function (f) {\n            f(dataset);\n        });\n        var nameVector = dataset.getColumnMetadata().getByName('CommonLineName');\n        var lineageVector = dataset.getColumnMetadata().getByName('Lineage');\n        var siteVector = dataset.getColumnMetadata().getByName('Primary Site');\n        for (var i = 0; i < siteVector.size(); i++) {\n            if (siteVector.getValue(i) == null) {\n                console.log(nameVector.getValue(i) + '\\t' + lineageVector.getValue(i));\n            }\n        }\n        d.resolve();\n    });\n};\n\nexports.changeTabHeader = function(tabObject) {\n    $('#headerButtonRow').hide();\n    $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/hex.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/moa.js":
/*!*****************************************************!*\
  !*** ./public/js/local/command/dist/actions/moa.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.show = function(options) {\n    var groupBy = __webpack_require__(/*! Shared/groupBy.js */ \"./public/js/local/command/dist/shared/groupBy.js\");\n    options.dbField = 'moa';\n    options.lcField = 'MoA';\n    options.capitalizedField = 'MoA';\n    options.command = 'moa';\n    groupBy.groupByShow(options);\n};\n\nexports.changeTabHeader = function(tabObject) {\n    // var groupBy = require('Shared/groupBy.js');\n    // groupBy.changeTabHeader(tabObject);\n};\n\n\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/moa.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/pcl.js":
/*!*****************************************************!*\
  !*** ./public/js/local/command/dist/actions/pcl.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.show = function(options) {\n    exports.changeTabHeader(options.object);\n    var d = $.Deferred();\n    var ids = options.ids;\n    var promises = [];\n    // group_id: \"CP_ATPASE_INHIBITOR\",\n    // name: \"ATPase Inhibitor (CP)\",\n    // perts: [\n    // {\n    //   pert_id: \"BRD-A93236127\"\n    // },\n\n    var filter = {\n        include: {\n            relation: 'perts',\n            scope: {field: ['pert_id']}\n        }\n    };\n    if (ids.length > 0) {\n        filter.include.scope.where = {pert_id: {inq: ids}};\n    }\n    // ?filter={%22include%22:{%22relation%22:%22perts%22,%22scope%22:{%22fields%22:[%22pert_id%22],%20%22where%22:{%22pert_id%22:%22BRD-A93236127%22}}}}\n    var p = $.ajax(clue.API_URL + '/api/pcls/?filter=' + JSON.stringify(filter) + '&version=1');\n\n    p.done(function (results) {\n        // remove results with no perts\n        results = results.filter(function (result) {\n            return result.perts && result.perts.length > 0;\n        });\n        if (results.length === 0) {\n            return d.reject('No PCLs found.');\n        }\n        d.resolve();\n        var cardId = _.uniqueId('clue');\n        var $center = $('<div class=\"col-md-7 col-lg-8 col-sm-6 col-xs-12\"></div>');\n        var $right = $('<div id=\"' + cardId + '\" class=\"col-md-4 col-lg-3 col-sm-6 col-xs-12\"></div>');\n        // by PCL\n        $center.appendTo(options.$el);\n        $right.appendTo(options.$el);\n        var table = new tablelegs.Table({\n            height: '412px',\n            columnPicker: true,\n            tableClass: 'slick-table slick-bordered-table slick-hover-table',\n            select: true,\n            search: true,\n            export: false,\n            $el: $center,\n            columns: [\n                {\n                    getter: function (item) {\n                        var name = item.name;\n                        var index = name.lastIndexOf('(');\n                        return name.substring(0, index);\n                    },\n                    name: 'Name'\n                }, {\n                    getter: function (item) {\n                        var name = item.name;\n                        var index = name.lastIndexOf('(');\n                        return name.substring(index + 1, name.length - 1);\n                    },\n                    name: 'Type',\n                    renderer: function (item, value) {\n                        if (value === 'CP') {\n                            return '<i class=\"text-center glyphicon glyphicon-adjust touchstone-cp\"></i>';\n                        } else if (value === 'KD') {\n                            return '<i class=\"text-center glyphicon glyphicon-minus-sign touchstone-kd\"></i>';\n                        } else if (value === 'OE') {\n                            return '<i class=\"text-center glyphicon glyphicon-plus-sign touchstone-oe\"></i>';\n                        } else {\n                            return value;\n                        }\n                    }\n                }],\n            items: results\n        });\n        table.on('selectionChanged',\n            function (e) {\n                var selectedRows = e.selectedRows;\n                if (selectedRows.length === 1) {\n                    var selectedItem = table.getItems()[selectedRows[0]];\n                    if (selectedItem) {\n                        /* $.pjax({\n                            push: false,\n                            url: '/cards/cmap-class/' + selectedItem.group_id + '?version=blah',\n                            container: '#' + cardId\n                        }); */\n                        getCard('/cards/cmap-class/' + selectedItem.group_id + '?version=blah', '#' + cardId);\n                    }\n                }\n            });\n\n    });\n    return d;\n};\n\nexports.changeTabHeader = function(tabObject) {\n    $('#headerButtonRow').hide();\n    $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/pcl.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/sar.js":
/*!*****************************************************!*\
  !*** ./public/js/local/command/dist/actions/sar.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.show = function(options) {\n    exports.changeTabHeader(options.object);\n    var introspectData = __webpack_require__(/*! Shared/introspectData.js */ \"./public/js/local/command/dist/shared/introspectData.js\");\n    var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n\n    var ids = options.ids;\n    var $div = $('<div class=\"col-xs-12\"><h6>The lower diagonal contains structural' +\n        ' similarity, the upper diagonal transcriptional similarity. Double-click' +\n        ' the columns to sort by transcriptional similarity. Double-click the rows to' +\n        ' sort by structural similarity.</h6><div' +\n        ' data-name=\"input\"></div><div' +\n        ' data-name=\"header\"></div><div' +\n        ' style=\"position:relative;\"><div' +\n        ' style=\"vertical-align:top;\" data-name=\"vis\"></div><div' +\n        ' data-name=\"images\"' +\n        ' style=\"position:absolute;top:20px;right:0;width:250px;\"></div></div><div' +\n        ' data-name=\"footer\"></div></div>');\n    var $heatMap = $div.find('[data-name=vis]');\n    var formBuilder = new morpheus.FormBuilder({formStyle: 'vertical'});\n    formBuilder.append({\n        type: 'bootstrap-select',\n        name: 'cell_line',\n        options: ['Summary'].concat(clue.CORE_CELL_LINES),\n        value: 'Summary',\n        showLabel: true\n    });\n    formBuilder.append({\n        type: 'bootstrap-select',\n        name: 'fingerprint',\n        options: [\n            {\n                name: 'Daylight',\n                value: 'tanimoto_daylight'\n            }, {\n                name: 'Extended Connectivity Fingerprint (Diameter 2)',\n                value: 'tanimoto_ecfp2'\n            }, {\n                name: 'Extended Connectivity Fingerprint (Diameter 4)',\n                value: 'tanimoto_ecfp4'\n            }],\n        value: 'tanimoto_daylight',\n        showLabel: true\n    });\n    var $header = $div.find('[data-name=header]');\n    var $images = $div.find('[data-name=images]');\n    var $footer = $div.find('[data-name=footer]');\n    $footer.css({\n        'padding-top': '20px',\n        'width': '800px'\n    });\n    formBuilder.$form.appendTo($div.find('[data-name=input]'));\n    formBuilder.$form.find('.bootstrap-select').css('max-width', '200px');\n    var $introspectCellLine = formBuilder.find('cell_line');\n    var $fingerprint = formBuilder.find('fingerprint');\n    var fingerprint = $fingerprint.val();\n    var cellLine = $introspectCellLine.val();\n    $div.appendTo(options.$el);\n    var tanimotoDataset;\n    var annotations;\n    var firstTime = true;\n    var introspectDataset;\n    var hasIntrospectData;\n\n    function redraw() {\n        var newCellLine = $introspectCellLine.val();\n        if (newCellLine !== cellLine) {\n            cellLine = newCellLine;\n            introspectDataset = null;\n        }\n        var newFingerprint = $fingerprint.val();\n        if (newFingerprint !== fingerprint) {\n            fingerprint = newFingerprint;\n            tanimotoDataset = null;\n        }\n        var promises = [];\n\n        if (firstTime) {\n            firstTime = false;\n            promises.push($.ajax(clue.API_URL + '/api/perts/?filter=' + JSON.stringify({\n                    fields: ['pert_id', 'pert_iname', 'target', 'moa', 'tas', 'cell_tas'],\n                    where: {pert_id: {inq: ids}}\n                })).done(function (results) {\n                annotations = results;\n                var footer = [];\n                footer.push('<div class=\"grid-stack grid-stack-4\">');\n                var row = 0;\n                var col = 0;\n                for (var i = 0; i < annotations.length; i++) {\n                    footer.push('<div class=\"grid-stack-item\" style=\"border:1px solid lightgray;\"  data-gs-y=\"' + row +\n                        '\"  data-gs-x=\"' + col + '\"  data-gs-width=\"1\"' +\n                        '  data-gs-height=\"1\">');\n                    var name = annotations[i].pert_iname;\n                    footer.push('<div class=\"grid-stack-item-content\">' + name +\n                        '<img class=\"img-responsive\" src=\"https://s3.amazonaws.com/data.clue.io/trimmed_perts/' +\n                        annotations[i].pert_id + '.png\"></div>');\n                    footer.push('</div>');\n                    col++;\n                    if (col === 4) {\n                        row++;\n                        col = 0;\n                    }\n                }\n                footer.push('</div>');\n                $footer.html(footer.join(''));\n\n                $footer.find('.grid-stack').gridstack({\n                    cellHeight: '250px',\n                    verticalMargin: 6,\n                    disableResize: true,\n                    width: 4\n                });\n            }));\n        }\n        if (tanimotoDataset == null) {\n            var p = getTanimoto(ids, newFingerprint);\n            promises.push(p);\n            p.done(function (dataset) {\n                tanimotoDataset = dataset;\n                for (var i = 0, nrows = dataset.getRowCount(); i < nrows; i++) {\n                    tanimotoDataset.setValue(i, i, 0); // diagonal\n                }\n            });\n        }\n        if (introspectDataset == null) {\n            introspectDataset = new morpheus.Dataset({\n                rows: 0,\n                columns: 0\n            });\n            var introspectDef = $.Deferred();\n            introspectData.get({\n                rowIds: ids,\n                columnIds: ids,\n                cellLine: cellLine,\n                symmetric: true\n            }).done(function (ds) {\n                hasIntrospectData = true;\n                introspectDataset = ds;\n            }).always(function () {\n                introspectDef.resolve();\n            });\n            promises.push(introspectDef);\n        }\n        var deferred = $.Deferred();\n        var introspectSeriesIndex;\n        var tanimotoSeriesIndex = 0;\n        $.when.apply($, promises).done(function () {\n            var introspectIdToIndex = hasIntrospectData ? morpheus.VectorUtil.createValueToIndexMap(\n                introspectDataset.getRowMetadata().getByName('id')) : new morpheus.Map();\n            var tanimotoIdToIndex = morpheus.VectorUtil.createValueToIndexMap(\n                tanimotoDataset.getRowMetadata().getByName('id'));\n            // upper diagonal is tanimoto, lower diagonal is connectivity\n\n            var copy = new morpheus.Dataset({\n                rows: ids.length,\n                columns: ids.length,\n                dataType: 'object'\n            });\n            tanimotoSeriesIndex = copy.addSeries({name: 'Tanimoto'});\n            introspectSeriesIndex = copy.addSeries({name: 'Introspect'});\n            for (var i = 0; i < copy.getRowCount(); i++) {\n                // diagonal\n                copy.setValue(i, i, NaN);\n                copy.setValue(i, i, NaN, tanimotoSeriesIndex);\n                copy.setValue(i, i, NaN, introspectSeriesIndex);\n            }\n\n            copy.getRowMetadata().add('id').array = ids;\n            copy.getColumnMetadata().add('id').array = ids;\n\n            for (var i = 1; i < copy.getRowCount(); i++) {\n                var introspectIndex1 = introspectIdToIndex.get(ids[i]);\n                var tanimotoIndex1 = tanimotoIdToIndex.get(ids[i]);\n                for (var j = 0; j < i; j++) {\n                    var introspectIndex2 = introspectIdToIndex.get(ids[j]);\n                    var tanimotoIndex2 = tanimotoIdToIndex.get(ids[j]);\n                    var introspectValue = introspectIndex1 !== undefined && introspectIndex2 !== undefined\n                        ? introspectDataset.getValue(introspectIndex1, introspectIndex2)\n                        : NaN;\n                    var tanimotoValue = tanimotoIndex1 !== undefined && tanimotoIndex2 !== undefined\n                        ? tanimotoDataset.getValue(tanimotoIndex1, tanimotoIndex2)\n                        : NaN;\n                    var introspectObject = new Number(introspectValue);\n                    introspectObject.tanimoto = tanimotoValue;\n                    introspectObject.introspect = introspectValue;\n\n                    var tanimotoObject = new Number(tanimotoValue);\n                    tanimotoObject.tanimoto = tanimotoValue;\n                    tanimotoObject.introspect = introspectValue;\n                    copy.setValue(i, j, tanimotoObject);\n                    copy.setValue(j, i, introspectObject);\n                    copy.setValue(i, j, introspectValue, introspectSeriesIndex);\n                    copy.setValue(j, i, introspectValue, introspectSeriesIndex);\n                    copy.setValue(i, j, tanimotoValue, tanimotoSeriesIndex);\n                    copy.setValue(j, i, tanimotoValue, tanimotoSeriesIndex);\n                }\n            }\n\n            if (annotations != null) {\n                annotateDataset({\n                    dataset: copy,\n                    fields: [\n                        {\n                            key: 'pert_iname',\n                            value: 'name'\n                        }, {\n                            key: 'moa',\n                            value: 'moa'\n                        }, {\n                            key: 'target',\n                            value: 'target'\n                        }, {\n                            key: createTasGetter(cellLine),\n                            value: 'tas'\n                        }],\n                    results: annotations,\n                    columns: false\n                });\n                annotateDataset({\n                    dataset: copy,\n                    fields: [\n                        {\n                            key: 'pert_iname',\n                            value: 'name'\n                        }],\n                    results: annotations,\n                    columns: true\n                });\n\n                function addMissingNames(metadata) {\n                    var nameVector = metadata.getByName('name');\n                    var idVector = metadata.getByName('id');\n                    for (var i = 0, size = nameVector.size(); i < size; i++) {\n                        if (nameVector.getValue(i) == null) {\n                            nameVector.setValue(i, idVector.getValue(i));\n                        }\n                    }\n                }\n\n                addMissingNames(copy.getRowMetadata());\n                addMissingNames(copy.getColumnMetadata());\n            }\n            var medianTanimoto = copy.getColumnMetadata().add('tanimoto_median');\n            var view = new morpheus.DatasetColumnView(new morpheus.DatasetSeriesView(copy, [tanimotoSeriesIndex]));\n            for (var i = 0; i < medianTanimoto.size(); i++) {\n                medianTanimoto.setValue(i, morpheus.Median(view.setIndex(i)));\n            }\n\n            if (hasIntrospectData) {\n                var medianIntrospect = copy.getRowMetadata().add('introspect_median');\n                var view = new morpheus.DatasetRowView(new morpheus.DatasetSeriesView(copy, [introspectSeriesIndex]));\n                for (var i = 0; i < medianIntrospect.size(); i++) {\n                    medianIntrospect.setValue(i, morpheus.Median(view.setIndex(i)));\n                }\n            }\n            // cluster by tanimoto\n            var hcl = new morpheus.HCluster(\n                morpheus.HCluster.computeDistanceMatrix(new morpheus.DatasetSeriesView(copy, [tanimotoSeriesIndex]), 1),\n                morpheus.AverageLinkage);\n            deferred.resolve(new morpheus.SlicedDatasetView(copy, hcl.order, hcl.order));\n        });\n\n        var tanimotoColorScheme = new morpheus.HeatMapColorScheme(new morpheus.Project(new morpheus.Dataset({\n            rows: 1,\n            columns: 1\n        })), {\n            type: 'fixed',\n            map: [\n                {\n                    value: 0,\n                    color: 'white'\n                }, {\n                    value: 0.7,\n                    color: 'white'\n                }, {\n                    value: 1,\n                    color: 'green'\n                }]\n        });\n        var introspectColorScheme = new morpheus.HeatMapColorScheme(new morpheus.Project(new morpheus.Dataset({\n            rows: 1,\n            columns: 1\n        })), clue.createGutcColorScheme());\n\n        $heatMap.empty();\n        new morpheus.HeatMap({\n            colorScheme: clue.createGutcColorScheme(),\n            toolbar: utils.quickMorpheusToolbar(),\n            menu: null,\n            autohideTabBar: true,\n            popupEnabled: true,\n            el: $heatMap,\n            dataset: deferred,\n            tooltipSeriesIndices: [tanimotoSeriesIndex, introspectSeriesIndex],\n            name: '2-D Tanimoto Structural Similarity',\n            rows: [\n                {\n                    field: 'introspect_median',\n                    display: 'bar',\n                    max: 100\n                }, {\n                    field: 'name',\n                    display: 'text'\n                }, {\n                    field: 'moa',\n                    display: 'text'\n                }, {\n                    field: 'target',\n                    display: 'text'\n                }, {\n                    field: 'tas',\n                    display: 'bar'\n                }],\n            columns: [\n                {\n                    field: 'name',\n                    display: 'text'\n                }, {\n                    field: 'tanimoto_median',\n                    display: 'bar',\n                    max: 1\n\n                }, {\n                    field: 'tas',\n                    display: 'bar'\n                }],\n            renderReady: function (heatMap) {\n                $heatMap.find('[data-toggle=buttons]').remove();\n                $heatMap.find('input:visible:first').css({\n                    'border-top': '',\n                    'border-bottom': ''\n                });\n                heatMap.getProject().getFullDataset().getRowMetadata().add('xxx').setValue(0, 'Tanimoto');\n                heatMap.getHeatMapElementComponent().getColorScheme().setSeparateColorSchemeForRowMetadataField('xxx');\n                heatMap.getHeatMapElementComponent().getColorScheme().setCurrentValue('Tanimoto');\n                heatMap.getHeatMapElementComponent().getColorScheme().setColorSupplierForCurrentValue(tanimotoColorScheme);\n                heatMap.getHeatMapElementComponent().getColorScheme().setCurrentValue(null);\n                heatMap.getHeatMapElementComponent().getColorScheme().setColorSupplierForCurrentValue(introspectColorScheme);\n\n                heatMap.getHeatMapElementComponent().getColorScheme().getColor = function (row, column, val) {\n                    if (val == null) {\n                        return 'Gray';\n                    }\n                    if (row < column) {\n                        return introspectColorScheme.getColor(0, 0, val.introspect);\n                    } else if (row > column) {\n                        return tanimotoColorScheme.getColor(0, 0, val.tanimoto);\n                    } else {\n                        return 'LightGrey';\n                    }\n                };\n                var oldSetRowSortKeys = heatMap.getProject().setRowSortKeys;\n                // double-click on columns to sort rows by introspect\n                heatMap.getProject().setRowSortKeys = function (keys, notify) {\n                    var newKeys = [];\n                    keys.forEach(function (key) {\n                        if (key instanceof morpheus.SortByValuesKey) {\n                            var comparator = key.getComparator();\n                            var dataset = heatMap.getProject().getFullDataset();\n                            dataset = key.isColumns() ? new morpheus.TransposedDatasetView(dataset) : dataset;\n                            dataset = new morpheus.DatasetSeriesView(dataset, [introspectSeriesIndex]);\n                            var indices = morpheus.Util.sequ32(dataset.getRowCount());\n                            key.init(dataset, indices);\n                            indices.sort(function (index1, index2) {\n                                var a = +key.getValue(index1);\n                                var b = +key.getValue(index2);\n                                var aNaN = isNaN(a);\n                                var bNaN = isNaN(b);\n\n                                if (aNaN && bNaN) {\n                                    return 0;\n                                }\n                                if (aNaN) {\n                                    return 1;\n                                }\n                                if (bNaN) {\n                                    return -1;\n                                }\n                                return (a === b ? 0 : (a < b ? 1 : -1));\n                            });\n\n                            key = new morpheus.SpecifiedModelSortOrder(indices, indices.length, key.toString(), false);\n                        }\n                        newKeys.push(key);\n                    });\n                    oldSetRowSortKeys.apply(this, [newKeys, notify]);\n                };\n                var oldSetColumnSortKeys = heatMap.getProject().setColumnSortKeys;\n                // double-click on rows to sort columns by tanimoto\n                heatMap.getProject().setColumnSortKeys = function (keys, notify) {\n                    var newKeys = [];\n                    keys.forEach(function (key) {\n                        if (key instanceof morpheus.SortByValuesKey) {\n                            var comparator = key.getComparator();\n                            var dataset = heatMap.getProject().getFullDataset();\n                            dataset = key.isColumns() ? new morpheus.TransposedDatasetView(dataset) : dataset;\n                            dataset = new morpheus.DatasetSeriesView(dataset, [tanimotoSeriesIndex]);\n                            var indices = morpheus.Util.sequ32(dataset.getRowCount());\n                            key.init(dataset, indices);\n                            indices.sort(function (index1, index2) {\n                                var a = +key.getValue(index1);\n                                var b = +key.getValue(index2);\n                                var aNaN = isNaN(a);\n                                var bNaN = isNaN(b);\n                                if (aNaN && bNaN) {\n                                    return 0;\n                                }\n                                if (aNaN) {\n                                    return 1;\n                                }\n                                if (bNaN) {\n                                    return -1;\n                                }\n                                return (a === b ? 0 : (a < b ? 1 : -1));\n                            });\n                            key = new morpheus.SpecifiedModelSortOrder(indices, indices.length, key.toString(), true);\n                        }\n                        newKeys.push(key);\n                    });\n\n                    oldSetColumnSortKeys.apply(this, [newKeys, notify]);\n\n                };\n\n                var tanimotoLegend = new morpheus.HistogramLegend(\n                    new morpheus.DatasetSeriesView(heatMap.getProject().getFullDataset(), [tanimotoSeriesIndex]),\n                    tanimotoColorScheme, null);\n                tanimotoLegend.setName('Structural Similarity (Tanimoto)');\n                tanimotoLegend.setBinSize(0.1);\n                tanimotoLegend.repaint();\n\n                var introspectLegend = new morpheus.HistogramLegend(\n                    new morpheus.DatasetSeriesView(heatMap.getProject().getFullDataset(), [introspectSeriesIndex]),\n                    introspectColorScheme, null);\n                introspectLegend.setName('Transcriptional Similarity (Introspect)');\n                introspectLegend.setBinSize(5);\n                introspectLegend.repaint();\n\n                $header.empty();\n                $(tanimotoLegend.canvas).appendTo($header);\n                if (hasIntrospectData) {\n                    $(introspectLegend.canvas).appendTo($header);\n                }\n                heatMap.on('change', function (e) {\n                    if (e.name === 'setMousePosition') {\n                        var d = heatMap.getProject().getSortedFilteredDataset();\n                        var html = [];\n                        var hoverColumnIndex = heatMap.getProject().getHoverColumnIndex();\n                        var hoverRowIndex = heatMap.getProject().getHoverRowIndex();\n                        var columnId;\n\n                        if (hoverColumnIndex !== -1) {\n                            var pertNameVector = d.getColumnMetadata().getByName('name');\n                            var pertIdVector = d.getColumnMetadata().getByName('id');\n                            columnId = pertIdVector.getValue(hoverColumnIndex);\n                            var str = pertNameVector != null ? pertNameVector.getValue(hoverColumnIndex) : '';\n                            if (str !== columnId) {\n                                str += ', ' + columnId;\n                            }\n                            html.push('<div style=\"width:250px;height:250px;overflow-y:auto;border:1px' +\n                                ' solid' +\n                                ' lightgray;' +\n                                ' display:inline-block;\">' + str + '<img' +\n                                ' class=\"img-responsive\"' +\n                                ' src=\"https://s3.amazonaws.com/data.clue.io/trimmed_perts/' + columnId + '.png\"></div>');\n                        }\n\n                        if (hoverRowIndex !== -1) {\n                            var pertNameVector = d.getRowMetadata().getByName('name');\n                            var pertIdVector = d.getRowMetadata().getByName('id');\n                            var rowId = pertIdVector.getValue(hoverRowIndex);\n                            if (columnId !== rowId) {\n                                var str = pertNameVector != null ? pertNameVector.getValue(hoverRowIndex) : '';\n                                if (str !== rowId) {\n                                    str += ', ' + rowId;\n                                }\n                                html.push('<div style=\"width:250px;height:250px;overflow-y:auto;border:1px' +\n                                    ' solid' +\n                                    ' lightgray;' +\n                                    ' display:inline-block;\">' + str + '<img' +\n                                    ' class=\"img-responsive\"' +\n                                    ' src=\"https://s3.amazonaws.com/data.clue.io/trimmed_perts/' + rowId + '.png\"></div>');\n                            }\n                        }\n\n                        $images.html(html.join(''));\n                    }\n                });\n\n            },\n            symmetric: true\n        });\n\n    }\n\n    $introspectCellLine.on('change', function () {\n        redraw();\n    });\n    $fingerprint.on('change', function () {\n        redraw();\n    });\n\n    redraw();\n\n}\n\nfunction createTasGetter(cellLine) {\n    var tasGetter;\n    if (cellLine == null || cellLine.toLowerCase() === 'summary') {\n        tasGetter = function (t) {\n            if (t == null) {\n                return null;\n            }\n            return t.tas;\n        };\n    } else {\n        tasGetter = function (t) {\n            if (t == null) {\n                return null;\n            }\n            for (var i = 0; i < t.cell_tas.length; i++) {\n                if (t.cell_tas[i].cell_id === cellLine) {\n                    return t.cell_tas[i].tas;\n                }\n            }\n        };\n    }\n    return tasGetter;\n}\n\nfunction getTanimoto(ids, name) {\n    var p = morpheus.DatasetUtil.read(\n        clue.API_URL + '/data-api/slice/?name=' + name + '&rfield=id&cfield=id&rquery=id:(' + ids.join(' ') +\n        ')&cquery=id:(' + ids.join(' ') + ')');\n    return p;\n}\n\n/**\n *\n * @param options.dataset\n * @param options.fields\n * @param options.results\n */\nfunction annotateDataset(options) {\n    var ids = [];\n    var dataset = options.columns ? new morpheus.TransposedDatasetView(options.dataset) : options.dataset;\n    var idVector = dataset.getRowMetadata().getByName('id');\n    for (var i = 0, size = idVector.size(); i < size; i++) {\n        ids.push(idVector.getValue(i));\n    }\n    var fields = options.fields;\n    var nfields = options.fields.length;\n    var results = options.results;\n\n    var vectors = [];\n    var idToIndex = morpheus.VectorUtil.createValueToIndexMap(idVector);\n    for (var j = 0; j < nfields; j++) {\n        vectors.push(dataset.getRowMetadata().add(options.fields[j].value));\n    }\n    for (var i = 0, nresults = results.length; i < nresults; i++) {\n        var item = results[i];\n        var index = idToIndex.get(item.pert_id);\n        if (index !== undefined) {\n            var id = item.pert_id;\n            for (var j = 0; j < nfields; j++) {\n                var value = _.isString(fields[j].key) ? item[fields[j].key] : fields[j].key(item);\n                vectors[j].setValue(index, value);\n            }\n        }\n    }\n}\n\nexports.changeTabHeader = function(tabObject) {\n    $('#headerButtonRow').hide();\n    $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/sar.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/sig.js":
/*!*****************************************************!*\
  !*** ./public/js/local/command/dist/actions/sig.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var zs = __webpack_require__(/*! Shared/zs.js */ \"./public/js/local/command/dist/shared/zs.js\");\n\nexports.show = function(options){\n    setupHeader(options.object);\n\n    var ids = options.ids;\n    options.ids.forEach(function(str,idx) {\n        options.ids[idx] = str.replace(/ccsbbroad/i, 'ccsbBroad');\n    });\n    var filter = {\n        fields: {\n            cell_id: true,\n            description: true,\n            pert_id: true,\n            pert_iname: true,\n            pert_type: true,\n            sig_id: true,\n            pert_icollection: true\n            // cell_id: true,\n            // distil_cc_q75: true,\n            // pct_self_rank_q25: true,\n            // pert_desc: true,\n            // pert_id: true,\n            // pert_idose: true,\n            // pert_iname: true,\n            // pert_itime: true,\n            // pert_type: true,\n            // sig_id: true\n        },\n        where: {\n            pert_id: {inq: ids}\n        }\n    };\n    return $.ajax(clue.API_URL + '/api/perts/?filter=' + JSON.stringify(filter)).done(function (results) {\n        results = _.filter(results, function(obj){\n            return obj.pert_icollection.indexOf('TS_v1.1') > -1; });\n        var $accordionPicker = $('<button id=\"sigSelectButton\" class=\"accordion\">Select signatures</button>');\n        $accordionPicker.appendTo(options.$el);\n        var $pickerPanel = $('<div class=\"panel\" id=\"sigSelectPanel\">');\n        var $left = $('<div class=\"col-md-4 col-lg-4 col-sm-12 col-xs-12 pad-top-12\"></div>');\n        var $center = $('<div class=\"col-md-8 col-lg-8 col-sm-12 col-xs-12 pull-right pad-top-12\"></div>');\n        // var $right = $('<div class=\"col-md-3 col-lg-3 col-sm-6 col-xs-12\"></div>');\n        $left.appendTo($pickerPanel);\n        $center.appendTo($pickerPanel);\n        $('</div>').appendTo($pickerPanel);\n        $pickerPanel.appendTo(options.$el);\n\n        var $accordionHeatMap = $('<button id=\"sigViewButton\" class=\"accordion\">Signature viewer</button>');\n        $accordionHeatMap.appendTo(options.$el);\n        var $viewerPanel = $('<div class=\"panel\" id=\"sigViewPanel\"><img style=\"width:205px;height:auto;\" class=\"img-key pull-right\" src=\"//assets.clue.io/clue/public/img/command/sig_legend.png\">');\n        $viewerPanel.appendTo(options.$el);\n        var $heatmap = $('<div class=\"pad-left-16 pad-top-12 pad-bottom-15\">No signatures chosen.</div>');\n        $heatmap.appendTo($viewerPanel);\n        $('</div>').appendTo($viewerPanel);\n        $viewerPanel.appendTo(options.$el);\n        var accordions = options.$el.find('.accordion');\n        for (i = 0; i < accordions.length; i++) {\n            // var panel = accordions[i].nextElementSibling;\n            // panel.style.display = \"block\";\n            options.$el.find('.accordion').eq(i)[0].onclick = function () {\n                /* Toggle between adding and removing the \"active\" class,\n                 to highlight the button that controls the panel */\n                this.classList.toggle(\"active\");\n                /* Toggle between hiding and showing the active panel */\n                var panel = this.nextElementSibling;\n                if (panel.style.maxHeight){\n                    panel.style.maxHeight = null;\n                } else {\n                    panel.style.maxHeight = (panel.scrollHeight) + \"px\";\n                }\n            }\n        }\n        options.$el.find()\n\n        var pertIdToItem = new morpheus.Map();\n        for (var i = 0, length = results.length; i < length; i++) {\n            pertIdToItem.set(results[i].pert_id, results[i]);\n        }\n        var checkBoxColumn = tablelegs.Table.createCheckBoxColumn({field: 'pert_id'});\n        // checkBoxColumn.renderer = function (item, value) {\n        //   if (typeof item._collapsed === 'undefined') { // child\n        //     return '<span padding-left:6px;><input data-tablelegs-toggle=\"true\" type=\"checkbox\" '\n        //       + (set.has(value) ? ' checked' : '') + '/></span>';\n        //   } else { // parent\n        //     if (item._collapsed) {\n        //       return '<span padding-left:6px;><input data-tablelegs-toggle=\"true\" type=\"checkbox\" '\n        //         + (set.has(value) ? ' checked' : '') + '/></span>';\n        //     } else {\n        //       return '<span padding-left:6px;><input data-tablelegs-toggle=\"true\" type=\"checkbox\" '\n        //         + (set.has(value) ? ' checked' : '') + '/></span>';\n        //     }\n        //   }\n        // };\n\n        results.forEach(function (o){\n        o.cell_id.sort(function(a,b) { return b.localeCompare(a)});\n        })\n\n\n        var cellSet = new morpheus.Set();\n        var table = new tablelegs.Table({\n            height: '300px',\n            columnPicker: true,\n            tableClass: 'slick-table slick-bordered-table slick-hover-table',\n            select: false,\n            search: true,\n            export: false,\n            $el: $center,\n            columns: [\n                checkBoxColumn, {\n                    field: 'pert_id',\n                    name: 'Id'\n                }, {\n                    field: 'pert_iname',\n                    name: 'Name'\n                }, {\n                    field: 'pert_type',\n                    name: 'Type',\n                    renderer: function (item, value) {\n                        if (value === 'trt_cp') {\n                            return '<i class=\"text-center glyphicon glyphicon-adjust touchstone-cp\"></i>';\n                        } else if (value === 'trt_sh.cgs') {\n                            return '<i class=\"text-center glyphicon glyphicon-minus-sign touchstone-kd\"></i>';\n                        } else if (value === 'trt_oe') {\n                            return '<i class=\"text-center glyphicon glyphicon-plus-sign touchstone-oe\"></i>';\n                        } else {\n                            return value;\n                        }\n                    }\n                }, {\n                    field: 'description',\n                    name: 'Description'\n                },\n                {\n                    name: '# Signatures', // CPC014_A375_6H:BRD-K70401845-001-02-5:10\n                    getter: function (item) {\n                        if (cellSet.size() === 0) {\n                            return item.sig_id.length;\n                        }\n                        return item.sig_id.filter(function (id) {\n                                return cellSet.has(id.split('_')[1]);\n                            }).length + ' / ' + item.sig_id.length;\n                    },\n                    renderer: function (item, value) {\n                        return '' + value;\n                    }\n                }],\n            items: results\n        });\n        // table.onClick.subscribe(function (e, args) {\n        //   if ($(e.target).hasClass('toggle')) {\n        //     var item = dataView.getItem(args.row);\n        //     if (item) {\n        //       if (!item._collapsed) {\n        //         item._collapsed = true;\n        //       } else {\n        //         item._collapsed = false;\n        //       }\n        //       table.render();\n        //     }\n        //     e.stopImmediatePropagation();\n        //   }\n        // });\n\n\n        var filterManager = new clue.FilterManagerUI(new clue.FilterManager(\n            results), $left);\n\n        filterManager.add({\n            name: 'Cell Line',\n            filter: new clue.SetFilter({\n                get: function (item, index) {\n                    return item.cell_id[index];\n                },\n                nvalues: function (item) {\n                    return item.cell_id.length || 0;\n                }\n            })\n        });\n\n      // this.filterNameToFilter.set(name, filter);\n        // add table filter to facets\n        filterManager.getFilterManager().preFilter = table.getFilter().get(0);\n        // add facet filter to table\n        table.getFilter().add(filterManager.getFilterManager().createFilter());\n\n        // table shows items passing table filter and faceted filters\n        // facets show items passing table filter and facets, except own facet\n\n        var searchingTable = false;\n        table.on('filter', function () {\n            searchingTable = true;\n            // update facets\n            filterManager.filter();\n            searchingTable = false;\n        });\n\n        filterManager.on('filter', function () {\n\n            if (!searchingTable) {\n                cellSet = filterManager.get('Cell Line').set;\n                table.setFilter(table.getFilter());\n            }\n        });\n\n        filterManager.filter();\n\n\n      // table.on('selectionChanged',\n        //   function (e) {\n        //     var selectedRows = e.selectedRows;\n        //     if (selectedRows.length > 0) {\n        //       var selectedItem = table.getItems()[selectedRows[0]];\n        //       if (selectedItem) {\n        //\n        //       }\n        //     }\n        //   });\n\n        var $customButtons = $('<div><button name=\"view\" type=\"button\" ' +\n            'class=\"btn btn-primary pull-right btn-view-scores btn-sm\"><span>Update viewer</span></button>' +\n            '<span name=\"load-text\"></span></div>');\n\n        $customButtons.find('button').prop('disabled', true);\n        table.on('checkBoxSelectionChanged', function () {\n            $customButtons.find('button').prop('disabled', checkBoxColumn.getSelection().size() === 0);\n        });\n        $customButtons.appendTo($center);\n        $customButtons.find('[name=view]').on('click', function (e) {\n            $customButtons.find('[name=load-text]').text('Loading signatures into viewer, please wait...');\n            e.preventDefault();\n            var pertIds = checkBoxColumn.getSelection();\n            if (pertIds.size() === 0) {\n                return;\n            }\n            var sigIds = [];\n            pertIds.forEach(function (id) {\n                sigIds = sigIds.concat(pertIdToItem.get(id).sig_id);\n            });\n            if (cellSet.size() > 0) {\n                sigIds = sigIds.filter(function (id) {\n                    return cellSet.has(id.split('_')[1]);\n                });\n            }\n            if (sigIds.length === 0) {\n                return;\n            }\n            if (sigIds.length > 100) {\n              sigIds = sigIds.slice(0,100)\n              $customButtons.find('[name=load-text]').text('Loading first 100 signatures into viewer, please wait...');\n            }\n            zs.getZScoreDataset(sigIds).done(function (zscoreDataset) {\n                if (zscoreDataset != null) {\n                    $heatmap.empty();\n                    zscoreDataset.getColumnMetadata().getByName('pert_iname').setName('name');\n                    // .getByName('name');\n                    var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n                    new morpheus.HeatMap({\n                        el: $heatmap,\n                        height: 500,\n                        rows: [\n                            {\n                                field: 'id',\n                                display: ['text']\n                            }, {\n                                field: 'pr_gene_symbol',\n                                renameTo: 'symbol',\n                                display: ['text']\n                            }, {\n                                field: 'gene_space',\n                                display: ['text', 'color']\n                            }],\n                        columns: [\n                            {\n                                field: 'name',\n                                display: 'text'\n                            },\n                            {\n                                field: 'cell_id',\n                                display: 'text'\n                            },\n                            {\n                                field: 'pert_idose',\n                                display: 'text'\n                            },\n                            {\n                                field: 'pert_itime',\n                                display: 'text'\n                            },\n                            {\n                                field: 'pert_type',\n                                display: ['color']\n                            }],\n                        toolbar: utils.quickMorpheusToolbar({\n                            saveImage: false\n                        }),\n                        menu: null,\n                        autohideTabBar: true,\n                        overrideColumnDefaults: false,\n                        dataset: zscoreDataset,\n                        colorScheme: morpheus.HeatMapColorScheme.Predefined.ZS()\n                    });\n\n\n                    for (i = 0; i < accordions.length; i++) {\n                        // var panel = accordions[i].nextElementSibling;\n                        // panel.style.display = \"block\";\n                        options.$el.find('.accordion').eq(i)[0].onclick = function () {\n                            /* Toggle between adding and removing the \"active\" class,\n                             to highlight the button that controls the panel */\n                            this.classList.toggle(\"active\");\n                            /* Toggle between hiding and showing the active panel */\n                            var panel = this.nextElementSibling;\n                            if (panel.style.maxHeight){\n                                panel.style.maxHeight = null;\n                            } else {\n                                panel.style.maxHeight = (panel.scrollHeight) + \"px\";\n                            }\n                        }\n                    }\n\n                    // var selectPanel = options.$el.find('#sigSelectPanel').eq(0)[0];\n                    $accordionPicker.removeClass('active');\n                    $pickerPanel[0].style.maxHeight = null;\n                    $accordionHeatMap.addClass('active');\n                    $viewerPanel[0].style.maxHeight = $viewerPanel[0].scrollHeight + \"px\";\n                    $heatmap[0].scrollIntoView();\n                    $customButtons.find('[name=load-text]').text('');\n                }\n            }).fail(function (err) {\n                morpheus.FormBuilder.showMessageModal({\n                    title: 'Error',\n                    html: err\n                });\n            });\n        });\n\n        $accordionPicker.click();\n\n        var object = options.object;\n        object.cellSet = cellSet;\n        object.checkBoxColumn = checkBoxColumn;\n        object.pertIdToItem = pertIdToItem;\n        exports.changeTabHeader(object);\n    });\n};\n\nfunction setupHeader(object) {\n  setupExportOptions(object);\n}\n\nfunction setupExportOptions(object) {\n    var $el = object.$el;\n    $el.find('.command-out-links').show();\n    var $exportOptions = $el.find('.export-options');\n    var exportOptionsHtml = '<input type=\"radio\" name=\"exportType\" value=\"0\" class=\"export-radio\">' +\n        'Export the z-score data for the selected signatures (.gct, version 1.3)</input><br>';\n    $exportOptions.html(exportOptionsHtml);\n    $el.find('.export-btn-confirm').on('click',{object:object},function(e) {\n        executeExport(e.data.object);\n    });\n    $el.find('.export-btn-cancel').on('click',{object:object},function(e) {\n        e.data.object.$el.find('.export-modal').modal('hide');\n    });\n    $el.find('.export-btn').on('click',{$el:object.$el},function(e) {\n        e.data.$el.find('.export-warning').html('');\n        e.data.$el.find('.export-pending').html('');\n    });\n}\n\nfunction executeExport(object) {\n    var $el = object.$el;\n    var $exportWarning = $el.find('.export-warning');\n    var $exportPending = $el.find('.export-pending');\n    $exportWarning.html('');\n    var inputType = $('input[name=\"exportType\"]:checked').val();\n    var fileName = $el.find('.export-filename-prompt').val();\n    fileName = fileName ? fileName : 'command_output';\n\n    if(!inputType) {\n      $exportWarning.html('No option selected');\n    }\n    else {\n        if(inputType==0) {\n            if (!morpheus.Util.endsWith(fileName.toLowerCase(), '.gct')) {\n                fileName += '.gct';\n            }\n            var pertIds = object.checkBoxColumn.getSelection();\n            var sigIds = [];\n            pertIds.forEach(function (id) {\n                sigIds = sigIds.concat(object.pertIdToItem.get(id).sig_id);\n            });\n            if (object.cellSet.size() > 0) {\n                sigIds = sigIds.filter(function (id) {\n                    return object.cellSet.has(id.split('_')[1]);\n                });\n            }\n            if(sigIds.length === 0) {\n                $exportWarning.html('Must select one or more valid perturbagens from the table');\n                return;\n            }\n            else if(sigIds.length > 100) {\n                $exportWarning.html('Cannot export: maximum signature limit of 100');\n                var exportConfirm = confirm(\"The maximum amount of signatures downloadable at one time is 100. \" +\n                  \"If you confirm, Command will download only the first 100 signatures. Do you wish to continue?\");\n                if (exportConfirm) {\n                  $exportPending.html('Saving data...');\n                  $exportWarning.html('');\n                  saveSigsAsGct(sigIds.slice(0,100),fileName)\n                    .done( function() {\n                      $el.find('.export-modal').modal('hide');\n                    })\n                    .fail( function() {\n                      $exportPending.html('');\n                      $exportWarning.html('ERROR: Could not export. Please try again later.');\n                    });\n                }\n                else {\n                  $el.find('.export-modal').modal('hide');\n                }\n            }\n            else {\n                $exportPending.html('Saving data...');\n                saveSigsAsGct(sigIds,fileName)\n                .done( function() {\n                    $el.find('.export-modal').modal('hide');\n                })\n                .fail( function() {\n                    $exportPending.html('');\n                    $exportWarning.html('ERROR: Could not export. Please try again later.');\n                });\n            }\n        }\n    }\n};\n\nfunction saveSigsAsGct(sigIds, fileName) {\n    var d = $.Deferred();\n    zs.getZScoreDataset(sigIds).done(function (zscoreDataset) {\n        if (zscoreDataset != null) {\n            var writer = new morpheus.GctWriter();\n            var blobs = [];\n            var textArray = [];\n            var proxy = {\n                push: function (text) {\n                    textArray.push(text);\n                    if (textArray.length === 10000) {\n                        var blob = new Blob([textArray.join('')], {type: 'text/plain;charset=charset=utf-8'});\n                        textArray = [];\n                        blobs.push(blob);\n                    }\n                },\n                join: function () {\n                    if (textArray.length > 0) {\n                        var blob = new Blob([textArray.join('')], {type: 'text/plain;charset=charset=utf-8'});\n                        blobs.push(blob);\n                        textArray = [];\n                    }\n\n                    var blob = new Blob(blobs, {type: 'text/plain;charset=charset=utf-8'});\n                    saveAs(blob, fileName, true);\n                }\n            };\n            writer.write(zscoreDataset, proxy);\n            d.resolve();\n        }\n    }).fail(function (err) {\n        d.reject(err);\n    });\n    return d;\n}\n\nexports.changeTabHeader = function(tabObject) {\n    // showHeaderButtons(tabObject);\n    // $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/sig.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/table.js":
/*!*******************************************************!*\
  !*** ./public/js/local/command/dist/actions/table.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// function doesn't work on dev.clue.io\nexports.show = function(options) {\n    exports.changeTabHeader(options.object);\n    var args = options.ids;\n    args[0] = args[0].toLowerCase();\n    var fields = args[1];\n    fields = fields.substring(1, fields.length - 1); // remove ()\n    fields = fields.split(' ');\n    var columns = fields.map(function (field) {\n        return {\n            field: field,\n            name: field\n        };\n    });\n    var inputNameToApi = {\n        pert: 'perts',\n        perts: 'perts',\n        perturbagen: 'perturbagen',\n        perturbagens: 'perturbagens',\n        profile: 'profiles',\n        profiles: 'profiles',\n        sig: 'sigs',\n        sigs: 'sigs',\n        signature: 'sigs',\n        signatures: 'sigs'\n    };\n    var queryTokens = args.slice(2);\n    var d = $.Deferred();\n    if (inputNameToApi[args[0]] !== undefined) {\n        searchTerms.getSearchTerms(tokens, {type: 'pert'}, true).done(function (result) {\n            var ids = result.ids;\n            var filter = {\n                fields: fields,\n                where: {\n                    pert_id: {inq: ids}\n                }\n            };\n            var coll = inputNameToApi[args[0]];\n            $.ajax(clue.API_URL + '/api/' + coll + '/?filter=' +\n                JSON.stringify(filter)).fail(function () {\n                d.reject();\n            }).done(function (results) {\n                if (results.length === 0) {\n                    return d.reject('No matching perturbagens found.');\n                }\n                d.resolve();\n                return new tablelegs.Table({\n                    height: '412px',\n                    columnPicker: true,\n                    tableClass: 'slick-table slick-bordered-table slick-hover-table',\n                    select: true,\n                    search: true,\n                    export: true,\n                    rowHeight: 18,\n                    $el: options.$el,\n                    columns: columns,\n                    items: results\n                });\n            });\n        });\n    } else {\n        d.reject('First argument must be gene or pert');\n    }\n    return d;\n//https://api.clue.io/explorer/resources\n// definitions\n};\n\nexports.changeTabHeader = function(tabObject) {\n    $('#headerButtonRow').hide();\n    $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/table.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/target.js":
/*!********************************************************!*\
  !*** ./public/js/local/command/dist/actions/target.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.show = function(options) {\n    var groupBy = __webpack_require__(/*! Shared/groupBy.js */ \"./public/js/local/command/dist/shared/groupBy.js\");\n    options.dbField = 'target';\n    options.lcField = 'target';\n    options.capitalizedField = 'Target';\n    options.command = 'target';\n    groupBy.groupByShow(options);\n};\n\nexports.changeTabHeader = function(tabObject) {\n    // var groupBy = require('Shared/groupBy.js');\n    // groupBy.changeTabHeader(tabObject);\n\n\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/target.js?");

/***/ }),

/***/ "./public/js/local/command/dist/actions/tas.js":
/*!*****************************************************!*\
  !*** ./public/js/local/command/dist/actions/tas.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.show = function(options) {\n    exports.changeTabHeader(options.object);\n    var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n    var ids = options.ids;\n    var $div = $('<div class=\"col-xs-12\"><div data-name=\"header\"></div><div' +\n        ' data-name=\"vis\"></div></div>');\n    var $heatMap = $div.find('[data-name=vis]');\n    var p = $.ajax(clue.API_URL + '/api/perts?filter=' + JSON.stringify({\n            fields: ['pert_id', 'tas', 'target', 'moa', 'cell_tas', 'pert_iname', 'pert_type'],\n            where: {pert_id: {inq: ids}}\n        }));\n    $div.appendTo(options.$el);\n    p.done(function (results) {\n        // create a cell by pert matrix\n        var cellIdToIndex = new morpheus.Map();\n        var cellLines = ['Summary'].concat(clue.CORE_CELL_LINES);\n        for (var j = 0; j < cellLines.length; j++) {\n            cellIdToIndex.set(cellLines[j], j);\n        }\n        var matrix = [];\n        var ncols = cellIdToIndex.size();\n        var pertIds = [];\n        var pertNames = [];\n        var pertTypes = [];\n        var targets = [];\n        var moas = [];\n        for (var i = 0; i < results.length; i++) {\n            var result = results[i];\n\n            pertIds.push(result.pert_id);\n            pertNames.push(result.pert_iname);\n            pertTypes.push(result.pert_type);\n            targets.push(result.target);\n            moas.push(result.moa);\n            var matrixRow = new Float32Array(ncols);\n            for (var j = 0; j < ncols; j++) {\n                matrixRow[i] = NaN;\n            }\n            matrixRow[0] = result.tas;\n            for (var j = 0, ncells = result.cell_tas.length; j < ncells; j++) {\n                var cellTas = result.cell_tas[j];\n                var columnIndex = cellIdToIndex.get(cellTas.cell_id);\n                if (columnIndex === undefined) {\n                    continue;\n                }\n                matrixRow[columnIndex] = cellTas.tas;\n            }\n\n            matrix.push(matrixRow);\n        }\n        var dataset = new morpheus.Dataset({\n            name: 'TAS',\n            array: matrix,\n            dataType: 'Float32',\n            rows: matrix.length,\n            columns: matrix[0].length\n        });\n        dataset.getRowMetadata().add('id').array = pertIds;\n        dataset.getRowMetadata().add('name').array = pertNames;\n        dataset.getRowMetadata().add('type').array = pertTypes;\n        dataset.getRowMetadata().add('moa').array = moas;\n        dataset.getRowMetadata().add('target').array = targets;\n        dataset.getColumnMetadata().add('id').array = cellLines;\n\n        new morpheus.HeatMap({\n            toolbar: utils.quickMorpheusToolbar(),\n            menu: null,\n            autohideTabBar: true,\n            popupEnabled: true,\n            el: $heatMap,\n            dataset: dataset,\n            rows: [\n                {\n                    field: 'name',\n                    display: 'text'\n                }, {\n                    field: 'type',\n                    display: 'color'\n                }, {\n                    field: 'target',\n                    display: 'text'\n                }, {\n                    field: 'moa',\n                    display: 'text'\n                }, {\n                    field: 'id',\n                    display: 'text'\n                }],\n            renderReady: function (heatMap) {\n                var legend = new morpheus.HistogramLegend(heatMap.getProject().getFullDataset(),\n                    heatMap.getHeatMapElementComponent().getColorScheme(), null);\n                legend.setName('Legend');\n                legend.setBinSize(0.1);\n                legend.repaint();\n                $(legend.canvas).appendTo($div.find('[data-name=header]'));\n            },\n            colorScheme: {\n                type: 'fixed',\n                map: [\n                    {\n                        value: 0,\n                        color: 'white'\n                    }, {\n                        value: 0.2,\n                        color: 'white'\n                    },\n                    {\n                        value: 1,\n                        color: 'green'\n                    }]\n            }\n        });\n\n    }).fail(function () {\n        tryAgain();\n    });\n};\n\nexports.changeTabHeader = function(tabObject) {\n    $('#headerButtonRow').hide();\n    $('#inputInterpretationDropdown').hide();\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/actions/tas.js?");

/***/ }),

/***/ "./public/js/local/command/dist/command.js":
/*!*************************************************!*\
  !*** ./public/js/local/command/dist/command.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n// var clue = (typeof clue !== 'undefined') ? clue : {};\n// this doesn't look necessary anymore (already have clue and tablelegs when launching from /command)\n// var clue = require('./../../lib/js/clue.js');\n\nvar search = __webpack_require__(/*! Shared/search.js */ \"./public/js/local/command/dist/shared/search.js\");\nvar core = __webpack_require__(/*! Shared/core.js */ \"./public/js/local/command/dist/shared/core.js\");\n\n$(document).ready(function () {\n\n    $(\"#coaching_tip_trigger\").attr(\"data-tooltip-class\", 'coaching_tips');\n    $(\"#coaching_tip_trigger\").attr(\"data-popover-config\",\n        '[{\"target_id\": \"homepage-search\", \"content_id\": \"tt_command_search\", \"placement\": \"bottom\"}]');\n    $(\"#coaching_tip_trigger\").removeClass(\"no-tip\");\n\n  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||\n      window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n  var format = d3.format(',i');\n  var duration = 300;\n  var start = +(new Date);\n  var numbers = $('.animate-text');\n  var charts = $('.animate-bar');\n  var opacity = $('.animate-opacity');\n\n  //onready\n  function animTick() {\n    var now = +(new Date);\n    var elapsed = now - start;\n    var fraction = elapsed / duration;\n\n    if (fraction >= 1) {\n      numbers.each(function () {\n        var $this = $(this);\n        $this.text(format($this.data('value')));\n      });\n      charts.each(function () {\n        var $this = $(this);\n        var max = $this.data('max');\n        var value = $this.data('value');\n        var total = 100 * (value / max);\n        $this.css('width', total + '%');\n      });\n      opacity.each(function () {\n        var $this = $(this);\n        $this.css('opacity', 1);\n      });\n    } else {\n      numbers.each(function () {\n        var $this = $(this);\n        var value = Math.ceil(fraction * $this.data('value'));\n        $this.text(format(value));\n      });\n      charts.each(function () {\n        var $this = $(this);\n        var max = $this.data('max');\n        var value = $this.data('value');\n        var total = 100 * (value / max);\n        var value = Math.ceil(fraction * total);\n        $this.css('width', value + '%');\n      });\n      opacity.each(function () {\n        var $this = $(this);\n        $this.css('opacity', fraction);\n      });\n      requestAnimationFrame(animTick);\n    }\n\n  }\n\n  requestAnimationFrame(animTick);\n});\n\n\n//shared? onClueReady\nvar isProductionUrl = window.location.href.indexOf('https://clue.io') !== -1 ||\n    window.location.href.indexOf('https://qa.clue.io') !== -1;\n\nvar getTempUserKeyPromise = null;\n\n\n$(document).one('clueReady', function () {\n\n      if (clue.USER_KEY == null) {\n        getTempUserKeyPromise = clue.getTempApiKey();\n        getTempUserKeyPromise.done(function (obj) {\n          clue.USER_KEY = obj.user_key;\n        });\n      }\n\n      var $search = $('#homepage-search');\n      var tabManager = new morpheus.TabManager({\n        rename: true,\n        dropTab: true,\n        autohideTabBar: false\n      });\n\n      tabManager.on('remove', function () {\n      });\n      tabManager.on('add', function () {\n      });\n      tabManager.on('change', function () {\n        var activeTab = tabManager.getActiveTab();\n        if(activeTab && activeTab.command) {\n          $search.val(activeTab != null ? activeTab.command : '');\n          // changes url when toggling between tabs. desired behavior?\n          window.history.pushState({q: activeTab.command}, '', (window.location.pathname === '/' ? '/command' : '') + '?q=' + activeTab.command);\n          if (activeTab != null && activeTab.missingTerms != null && activeTab.missingTerms.length > 0) {\n            search.updateMissingTerms(activeTab.missingTerms);\n          } else {\n            search.updateMissingTerms();\n          }\n        }\n\n\n          $(window).scrollTop(0);\n      });\n\n      tabManager.$nav.addClass('app-tabs-light');\n      tabManager.$tabContent.addClass('app-tabs-content');\n      tabManager.$nav.appendTo($('#app-tabs-nav'));\n      tabManager.$tabContent.appendTo($('#app-content'));\n\n      function getAutocomplete(token, options) {\n        var d = $.Deferred();\n        if (token === '') {\n          d.resolve([]);\n          return d;\n        }\n\n        var promises = [];\n        var subtypes = [];\n        // TODO genes\n        var type = options[core.TYPE_CELL] ? 'cell' : options[core.TYPE_GENE] ? 'gene' : 'pert';\n\n        // if (options[TYPE_PCL]) {\n        //   subtypes.push(TYPE_PCL);\n        // }\n        // if (options[TYPE_MOA]) {\n        //   subtypes.push(TYPE_MOA);\n        // }\n        var filter = {\n          fields: ['term', 'subtype', 'nids'],\n          order: 'order ASC, iterm ASC', // TODO add order to term\n          where: {\n            autocomplete: true,\n            iterm: {regexp: '/.*' + token.toLowerCase() + '.*/'},\n            type: type\n          }\n        };\n        if (subtypes.length > 0) {\n          filter.where.subtype = {inq: subtypes};\n        }\n\n        $.ajax(clue.API_URL + '/api/search_terms/?filter=' + JSON.stringify(filter)).done(function (results) {\n          d.resolve(results);\n        }).fail(function () {\n          d.resolve([]);\n        });\n\n        return d;\n      }\n\n      $('#app-content').on('click', '.code-box', function (e) {\n        e.preventDefault();\n        var text = $(this).data('example');\n        var tokens = text.split(',');\n        var s = [];\n        tokens.forEach(function (token) {\n          if (token.indexOf(' ') !== -1) {\n            s.push('\"' + token + '\"');\n          } else {\n            s.push(token);\n          }\n        });\n\n        var searchText = s.join(' ');\n        $search.val(searchText);\n        search.search(searchText, tabManager, true, commandHistory);\n      });\n\n      if (isProductionUrl) {\n      // if (1) {\n        var prodActions = new morpheus.Set();\n        prodActions.add('/moa');\n        prodActions.add('/target');\n        prodActions.add('/assay');\n        prodActions.add('/gene-space');\n        prodActions.add('/conn');\n        prodActions.add('/sig');\n        prodActions.add('/gex');\n        //  prodActions.add('/cell-space');\n        prodActions.add('/home');\n\n        core.actions = core.actions.filter(function (action) {\n          return prodActions.has(action.command);\n        });\n      }\n      // put help at end\n      var homeIndex = -1;\n      for (var i = 0; i < core.actions.length; i++) {\n        if (core.actions[i].command === '/home') {\n          homeIndex = i;\n          break;\n        }\n      }\n      var homeAction = core.actions[homeIndex];\n      core.actions.splice(homeIndex, 1);\n      core.actions.push(homeAction);\n\n      function autocompleteSetup(options) {\n        morpheus.Util.autosuggest({\n          $el: options.$el,\n          suggestWhenEmpty: false,\n          history: options.history,\n          filter: function (tokens, response) {\n            var token = tokens != null && tokens.length > 0 ? tokens[tokens.selectionStartIndex]\n                : '';\n            token = token.trim();\n            var command = options.commands && tokens != null && tokens.length > 0 ? tokens[0] : '';\n            // only autocomplete slashes if the slash is string has / at beginning\n            if (command == token && token[0] === '/') {\n              var matches = [];\n              matches.push({\n                skip: true,\n                label: '<small style=\"font-weight: normal; color: gray; margin-left: 10px\">Commands:</small>'\n              });\n              if (token.length === 1) { // just slash entered, list all\n                core.actions.forEach(function (action) {\n                  var input = action.input[0];\n                  var min = input.min != null ? input.min : 1;\n                  var params = '';\n                  if (input.name === core.TYPE_PERT) {\n                    params = '[MoAs, PCLs, gene symbols or families, ' +\n                        ' perturbagen' +\n                        ' names or ids, assays]';\n                  } else if (input.name === core.TYPE_GENE) {\n                    params = '[gene symbols or families]';\n                  } else if (input.name === core.TYPE_PCL) {\n                    params = '[PCLs]';\n                  } else if (input.name === core.TYPE_CELL) {\n                    params = '[lineages, ids, or cell collections]';\n                  }\n                  matches.push({\n                    clear: true,\n                    show: true,\n                    value: action.command + ' ',\n                    label: '<span style=\"font-weight: bold; color: #F15A22;\">' + action.command\n                    + '</span> <small style=\"color:gray;\">' + params + '</small><small' +\n                    ' class=\"pull-right\" style=\"padding-right:4px;line-height:20px;color:gray;\">' + action.help + '</small>'\n                  });\n                });\n              } else {\n                var replaceRegex = new RegExp('(' + morpheus.Util.escapeRegex(token) + ')', 'i');\n                core.actions.forEach(function (action) {\n                  if (replaceRegex.test(action.command)) {\n                    var input = action.input[0];\n                    var min = input.min != null ? input.min : 1;\n                    var params = '';\n                    if (input.name === core.TYPE_PERT) {\n                      params = '[MoAs,PCLs, gene symbols, gene families, ' +\n                          ' perturbagen' +\n                          ' names or ids]';\n                    } else if (input.name === core.TYPE_GENE) {\n                      params = '[gene symbols or gene families]';\n                    } else if (input.name === core.TYPE_PCL) {\n                      params = '[PCLs]';\n                    } else if (input.name === core.TYPE_CELL) {\n                      params = '[lineages, ids, or cell collections]';\n                    }\n                    matches.push({\n                      clear: true,\n                      value: action.command + ' ',\n                      show: true,\n                      label: '<span style=\"font-weight: bold; color: #F15A22;\">' +\n                      action.command.replace(replaceRegex, '<b>$1</b>')\n                      + '</span> <small>' + params + '</small><small' +\n                      ' class=\"pull-right\" style=\"line-height:20px;color:gray\">' + action.help + '</small>'\n                    });\n                  }\n                });\n              }\n              response(matches);\n            } else if (token.length >= 2) {\n              // if (autocompleteXhr) {\n              //   autocompleteXhr.abort();\n              // }\n              // limit to the input the command takes\n\n              var selectedAction = null;\n              if (tokens[0][0] === '/') {\n                var actionToken = tokens[0].toLowerCase();\n                for (var i = 0; i < core.actions.length; i++) {\n                  var action = core.actions[i];\n                  if (actionToken === action.command) {\n                    selectedAction = action;\n                    break;\n                  }\n                }\n              }\n              var autocompleteOptions = options;\n              if (selectedAction != null) {\n                if (selectedAction.input[0].name === core.TYPE_PCL) {\n                  autocompleteOptions = {'PCL': true};\n                } else if (selectedAction.input[0].name === core.TYPE_GENE) {\n                  autocompleteOptions = {'gene': true};\n                } else if (selectedAction.input[0].name === core.TYPE_CELL) {\n                  autocompleteOptions = {'cell': true};\n                }\n\n              }\n              getAutocomplete(token, autocompleteOptions).done(function (results) {\n                var matches = [];\n                var replaceRegex = new RegExp('(' + morpheus.Util.escapeRegex(token) + ')', 'i');\n                var lastType = '';\n                results.forEach(function (result) {\n                  var value = result.term;\n                  var quotedValue = value;\n\n                  if (quotedValue.indexOf(' ') !== -1) {\n                    quotedValue = '\"' + quotedValue + '\"';\n                  }\n                  if (lastType !== result.subtype) {\n                    lastType = result.subtype;\n                    var type;\n                    if (result.subtype === core.TYPE_GENE) {\n                      type = 'Gene';\n                    } else if (result.subtype === core.TYPE_PCL) {\n                      type = 'Perturbagen Class';\n                    } else if (result.subtype === core.TYPE_MOA) {\n                      type = 'MoA';\n                    } else if (result.subtype === core.TYPE_ID) {\n                      type = autocompleteOptions.cell ? 'Cell' : (autocompleteOptions.gene ? 'Gene' : 'Perturbagen');\n                    } else if (result.subtype === core.TYPE_LINEAGE) {\n                      type = 'Lineage';\n                    } else if (result.subtype === core.TYPE_COLLECTION) {\n                      type = 'Collection';\n                    } else if (result.subtype === core.TYPE_GENE_FAMILY) {\n                      type = 'Gene Family';\n                    } else if (result.subtype === core.TYPE_ASSAY) {\n                      type = 'Assay';\n                    } else {\n                      type = result.subtype;\n                    }\n                    matches.push({\n                      label: '<small style=\"font-weight: normal; color: gray; margin-left: 10px\">' + type + ':</small>'\n                    });\n                  }\n                  var label = '<span style=\"margin-left:6px\">'\n                      + value.replace(replaceRegex, '<b>$1</b>') + '</span>';\n                  // if (lastType !== TYPE_PERT) {\n                  //   label += '<span style=\"color: gray;\"> (' + morpheus.Util.intFormat(result.nids) + (lastType ===\n                  // TYPE_CELL ? ' cell' : ' perturbagen') + (result.nids === 1 ? '' : 's') + ')</span>'; }\n\n                  if (lastType !== 'id') {\n                    var name = autocompleteOptions.cell ? 'Cell' : (autocompleteOptions.gene ? 'Gene' : 'Perturbagen');\n                    label += '<span style=\"color: gray;\"> (' + morpheus.Util.intFormat(result.nids) + ' ' + name +\n                        (result.nids > 1 ? 's' : '') + ')</span>';\n                  }\n                  matches.push({\n                    value: quotedValue,\n                    label: label\n                  });\n                });\n\n                response(matches);\n              });\n            }\n            else {\n              response([]);\n            }\n          },\n          select: function () {\n          }\n        });\n      }\n\n      var commandHistory = [];\n\n      window.addEventListener('popstate', function (event) {\n        if (event.state !== null) {\n          $search.val(event.state.q);\n          search.search($search.val(), tabManager, false, null);\n        }\n      });\n      // else {\n      //   if (window.location.pathname === '/command') {\n      //     // search('/help');\n      //   }\n      // }\n\n      function createHome(tabManager) {\n        // make the thing here\n        var $homeTab = $('#home-content');\n        // $homeTab.append(':)');\n        tabManager.add({\n          $el: $homeTab,\n          command: '/home',\n          title: '/home  <span class=\"fa fa-home home-icon\"></span>',\n          closeable: false,\n          focus: true,\n          object: {\n            command: '/home',\n            reload: true,\n            commandName: '/home'\n          }\n        });\n        var $homeIcon = $('.fa-home');\n        $homeIcon.parents('a').data('morpheus-pin', true);\n        $homeIcon.parents('li').removeClass('morpheus-sortable');\n        $homeIcon.parents('li').addClass('home-tab');\n        $homeIcon.parents('a').addClass('home-tab');\n        $homeTab.show();\n\n        var $homeCommandList = $('#availableCommands');\n        $homeCommandList.html('');\n        var commandsAdded = 0;\n        var html = '<table class=\"commands-table\"><tr>';\n        var availableCommands = [];\n        for(var i=0; i<core.actions.length; i++){\n          var action = core.actions[i];\n          if(action.home !='hidden') {\n            availableCommands.push(action.command);\n            if(commandsAdded>0 && commandsAdded%2==0) {\n              html += '</tr><tr><td class=\"table-row-margin\"></td></tr><tr><td data-name=\"' +\n                action.command + '\" class=\"col-md-6 available-command-button\">';\n            }\n            else if(commandsAdded==0) {\n              html += '<td data-name=\"' + action.command + '\" class=\"col-md-6 available-command-button\">';\n            }\n            else {\n              html += '<td class=\"table-col-margin\"></td><td data-name=\"' +\n                action.command + '\" class=\"col-md-6 available-command-button\">'\n            }\n            commandsAdded++;\n\n            // make button, fill in action.command and action.home\n            // add click listener\n            //\n            // var tempHtml = '<td class=\"col-md-5\">';\n\n            var tempHtml = '<h4 class=\"available-command-title font-turquoise\">' + action.command + '</h4>' +\n              '<p class=\"available-command-text\">' + action.home + '</p></td>';\n            html += tempHtml;\n            var $commandButton = $('.available-command-button');\n            // $homeCommandList.append($commandButton);\n          }\n        }\n        if (commandsAdded%2==1) {\n          var tempHtml = '<td class=\"empty-command-button\"><div class=\"available-command-body\"><h4 class=\"available-command-title font-turquoise\">empty</h4></td></tr>';\n          html += tempHtml;\n        }\n        html += '</table>';\n        $homeCommandList.html(html);\n        var commandButtons = $('.available-command-button');\n        $(\"#availableCommands\").on(\"click\", \".available-command-button\", function() {\n          $search.val($(this).data('name') + ' ');\n          $search.focus();\n        });\n      }\n\n      createHome(tabManager);\n\n      var queryString = morpheus.Util.getWindowSearchObject();\n      if (queryString.q) {\n          $search.val(decodeURIComponent(queryString.q[0]));\n          if (getTempUserKeyPromise != null) {\n              getTempUserKeyPromise.done(function () {\n                  search.search($search.val(), tabManager, false, null);\n              });\n          } else {\n            search.search($search.val(), tabManager, false, null);\n          }\n      }\n\n      var $searchStart = $('#homepage-search-start');\n      autocompleteSetup({\n        $el: $searchStart,\n        history: function (response) {\n          var matches = [];\n          matches.push({\n            skip: true,\n            label: '<small style=\"font-weight: normal; color: gray; margin-left:' +\n            ' 10px\">History:</small>'\n          });\n          commandHistory.forEach(function (text) {\n            matches.push({\n              clear: true,\n              value: text,\n              label: '<span style=\"color: lightgrey;\">' + text + '</span>'\n            });\n          });\n          response(matches);\n        },\n        commands: true,\n        'pert': true,\n        'PCL': true,\n        'moa': true\n      });\n      $searchStart.on('keyup', function (e) {\n        if (e.which === 13) {\n          var text = $searchStart.val().trim();\n          if (text !== '') {\n            //$search.val(text);\n            text = text.replace(/[\\r\\f\\n\\t]/g, ' ');\n            window.location.href = '/command?q=' + text;\n          }\n        }\n      });\n\n      autocompleteSetup({\n        $el: $search,\n        history: function (response) {\n          var matches = [];\n          matches.push({\n            skip: true,\n            label: '<small style=\"font-weight: normal; color: gray; margin-left:' +\n            ' 10px\">History:</small>'\n          });\n          commandHistory.forEach(function (text) {\n            matches.push({\n              clear: true,\n              value: text,\n              label: '<span style=\"color: lightgrey;\">' + text + '</span>'\n            });\n          });\n          response(matches);\n\n        },\n        commands: true,\n        'pert': true,\n        'PCL': true,\n        'moa': true\n      });\n      $search.on('keyup', function (e) {\n        if (e.which === 13) {\n          var text = $search.val().trim();\n          if (text !== '') {\n            text = text.replace(/[\\r\\f\\n\\t]/g, ' ');\n            search.search(text, tabManager, true, commandHistory);\n            // search(text, true);\n          }\n        }\n      });\n\n}\n\n)\n;\n\n\n\n//# sourceURL=webpack:///./public/js/local/command/dist/command.js?");

/***/ }),

/***/ "./public/js/local/command/dist/shared/connData.js":
/*!*********************************************************!*\
  !*** ./public/js/local/command/dist/shared/connData.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.filterIds = function(ids,assay) {\n  var icollection = assay;\n  if(assay==='L1000') { icollection='TS_v1.1'; }\n  var p = $.Deferred();\n  $.ajax(clue.API_URL + '/api/perts?filter=' + JSON.stringify({\n      fields: ['pert_id', 'pert_icollection'],\n      where: {\n        pert_id: {inq: ids}\n      }\n    }))\n    .done(function (results) {\n      var ids = _.filter(results, function (obj) {\n        return obj.pert_icollection.indexOf(icollection) > -1;\n      }).map(function (obj) { return obj.pert_id });\n      p.resolve(ids);\n    })\n    .fail(function() {\n      console.log('could not find perts to filter ids');\n      p.resolve([]);\n    });\n  return p;\n};\nexports.getData = function(ids,assay) {\n  var p = $.Deferred();\n  exports.filterIds(ids,assay).done(function(ids) {\n    if (assay === 'L1000') {\n      var d = exports.getL1000(ids);\n      d.done(function (dataset) {\n        p.resolve(dataset);\n      }).fail(function (e) {\n          console.log(e)\n          p.reject();\n        });\n    }\n    else {\n      var d = exports.getProteomics(ids, assay);\n      d.done(function (dataset) {\n        p.resolve(dataset);\n      })\n        .fail(function () {\n          p.reject();\n        });\n    }\n  });\n  return p;\n};\n\nexports.getL1000 = function(ids) {\n  var p = $.Deferred();\n  $.ajax(clue.API_URL + '/api/perts?filter=' + JSON.stringify({\n      fields: ['pert_id', 'pert_icollection'],\n      where: {\n        pert_id: {inq: ids}\n      }\n    })).done(function (results) {\n    var tsObjects = _.filter(results, function(obj){\n      return obj.pert_icollection.indexOf('TS_v1.1') > -1; });\n    var urls = tsObjects.map(function (obj) {\n      return 'https://s3.amazonaws.com/macchiato.clue.io/builds/touchstone/v1.1/arfs/' + obj.pert_id.replace(/ccsbbroad/i, 'CCSBBROAD') + '/';\n    });\n    if(urls.length===0) {\n      p.reject();\n    }\n    else {\n      clue.getGutcResults({\n        urls: urls,\n        pclCell: true,\n        pclSummary: true\n      }).done(function (dataset) {\n        clue.ICV.ANNOTATION_LINES_ROWS = clue.ICV.L1000_ANNOTATION_LINES_ROWS;\n        clue.ICV.ANNOTATION_LINES_COLUMNS = clue.ICV.L1000_ANNOTATION_LINES_COLUMNS;\n        clue.ICV.prepareDataset(\n          dataset, {\n            dataType: clue.ICV.DataType.GUTC,\n            annotate: true,\n            pcls: clue.ICV.PCL_METADATA\n          });\n        p.resolve(dataset);\n      })\n      .fail(function () {\n        p.reject();\n      })\n    }\n  })\n  .fail(function() {\n    p.reject();\n  });\n  return p;\n};\n\n/**\n *\n * @param options.rowIds\n * @param options.symmetric\n * @param options.columnIds\n * @param options.cellLine\n * @return Promise that resolves to a dataset.\n */\nexports.getProteomics = function(ids, assay) {\n  // need pert_id on both\n  // https://dev-api.clue.io/data-api/slice/?name=P100_all_connectivities&rfield=id&rfield=pert_id&cfield=id&cfield=pert_id&cquery=pert_id:(BRD-A14634327)\n  var d = $.Deferred();\n  var p;\n  // todo bw: rid/cid info is still weird for CCSBBROAD id's\n  var queryString = '&rfield=id&rfield=pert_id&cfield=id&cfield=cell_id&cfield=pert_id&cquery=pert_id:(' + ids.join(' ') +\n    ')';\n  p = morpheus.DatasetUtil.read(clue.API_URL + '/data-api/slice/?name=' + assay + '_all_connectivities' + queryString);\n  p.then(function (dataset) {\n    clue.ICV.ANNOTATION_LINES_ROWS = clue.ICV.PROT_ANNOTATION_LINES_ROWS;\n    clue.ICV.ANNOTATION_LINES_COLUMNS = clue.ICV.PROT_ANNOTATION_LINES_COLUMNS;\n    clue.ICV.prepareDataset(\n      dataset, {\n        dataType: assay,\n        annotate: true\n      });\n    dataset.getColumnMetadata().getByName('pert_iname').setName('name');\n    dataset.getRowMetadata().getByName('pert_iname').setName('name');\n    dataset.getColumnMetadata().getByName('pert_id').setName('_id');\n    d.resolve(dataset);\n  }).catch(function () {\n    d.reject('Please try again.');\n  });\n  return d;\n}\n\n\n//# sourceURL=webpack:///./public/js/local/command/dist/shared/connData.js?");

/***/ }),

/***/ "./public/js/local/command/dist/shared/core.js":
/*!*****************************************************!*\
  !*** ./public/js/local/command/dist/shared/core.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.TYPE_ASSAY = 'assay';\nexports.TYPE_PERT = 'pert';\nexports.TYPE_GENE = 'gene';\nexports.TYPE_GENE_FAMILY = 'gene_family';\nexports.TYPE_PCL = 'PCL';\nexports.TYPE_MOA = 'moa';\nexports.TYPE_CELL = 'cell';\nexports.TYPE_ID = 'id';\nexports.TYPE_LINEAGE = 'lineage';\nexports.TYPE_COLLECTION = 'collection';\n\nexports.actions = [\n  {\n    command: '/class-selectivity',\n    input: [\n      {\n        name: exports.TYPE_PCL,\n        min: 2\n      }],\n    example: [\n      {\n        desc: 'View the class selectivity for' +\n        ' compounds to the CP_GLYCOGEN_SYNTHASE_KINASE_INHIBITOR and CP_AURORA_KINASE_INHIBITOR' +\n        ' PCLs',\n        command: 'CP_GLYCOGEN_SYNTHASE_KINASE_INHIBITOR,CP_AURORA_KINASE_INHIBITOR'\n      }],\n    help: 'Class selectivity of perturbagens to PCLs',\n    home: 'hidden',\n    show: function(options){\n      var classSelectivity = __webpack_require__(/*! Actions/class-selectivity.js */ \"./public/js/local/command/dist/actions/class-selectivity.js\");\n      classSelectivity.show(options)}\n  }, {\n    command: '/hex',\n    input: [{name: 'chromatin'}],\n    help: 'View the baseline chromatin profile',\n    home: 'hidden',\n    show: function(options){\n      var hex = __webpack_require__(/*! Actions/hex.js */ \"./public/js/local/command/dist/actions/hex.js\");\n      hex.show(options)\n    }\n  }, {\n    command: '/home',\n    input: [{min: 0}],\n    help: 'Show command homepage',\n    home: 'Return to the Command homepage (this page).',\n    show: function(options){\n      // this should never be called\n    }\n  }, {\n    command: '/table',\n    input: [\n      {\n        name: 'choice',\n        values: ['gene', 'pert', 'profile', 'sig']\n      }],\n    help: 'View a table of meta data for genes, profiles, perturbagens, or signatures',\n    home: 'hidden',\n    argsHelp: '<code>/table pert (pert_iname pert_id canonical_smiles' +\n    ' inchi_key molecular_formula) BRAF imatinib</code>' +\n    ' will' +\n    ' show a table with the fields pert_iname, pert_id, canonical_smiles, inchi_key, and molecular_formula for' +\n    ' perturbagens that target BRAF or are named imatinib.<br /><br /><code>/table gene' +\n    ' (entrez_id affymetrix_id) BRAF KRAS</code> will show a table with the fields entrez_id and' +\n    ' affymetrix_id for BRAF and KRAS.<br /><br /><code>/table sig (pert_iname pert_type cell_id' +\n    ' pct_self_rank_q25) BRAF</code> will show a table with pert_iname, pert_type, cell_id, and' +\n    ' pct_self_rank_q25' +\n    '  for BRAF' +\n    ' signatures<br /><br /><code>/table profile (pert_id cell_id qc_iqr) BRAF</code> shows a table with' +\n    ' pert_id' +\n    ' cell_id, and qc_iqr for all BRAF profiles.<br /><br />See <a' +\n    ' target=\"_blank\" href=\"/api\">the API</a> for description of fields.',\n    show: function(options){\n      var table = __webpack_require__(/*! Actions/table.js */ \"./public/js/local/command/dist/actions/table.js\");\n      table.show(options);\n    }\n  }, {\n    command: '/gex',\n    input: [{name: exports.TYPE_GENE}],\n    help: 'View the baseline gene expression for the specified genes',\n    home: 'View the baseline gene expression for CCLE lines. View individual cell lines, or group by different metadata fields.',\n    example: [\n      {\n        desc: 'View the baseline gene expression of BRAF in CCLE lines',\n        command: 'BRAF'\n      }, {\n        desc: 'View the baseline gene expression of SETDB1 and HRAS in CCLE lines',\n        command: 'SETDB1,HRAS'\n      }, {\n        desc: 'View the baseline gene expression of adenosine receptors in CCLE lines',\n        command: 'Adenosine receptors'\n      }],\n    show: function(options){\n      var gex = __webpack_require__(/*! Actions/gex.js */ \"./public/js/local/command/dist/actions/gex.js\");\n      gex.show(options);\n    }\n  },\n  {\n    command: '/pcl',\n    input: [\n      {\n        name: exports.TYPE_PERT,\n        min: 0\n      }],\n    example: [\n      {\n        desc: 'View PCLs for imatinib and hispidin',\n        command: 'imatinib,hispidin'\n      }, {\n        desc: 'View PCLs for perturbagens that target BRAF or TP53',\n        command: 'BRAF,TP53'\n      }, {\n        desc: 'View PCLs for all compounds that are androgren receptor agonist' +\n        ' or antagonists',\n        command: 'Androgen receptor agonist,Androgen receptor antagonist'\n      }, {\n        desc: 'View PCLs for all perturbagens that target BRAF, are named imatinib,' +\n        ' or are CDK inhibitors',\n        command: 'BRAF,imatinib,CDK inhibitor'\n      }],\n    help: 'View PCLs for the specified perturbagens',\n    home: '*DEV only* View PCLs for the specified perturbagens',\n    show: function(options) {\n      var pcl = __webpack_require__(/*! Actions/pcl.js */ \"./public/js/local/command/dist/actions/pcl.js\");\n      pcl.show(options);\n    }\n  },\n  {\n    command: '/sig',\n    input: [{name: exports.TYPE_PERT}],\n    example: [\n      {\n        desc: 'View signatures for imatinib and hispidin',\n        command: 'imatinib,hispidin'\n      }, {\n        desc: 'View signatures for perturbagens that target BRAF or TP53',\n        command: 'BRAF,TP53'\n      }, {\n        desc: 'View signatures for all compounds that are androgren receptor agonist' +\n        ' or antagonists',\n        command: 'Androgen receptor agonist,Androgen receptor antagonist'\n      }, {\n        desc: 'View signatures for all perturbagens that target BRAF, are named imatinib,' +\n        ' or are CDK inhibitors',\n        command: 'BRAF,imatinib,CDK inhibitor'\n      }],\n    help: 'View signatures for the specified perturbagens',\n    home: 'Retrieve L1000 signatures (MODZS) for perturbagens in selected cell lines. View as a heatmap or download signatures as a GCT file.',\n    show: function(options){\n      var sig = __webpack_require__(/*! Actions/sig.js */ \"./public/js/local/command/dist/actions/sig.js\");\n      return sig.show(options);\n    }\n  }\n  , {\n    command: '/gene-mod',\n    input: [{name: exports.TYPE_GENE}],\n    help: 'View z-scores for the specified landmark genes',\n    home: 'hidden',\n    show: function(options){\n      var geneMod = __webpack_require__(/*! Actions/gene-mod.js */ \"./public/js/local/command/dist/actions/gene-mod.js\");\n      geneMod.show(options);\n    }\n  }, {\n    command: '/conn',\n    input: [{name: exports.TYPE_PERT}],\n    help: 'View the connections of the specified perturbagens',\n    home: 'View and download connectivity data for a compound of interest; see top connections to CMap or internal connectivities in cell lines.',\n    example: [\n      {\n        desc: 'View connections for imatinib and hispidin',\n        command: 'imatinib,hispidin'\n      }, {\n        desc: 'View connections for perturbagens that target BRAF or TP53',\n        command: 'BRAF,TP53'\n      }, {\n        desc: 'View connections for all compounds that are androgren receptor agonist' +\n        ' or antagonists',\n        command: 'Androgen receptor agonist,Androgen receptor antagonist'\n      }, {\n        desc: 'View connections for all perturbagens that target BRAF, are named imatinib,' +\n        ' or are CDK inhibitors',\n        command: 'BRAF,imatinib,CDK inhibitor'\n      }],\n    show: function(options){\n      var conn = __webpack_require__(/*! Actions/conn.js */ \"./public/js/local/command/dist/actions/conn.js\");\n      return conn.show(options);\n    }\n  }\n  ,\n  {\n    command: '/gene-space',\n    args: '[List of gene symbols or an L1000 gene type (lm, bing, aig, ni)]',\n    help: 'List information for a list of genes or a L1000 gene type (lm, bing, aig)',\n    home: 'Learn whether gene(s) of interest are measured or inferred by L1000. For inferred genes, view correlations between inferred values and RNA-seq data. Note that information is not downloadable.',\n    input: [\n      {\n        min: 0,\n        name: exports.TYPE_GENE\n      }],\n    show: function(options){\n      var geneSpace = __webpack_require__(/*! Actions/gene-space.js */ \"./public/js/local/command/dist/actions/gene-space.js\");\n      return geneSpace.show(options);\n    }\n  }\n  ,\n  {\n    command: '/cell-space',\n    args: '[One or more lineages, ids, or collections]',\n    help: 'View information for cell lines',\n    home: '*DEV only* View information for cell lines',\n    input: [\n      {\n        min: 0,\n        name: exports.TYPE_CELL\n      }],\n    show: function(options){\n      var cellSpace = __webpack_require__(/*! Actions/cell-space.js */ \"./public/js/local/command/dist/actions/cell-space.js\");\n      cellSpace.show(options);\n    }\n  }\n// {\n// command: '/dose',\n// input: [{\n//   name: 'perturbagens',\n//   type: 'trt_cp'\n// }],\n// help: 'Dose',\n// show: function (options) {\n//   $.ajax(clue.API_URL + '/api/sigs?filter=' + JSON.stringify({\n//       fields: ['pert_id', 'distil_cc_q75', 'cell_id', 'distil_ss', 'pert_idose', 'pert_itime'],\n//       where: {\n//         pert_id: {inq: options.ids},\n//         cell_id: {inq: clue.CORE_CELL_LINES}\n//       }\n//     })).done(function (results) {\n//\n//     var x = [];\n//     var y = [];\n//     var cellIdToSeries = new morpheus.Map();\n//     for (var i = 0; i < results.length; i++) {\n//       var result = results[i];\n//       var conc = morpheus.MolarConcentration.getMicroMolarConcentration(result.pert_idose);\n//       result.conc = conc;\n//\n//     }\n//     results.sort(function (item1, item2) {\n//       var a = item1.conc;\n//       var b = item2.conc;\n//       return (a === b ? 0 : (a < b ? -1 : 1));\n//     });\n//     for (var i = 0; i < results.length; i++) {\n//       var result = results[i];\n//       var cell = result.cell_id;\n//       var pert = result.pert_id;\n//       var key = pert + ', ' + cell + ', ' + result.pert_itime;\n//       var series = cellIdToSeries.get(key);\n//       if (series === undefined) {\n//         series = {\n//           x: [],\n//           y: [],\n//           name: key,\n//           mode: 'markers'\n//         };\n//         cellIdToSeries.set(key, series);\n//       }\n//\n//       if (result.distil_cc_q75 == -666) {\n//         continue;\n//       }\n//       var tas = Math.sqrt(result.distil_ss, Math.max(0, result.distil_cc_q75)) / Math.sqrt(978);\n//       series.x.push(result.conc);\n//       series.y.push(tas);\n//     }\n//\n//     // dose by tas plot\n//     var plotlyDefaults = clue.getPlotlyDefaults2();\n//     var layout = plotlyDefaults.layout;\n//     layout.width = 700;\n//     layout.showlegend = true;\n//     layout.margin.b = 80;\n//     layout.height = 400;\n//     var config = plotlyDefaults.config;\n//     layout.xaxis.title = 'Dose \\u00B5m';\n//     layout.yaxis.title = 'CC';\n//\n//     morpheus.ChartTool.newPlot(options.$el[0], cellIdToSeries.values(), layout, config);\n//   });\n//\n// }\n// },\n  ,\n  {\n    command: '/tas',\n    input: [{name: exports.TYPE_PERT}],\n    help: 'TAS scores of the specified perturbagens',\n    home: '*DEV only* TAS scores of the specified perturbagens',\n    show: function(options){\n      var tas = __webpack_require__(/*! Actions/tas.js */ \"./public/js/local/command/dist/actions/tas.js\");\n      tas.show(options)}\n  }\n  ,\n  {\n    command: '/sar',\n    help: 'Structural and transcriptional similarity of the specified perturbagens',\n    home: '*DEV only* Structural and transcriptional similarity of the specified perturbagens',\n    // can fail because not enough arguments given or invalid arguments given\n    argsHelp: 'Typing <code>/sar perturbagen1 perturbagen2 perturbagen...</code> will' +\n    ' show' +\n    ' the' +\n    ' structural' +\n    ' and transcriptional similarity' +\n    ' of the given compounds. <br />Typing /sar perturbagen1</code> will display' +\n    ' the twenty' +\n    ' most' +\n    ' similar' +\n    ' structures to the given perturbagen.',\n    example: [\n      {\n        desc: 'View the structural and transcriptional similarity of CDK inhibitor',\n        command: '\"CDK inhibitor\"'\n      }, {\n        command: 'imatinib',\n        desc: 'View the structural and transcriptional similarity of the twenty most' +\n        ' structurally' +\n        ' similar' +\n        ' compounds' +\n        ' to imatinib'\n      }],\n    input: [\n      {\n        name: exports.TYPE_PERT,\n        type: 'trt_cp',\n        collection: ''\n      }],\n\n    one: function (id) {\n      var deferred = $.Deferred();\n      var p = morpheus.DatasetUtil.read(\n        clue.API_URL + '/data-api/slice/?name=tanimoto_daylight&rfield=id&cfield=id&rquery=id:(' + id + ')').done(function (dataset) {\n// show top 20 most similar\n        var project = new morpheus.Project(dataset);\n        project.setColumnSortKeys([new morpheus.SortByValuesKey([0], morpheus.SortKey.SortOrder.DESCENDING, true)],\n          true);\n        dataset = project.getSortedFilteredDataset();\n        var ids = [];\n        var idVector = dataset.getColumnMetadata().getByName('id');\n        for (var i = 0; i < 20; i++) {\n          ids.push(idVector.getValue(i));\n        }\n        deferred.resolve(ids);\n      }).fail(function (err) {\n        deferred.reject();\n      });\n      return deferred;\n    },\n    show: function(options){\n      var sar = __webpack_require__(/*! Actions/sar.js */ \"./public/js/local/command/dist/actions/sar.js\");\n      sar.show(options);\n    }\n  }\n  ,\n  {\n    command: '/target',\n    input: [\n      {\n        name: exports.TYPE_PERT,\n        type: 'trt_cp'\n      }],\n    help: 'View the targets of the specified compounds',\n    home: 'View and download the gene target for small-molecule perturbagens, or all small-molecule perturbagens that match the entered search terms.',\n    example: [\n      {\n        desc: 'View the targets of imatinib and hispidin',\n        command: 'imatinib,hispidin'\n      }, {\n        desc: 'View the targets of compounds that target BRAF or TP53',\n        command: 'BRAF,TP53'\n      }, {\n        desc: 'View the targets of all compounds that are androgren receptor agonist' +\n        ' or antagonists',\n        command: 'Androgen receptor agonist,Androgen receptor antagonist'\n      }, {\n        desc: 'View the targets of all compounds that target BRAF, are named imatinib,' +\n        ' or are CDK inhibitors',\n        command: 'BRAF,imatinib,CDK inhibitor'\n      }],\n    show: function(options){\n      var target = __webpack_require__(/*! Actions/target.js */ \"./public/js/local/command/dist/actions/target.js\");\n      return target.show(options);\n    }\n  }\n  ,\n  {\n    command: '/moa',\n    input: [\n      {\n        name: exports.TYPE_PERT,\n        type: 'trt_cp'\n      }],\n    help: 'View the targets of the specified compounds',\n    home: 'View and download the mechanism of action (MoA) for small-molecule perturbagens, or all small-molecule perturbagens that match the entered search terms.',\n    example: [\n      {\n        desc: 'View the targets of imatinib and hispidin',\n        command: 'imatinib,hispidin'\n      }, {\n        desc: 'View the targets of compounds that target BRAF or TP53',\n        command: 'BRAF,TP53'\n      }, {\n        desc: 'View the targets of all compounds that are androgren receptor agonist' +\n        ' or antagonists',\n        command: 'Androgen receptor agonist,Androgen receptor antagonist'\n      }, {\n        desc: 'View the targets of all compounds that target BRAF, are named imatinib,' +\n        ' or are CDK inhibitors',\n        command: 'BRAF,imatinib,CDK inhibitor'\n      }],\n    show: function(options){\n      var moa = __webpack_require__(/*! Actions/moa.js */ \"./public/js/local/command/dist/actions/moa.js\");\n      return moa.show(options);\n    }\n  }\n  ,\n  {\n    command: '/assay',\n    input: [\n      {\n        name: exports.TYPE_PERT,\n        type: 'trt_cp'\n      }],\n    help: 'View the assays the specified compounds are profiled in',\n    home: 'View and download the assays small-molecule perturbagens have been profiled in, or all small-molecule perturbagens that are profiled in certain assays.',\n    example: [\n      {\n        desc: 'View the assays imatinib and hispidin are profiled in',\n        command: 'imatinib,hispidin'\n      }, {\n        desc: 'View all assays that compounds profiled in P100 are profiled in',\n        command: 'P100'\n      }, {\n        desc: 'View the assays all compounds that are androgren receptor agonist' +\n        ' or antagonists are profiled in',\n        command: 'Androgen receptor agonist,Androgen receptor antagonist'\n      }, {\n        desc: 'View the assays of all compounds that target BRAF, are named imatinib,' +\n        ' or are CDK inhibitors are profiled in',\n        command: 'BRAF,imatinib,CDK inhibitor'\n      }],\n    show: function(options){\n      var assay = __webpack_require__(/*! Actions/assay.js */ \"./public/js/local/command/dist/actions/assay.js\");\n      return assay.show(options);\n    }\n  }\n];\n\nexports.actions.sort(function (a1, a2) {\n  var a = a1.command;\n  var b = a2.command;\n  return (a === b ? 0 : (a < b ? -1 : 1));\n});\n\n\n//# sourceURL=webpack:///./public/js/local/command/dist/shared/core.js?");

/***/ }),

/***/ "./public/js/local/command/dist/shared/groupBy.js":
/*!********************************************************!*\
  !*** ./public/js/local/command/dist/shared/groupBy.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//groupbycommand, shared?\nfunction _renderReady(heatMap, name) {\n    heatMap.on('beforeToolShown', function (e) {\n        if (e.tool instanceof morpheus.SaveImageTool || e.tool instanceof morpheus.SaveDatasetTool) {\n            e.formBuilder.setValue('file_name', name);\n        }\n    });\n}\n\nexports.saveTableByPert = function(dbField, capitalizedField, idToSearchTerms, results, $table, fileName) {\n    $table.empty();\n    var table = new tablelegs.Table({\n        height: '412px',\n        columnPicker: true,\n        tableClass: 'slick-table slick-bordered-table slick-hover-table',\n        select: true,\n        search: true,\n        export: true,\n        rowHeight: 18,\n        $el: $table,\n        columns: [\n            {\n                field: 'pert_id',\n                name: 'Perturbagen Id'\n            }, {\n                field: 'pert_iname',\n                name: 'Name'\n            }, {\n                name: 'Search Term',\n                getter: function (item) {\n                    return idToSearchTerms.get(item.pert_id);\n                }\n            }, {\n                field: dbField,\n                name: capitalizedField\n            }],\n        items: results\n    });\n    if (!morpheus.Util.endsWith(fileName.toLowerCase(), '.txt')) {\n        fileName += '.txt';\n    }\n    var blob = new Blob([table.toText()], {\n        type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, fileName, true);\n};\n\nexports.saveTableByGroupby = function(dbField, capitalizedField, results, $table, fileName) {\n    var groupedKeyToItems = new morpheus.Map();\n    var maxPertCount = 0;\n    for (var i = 0, n = results.length; i < n; i++) {\n        var result = results[i];\n        var keys = result[dbField] || [];\n        for (var j = 0, nkeys = keys.length; j < nkeys; j++) {\n            var key = keys[j];\n            var items = groupedKeyToItems.get(key);\n            if (items === undefined) {\n                items = [];\n                groupedKeyToItems.set(key, items);\n            }\n            items.push(result);\n            maxPertCount = Math.max(items.length, maxPertCount);\n        }\n    }\n    var groupedValues = groupedKeyToItems.keys();\n    groupedValues.sort(function (a, b) {\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n        return (a === b ? 0 : (a < b ? -1 : 1));\n    });\n    $table.empty();\n    var table = new tablelegs.Table({\n        height: '412px',\n        columnPicker: true,\n        tableClass: 'slick-table slick-bordered-table slick-hover-table',\n        select: true,\n        search: true,\n        export: true,\n        rowHeight: 18,\n        $el: $table,\n        columns: [\n            {\n                name: capitalizedField,\n                getter: function (item) {\n                    return item;\n                }\n            }, {\n                name: 'Perturbagen Count',\n                dataType: 'number',\n                getter: function (item) {\n                    return groupedKeyToItems.get(item).length;\n                }\n            }, {\n                field: 'pert_id',\n                name: 'Perturbagen Id',\n                getter: function (item) {\n                    return groupedKeyToItems.get(item).map(function (pert) {\n                        return pert.pert_id;\n                    });\n                }\n            }, {\n                field: 'pert_iname',\n                name: 'Name',\n                getter: function (item) {\n                    return groupedKeyToItems.get(item).map(function (pert) {\n                        return pert.pert_iname;\n                    });\n                }\n            }],\n        items: groupedValues\n    });\n    if (!morpheus.Util.endsWith(fileName.toLowerCase(), '.txt')) {\n        fileName += '.txt';\n    }\n    var blob = new Blob([table.toText()], {\n        type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, fileName, true);\n};\n\nexports.saveHeatmapSvg = function(heatMap, fileName, $el) {\n    if (!morpheus.Util.endsWith(fileName.toLowerCase(), '.svg')) {\n        fileName += '.svg';\n    }\n    heatMap.saveImage(fileName, 'svg');\n};\n\nexports.createGroupedHeatMap = function(results, groupByField, options, cb) {\n    var $heatMap = $('<div></div>');\n    $heatMap.appendTo(options.$el.find('[data-section=\"main\"]'));\n    var $launchBar = options.$el.find('[data-section=\"launchBar\"]');\n\n    var idToSearchTerms = options.idToSearchTerms;\n    var command = options.object.truncatedCommand;\n    var commandName = options.command;\n    var allSearchTerms = new Set();\n    if(idToSearchTerms) {\n        var vals = idToSearchTerms.values();\n        for (i = 0; i < vals.length; i++) {\n            vals[i].forEach(function(val) {\n                allSearchTerms.add(val);\n            });\n        }\n    }\n\n    // creating name row/column vectors, and putting values in matrix\n    var geneToIndex = new morpheus.Map();\n    var geneToCount = new morpheus.Map();\n    var pertToIndex = new morpheus.Map();\n    var matrix = [];\n    var pertIdToItem = new morpheus.Map();\n    for (i = 0; i < results.length; i++) {\n        var item = results[i];\n        var pertIndex = pertToIndex.get(item.pert_id);\n        pertIdToItem.set(item.pert_id, item);\n        if (pertIndex === undefined) {\n            pertIndex = pertToIndex.size();\n            matrix[pertIndex] = [];\n            pertToIndex.set(item.pert_id, pertIndex);\n        }\n        var vals = item[groupByField];\n        var idList = [];\n        if (vals != null) {\n            vals.forEach(function (id) {\n                if(id==='TS_v1.1') {\n                    id='L1000 (TS v1.1)';\n                }\n                if (commandName==='assay' && (id!='L1000 (TS v1.1)' && id!='GCP' && id!='P100')) {\n                  // pass\n                }\n                else {\n                  idList.push(id);\n                  var geneIndex = geneToIndex.get(id);\n                  if (geneIndex === undefined) {\n                    geneIndex = geneToIndex.size();\n                    geneToIndex.set(id, geneIndex);\n                    geneToCount.set(id, 0);\n                  }\n                  geneToCount.set(id, geneToCount.get(id) + 1);\n                  if (allSearchTerms.has(id) || allSearchTerms.has(item.pert_id) || allSearchTerms.has(item.pert_iname)) {\n                    matrix[pertIndex][geneIndex] = 2;\n                  }\n                  else {\n                    matrix[pertIndex][geneIndex] = 1;\n                  }\n                }\n            });\n        }\n        if (commandName==='assay') {\n          item['assay'] = idList;\n          delete item.pert_icollection;\n        }\n    }\n    if (matrix.length === 0) {\n        return cb('No data available');\n    }\n    // perts on rows, moas/targets on columns\n    var dataset = new morpheus.Dataset({\n        rows: pertToIndex.size(),\n        columns: geneToIndex.size(),\n        array: matrix\n    });\n    dataset = new morpheus.TransposedDatasetView(dataset);\n    for (var i = 0, nrows = dataset.getRowCount(); i < nrows; i++) {\n        for (var j = 0, ncols = dataset.getColumnCount(); j < ncols; j++) {\n            if (!dataset.getValue(i, j)) {\n                dataset.setValue(i, j, 0);\n            }\n        }\n    }\n\n  // turning name vectors to indexed vectors, also making color/font models\n    var pertIdVector = dataset.getColumnMetadata().add('id');\n    pertToIndex.forEach(function (index, id) {\n        pertIdVector.setValue(index, id);\n    });\n    var groupByColorObject = {};\n    var searchTermFonts = {};\n    var geneIdVector = dataset.getRowMetadata().add(groupByField);\n    var maxGroupByLength = 0;\n    geneToIndex.forEach(function (index, id) {\n        if(id.length>maxGroupByLength) {\n            maxGroupByLength = id.length;\n        }\n        geneIdVector.setValue(index, id);\n        if(allSearchTerms.has(id)) {\n            groupByColorObject[id] = \"#000000\";\n            searchTermFonts[id] = {\"weight\":\"900\"};\n        }\n        else {\n            groupByColorObject[id] = \"#666666\";\n        }\n    });\n    var nameVector = dataset.getColumnMetadata().add('name');\n    var typeVector = dataset.getColumnMetadata().add('type');\n    var pertColorObject = {};\n    var maxPertLength = 0;\n    for (var j = 0, size = pertIdVector.size(); j < size; j++) {\n        var id = pertIdVector.getValue(j);\n        var item = pertIdToItem.get(id);\n        if(item.pert_iname.length>maxPertLength) {\n            maxPertLength=item.pert_iname.length;\n        }\n        nameVector.setValue(j, item.pert_iname);\n        typeVector.setValue(j, item.pert_type);\n        if(allSearchTerms.has(item.pert_id) || allSearchTerms.has(item.pert_iname)) {\n            pertColorObject[item.pert_iname] = \"#000000\";\n            searchTermFonts[item.pert_iname] = {\"weight\":\"900\"};\n        }\n        else {\n            pertColorObject[item.pert_iname] = \"#666666\";\n        }\n    }\n\n    var searchTermNames = [];\n    if (idToSearchTerms) {\n        for (var j = 0, size = pertIdVector.size(); j < size; j++) {\n            var id = pertIdVector.getValue(j);\n            var searchTermsArray = idToSearchTerms.get(id);\n            searchTermsArray.forEach(function(name) {\n                if(!geneToIndex.has(name) && !pertToIndex.has(name) && nameVector.array.indexOf(name)<0) {\n                    var searchVector = dataset.getColumnMetadata().getByName(name);\n                    if (!dataset.getColumnMetadata().getByName(name)) {\n                        searchVector = dataset.getColumnMetadata().add(name);\n                        searchTermNames.push({\n                            field: name,\n                            display: 'shape',\n                            highlightMatchingValues: true,\n                            header: {font:{weight:900}},\n                            size: {height:18}\n                        });\n                    }\n                    searchVector.setValue(j, 1);\n                }\n            });\n        }\n    }\n\n    function addCounts(d) {\n        var countVector = d.getRowMetadata().add(' ');\n        for (var i = 0; i < d.getRowCount(); i++) {\n            var count = 0;\n            for (var j = 0; j < d.getColumnCount(); j++) {\n                if (d.getValue(i, j) > 0) {\n                    count++;\n                }\n            }\n            countVector.setValue(i, count);\n        }\n    }\n\n    if (dataset.getRowCount() > 1) {\n        addCounts(dataset);\n    }\n    else if (dataset.getRowCount()===0) {\n      options.$el.empty();\n      options.$el.append('<div class=\"text-18 pad-top-32\"><p>No ' + options.lcField + ' annotations for your search term(s) were found.</p></div>');\n      cb(null, options.$el);\n    }\n\n    if (dataset.getColumnCount() > 1) {\n      addCounts(new morpheus.TransposedDatasetView(dataset));\n    }\n\n\n    var rowHcl = new morpheus.HCluster(\n        morpheus.HCluster.computeDistanceMatrix(dataset, morpheus.Jaccard), morpheus.AverageLinkage);\n    var columnHcl = new morpheus.HCluster(\n        morpheus.HCluster.computeDistanceMatrix(new morpheus.TransposedDatasetView(dataset), morpheus.Jaccard), morpheus.AverageLinkage);\n    dataset = new morpheus.SlicedDatasetView(dataset, rowHcl.order, columnHcl.order);\n\n    var columnMetadata = [\n        {\n            field: 'name',\n            display: ['text','text_and_color','text_and_font'],\n            header: {font:{weight:300}}\n        }];\n    var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n    var toolbar = utils.quickMorpheusToolbar({\n      saveImage: false\n    });\n  columnMetadata = columnMetadata.concat(searchTermNames);\n\n  var heatMap = null;\n  if(commandName==='assay') {\n    dataset = new morpheus.TransposedDatasetView(dataset);\n    morpheus.MetadataUtil.renameFields(dataset, {'rows':[{\n      field : ' ',\n      renameTo : 'Assay count'\n    }]});\n    columnMetadata = columnMetadata.concat({\n      field: 'Assay count',\n      display: 'text'\n    });\n    var object = options.object;\n    options.object.dataset = dataset;\n    object.pertNameVector = dataset.getRowMetadata().getByName('name');\n    object.assayVector = dataset.getColumnMetadata().add('assay');\n    var groupbyVector = dataset.getColumnMetadata().getByName(groupByField);\n    for(var i=0; i<groupbyVector.size(); i++) {\n      object.assayVector.setValue(i, groupbyVector.getValue(i));\n    }\n    object.assayVector = dataset.getColumnMetadata().getByName(groupByField);\n    groupByField = 'assay';\n    object.dbField = 'assay';\n    var assays = object.assayVector.array;\n    options.object.selectedAssays = new morpheus.Set();\n    assays.forEach(function(assay) {\n      options.object.selectedAssays.add(assay);\n    });\n    options.object.showIntersection = false;\n\n    // need a form that lists all assays\n    var formBuilder = new morpheus.FormBuilder({formStyle: 'inline'});\n    options.object.formBuilder = formBuilder;\n    options.object.displayOptions = true;\n\n    formBuilder.append({\n      name: 'assays',\n      multiple: true,\n      type: 'bootstrap-select',\n      options: assays,\n      value: assays,\n      selectAll: true\n    });\n    formBuilder.append({\n      name: 'show_compounds_shared_between_selected_assays',\n      type: 'checkbox',\n      value: options.object.showIntersection\n    });\n    var idCount = dataset.getColumnMetadata().add('count');\n    geneToIndex.forEach(function (index, id) {\n      idCount.setValue(index, geneToCount.get(id)+'');\n    });\n    heatMap = new morpheus.HeatMap({\n      toolbar: toolbar,\n      menu: false,\n      popupEnabled: false,\n      autohideTabBar: true,\n      inlineTooltip: false,\n      el: $heatMap,\n      columns: [\n        {\n          field: ' ',\n          display: 'bar'\n        }, {\n          field: 'count',\n          display: 'text'\n        }, {\n          field: groupByField,\n          display: ['text', 'text_and_color', 'text_and_font']\n        }],\n      rows: columnMetadata,\n      renderReady: function (heatMap) {\n        heatMap.getHeatMapElementComponent().getColorScheme()\n          .getConditions().add({\n          series: dataset.getName(),\n          shape: 'circle',\n          v1: 1,\n          v1Op: 'gte',\n          inheritColor: true,\n          accept: function (val) {\n            return val > 0;\n          }\n        });\n        _renderReady(heatMap, command);\n      },\n      colorScheme: {\n        type: 'fixed',\n        missingColor: 'white',\n        map: [\n          {\n            value: 0,\n            color: 'white'\n          }, {\n            value: 1,\n            color: 'rgb(116,146,155)'\n          },\n          {\n            value: 2,\n            color: 'rgb(2,55,72)'\n          }]\n      },\n      rowColorModel: {'name': pertColorObject},\n      columnColorModel: {groupByField: groupByColorObject},\n      columnFontModel: {groupByField: searchTermFonts},\n      rowFontModel: {'name': searchTermFonts},\n      dataset: dataset\n    });\n    heatMap.promise.then(function(){\n        var oldProvider = heatMap.tooltipProvider;\n        heatMap.tooltipProvider = function (heatMap, rowIndex, columnIndex, options, separator, quick, tipText) {\n            if (rowIndex !== -1 && columnIndex !== -1) {\n            }\n            else {\n                oldProvider(heatMap, rowIndex, columnIndex, options, separator, quick, tipText)\n            }\n        };\n        heatMap.getProject().setRowSortKeys([\n            new morpheus.SortKey('Assay count',\n                morpheus.SortKey.SortOrder.DESCENDING)], true);\n        heatMap.getProject().getRowSelectionModel().on('selectionChanged', function (e) {\n            var selection = utils.getHeatMapSelection(heatMap,'name',true);\n            utils.showLaunchOptions(selection, 'pert', $launchBar, options.object.commandName, options.object.tabManager);\n        });\n        heatMap.getProject().getColumnSelectionModel().on('selectionChanged', function (e) {\n            var selection = utils.getHeatMapSelection(heatMap,groupByField,false);\n            utils.showLaunchOptions(selection, groupByField, $launchBar, options.object.commandName, options.object.tabManager);\n        });\n        return cb(null, heatMap);\n    }).catch(function(ee){\n        console.log(ee);\n        return cb(ee);\n    });\n  }\n  else {\n    columnMetadata = columnMetadata.concat(searchTermNames);\n    columnMetadata = columnMetadata.concat([{\n      field: ' ',\n      display: 'bar'\n    }]);\n    var geneIdFraction = dataset.getRowMetadata().add('count');\n    var search = __webpack_require__(/*! Shared/search.js */ \"./public/js/local/command/dist/shared/search.js\");\n    search.getSearchTermCountsNoGenetic(geneIdVector.array, {type: 'pert'})\n      .done(function (results) {\n        var entireMoaCounts = results.searchTermCounts;\n        // geneToIndex, geneToCount, entireMoaCounts\n        geneToIndex.forEach(function (index, id) {\n          var fraction = geneToCount.get(id) + '/' + entireMoaCounts.get(id);\n          geneIdFraction.setValue(index, fraction);\n        });\n        heatMap = new morpheus.HeatMap({\n          toolbar: toolbar,\n          menu: false,\n          popupEnabled: false,\n          autohideTabBar: true,\n          inlineTooltip: false,\n          el: $heatMap,\n          rows: [\n            {\n              field: ' ',\n              display: 'bar'\n            }, {\n              field: 'count',\n              display: 'text'\n            }, {\n              field: groupByField,\n              display: ['text', 'text_and_color', 'text_and_font']\n            }],\n          columns: columnMetadata,\n          renderReady: function (heatMap) {\n            heatMap.getHeatMapElementComponent().getColorScheme()\n              .getConditions().add({\n              series: dataset.getName(),\n              shape: 'circle',\n              v1: 1,\n              v1Op: 'gte',\n              inheritColor: true,\n              accept: function (val) {\n                return val > 0;\n              }\n            });\n            _renderReady(heatMap, command);\n          },\n          colorScheme: {\n            type: 'fixed',\n            missingColor: 'white',\n            map: [\n              {\n                value: 0,\n                color: 'white'\n              }, {\n                value: 1,\n                color: 'rgb(116,146,155)'\n              },\n              {\n                value: 2,\n                color: 'rgb(2,55,72)'\n              }]\n          },\n          columnColorModel: {'name': pertColorObject},\n          rowColorModel: {groupByField: groupByColorObject},\n          rowFontModel: {groupByField: searchTermFonts},\n          columnFontModel: {'name': searchTermFonts},\n          dataset: dataset\n        });\n          heatMap.promise.then(function() {\n              var oldProvider = heatMap.tooltipProvider;\n              heatMap.tooltipProvider = function (heatMap, rowIndex, columnIndex, options, separator, quick, tipText) {\n                  if (rowIndex !== -1 && columnIndex !== -1) {\n                  } else {\n                      oldProvider(heatMap, rowIndex, columnIndex, options, separator, quick, tipText)\n                  }\n              };\n              heatMap.getProject().getRowSelectionModel().on('selectionChanged', function (e) {\n                  var selection = utils.getHeatMapSelection(heatMap, groupByField, true);\n                  utils.showLaunchOptions(selection, groupByField, $launchBar, options.object.commandName, options.object.tabManager);\n              });\n              heatMap.getProject().getColumnSelectionModel().on('selectionChanged', function (e) {\n                  var selection = utils.getHeatMapSelection(heatMap, 'name', false);\n                  utils.showLaunchOptions(selection, 'pert', $launchBar, options.object.commandName, options.object.tabManager);\n              });\n              utils.showLaunchOptions([], groupByField, $launchBar, options.object.commandName, options.object.tabManager);\n              return cb(null, heatMap);\n          }).catch(function(ee){\n              return cb(ee);\n          });\n      });\n  }\n};\n\n// function executeExport(dbField, capitalizedField, idToSearchTerms, results, $table, heatMap, $el) {\nfunction executeExport(object) {\n    var $table = object.$el.find('[data-name=table]');\n    var $el = object.$el;\n    $el.find('.export-warning').html('');\n    var inputType = $el.find('input[name=\"exportType\"]:checked').val();\n    var fileName = $el.find('.export-filename-prompt').val();\n    fileName = fileName ? fileName : 'command_output';\n\n    if(!inputType) {\n      $el.find('.export-warning').html('No option selected');\n    }\n    else {\n        if(inputType==0) {\n            exports.saveHeatmapSvg(object.heatMap, fileName, object.$el);\n\n        }\n        else if(inputType==1) {\n            exports.saveTableByPert(object.dbField, object.capitalizedField, object.idToSearchTerms, object.tempResults, $table, fileName);\n        }\n        else {\n            exports.saveTableByGroupby(object.dbField, object.capitalizedField, object.tempResults, $table, fileName);\n        }\n        $el.find('.export-modal').modal('hide');\n    }\n}\nfunction setupDisplayOptions(object) {\n  formBuilder = object.formBuilder;\n\n  var $select = formBuilder.find('assays');\n  $select.data('actions-box', 'true');\n  $select.selectpicker('selectAll');\n  $select.selectpicker('render');\n  // todo bw fix up styling?\n  formBuilder.$form.find('label').addClass('display-label');\n  formBuilder.$form.find('.bootstrap-select').addClass('display-selector-button');\n  formBuilder.$form.appendTo(object.$el.find('.header-display-options'));\n  formBuilder.find('show_compounds_shared_between_selected_assays').on('change', object, function (e) {\n    e.data.showIntersection = e.data.formBuilder.getValue('show_compounds_shared_between_selected_assays');\n    updateRowFilter(e.data);\n  });\n  formBuilder.find('assays').on('change', object, function (e) {\n    e.data.selectedAssays = new morpheus.Set();\n    var values = e.data.formBuilder.getValue('assays');\n    if (values != null) {\n      values.forEach(function (value) {\n        e.data.selectedAssays.add(value);\n      });\n    }\n    updateRowFilter(e.data);\n  });\n}\nfunction setupExportOptions(object) {\n  var $el = object.$el;\n  $el.find('.command-out-links').show();\n  var $exportOptions = $el.find('.export-options');\n  var exportOptionsHtml = '<input type=\"radio\" name=\"exportType\" value=\"0\" class=\"export-radio\">' +\n    'Export the association matrix currently displayed as an image (.svg)</input><br>' +\n    '<input type=\"radio\" name=\"exportType\" value=\"1\" class=\"export-radio\">' +\n    'Export the data as a tab-delimited text file, grouped by perturbagen (.txt)</input><br>' +\n    '<input type=\"radio\" name=\"exportType\" value=\"2\" class=\"export-radio\">' +\n    'Export the data as a tab-delimited text file, grouped by ' + object.lcField + ' (.txt)</input><br>';\n  $exportOptions.html(exportOptionsHtml);\n  $el.find('.export-btn-confirm').on('click',{object:object},function(e) {\n    executeExport(e.data.object);\n  });\n  $el.find('.export-btn-cancel').on('click',{object:object},function(e) {\n    e.data.object.$el.find('.export-modal').modal('hide');\n  });\n  $el.find('.export-btn').on('click',{$el:object.$el},function(e) {\n    e.data.$el.find('.export-warning').html('');\n    e.data.$el.find('.export-pending').html('');\n  });\n}\n\nfunction setupHeader(object) {\n    if(object.displayOptions) {\n      setupDisplayOptions(object);\n    }\n    setupExportOptions(object);\n}\n\nexports.groupByShow = function (options) {\n    var dbField = options.dbField;\n    options.object.dbField = dbField;\n    var lcField = options.lcField;\n    options.object.lcField = lcField;\n    var capitalizedField = options.capitalizedField;\n    options.object.capitalizedField = capitalizedField;\n    var ids = options.ids;\n    var idToSearchTerms = options.idToSearchTerms;\n    var $el = options.$el;\n    var d = $.Deferred();\n    $.ajax(clue.API_URL + '/api/perts?filter=' + JSON.stringify({\n            fields: ['pert_id', 'pert_iname', dbField],\n            where: {\n                pert_type: 'trt_cp',\n                pert_id: {inq: ids}\n            }\n        })).done(function (results) {\n          if(results.length===0) {\n            options.$el.append('<div class=\"text-18 pad-top-32\"><p>No small-molecule compounds matching your search terms were found.</p></div>');\n            d.resolve();\n          }\n          else {\n            var $row = $('<div class=\"row\">' +\n              '<div class=\"col-md-9 col-sm-8\" data-section=\"main\"></div>' +\n              '<div class=\"col-md-3 col-sm-4\"><div class=\"launch-panel\" data-section=\"launchBar\">' +\n              '<h3>Nothing selected</h3><br><hr>Select a row/column to see additional options</div></div>' +\n              '</div>');\n            $row.appendTo(options.$el);\n            var $mainEl = $row.find('[data-section=\"main\"]');\n\n            options.object.$topEl = $('<div></div>');\n            if (options.command != 'assay') {\n              var helpText = \"The <i>'count'</i> field indicates the number of <b>displayed compounds</b> with a certain annotation <b>relative to all perturbagens</b> in Touchstone with the same annotation.\";\n              var $helpEl = $('<div class=\"extra-info-text\">' + helpText + '</div>');\n              $helpEl.appendTo(options.object.$topEl);\n            }\n            options.object.$topEl.appendTo($mainEl);\n\n            results.sort(function (r1, r2) {\n              var a = r1.pert_iname.toLowerCase();\n              var b = r2.pert_iname.toLowerCase();\n              return (a === b ? 0 : (a < b ? -1 : 1));\n            });\n\n            exports.createGroupedHeatMap(results, dbField, options, function (err, result) {\n              if (err) {\n                return d.reject(\n                  'No compounds with the specified ' + lcField + (ids.length === 1 ? '' : 's') + ' found in database.');\n              } else {\n                var object = options.object;\n                object.heatMap = result;\n                object.results = results;\n                object.tempResults = results;\n                object.idToSearchTerms = idToSearchTerms;\n                setupHeader(options.object);\n                d.resolve();\n              }\n            });\n          }\n    });\n    return d;\n};\n\nfunction updateRowFilter(object) {\n  var columnIndices = null;\n  var heatMap = object.heatMap;\n  if (object.selectedAssays != null && object.selectedAssays.size() > 0) {\n    columnIndices = [];\n    for (var j = 0; j < object.assayVector.size(); j++) {\n      if (object.selectedAssays.has(object.assayVector.getValue(j))) {\n        columnIndices.push(j);\n      }\n    }\n  }\n  var ds = new morpheus.SlicedDatasetView(object.dataset, null, columnIndices);\n  heatMap.getProject().setRowSortKeys(morpheus.SortKey.keepExistingSortKeys(\n    [new morpheus.SortKey('assay', morpheus.SortKey.SortOrder.ASCENDING, false)],\n    heatMap.getProject().getRowSortKeys()), false);\n  heatMap.getProject().setFullDataset(ds, true);\n  if(!columnIndices) {\n    object.tempResults = object.results;\n    return;\n  }\n\n  var rowIndices = null;\n  object.tempResults = [];\n  if (object.showIntersection) {\n    rowIndices = [];\n    for (var i = 0; i < object.pertNameVector.size(); i++) {\n      var foundAllAssays = true;\n      for (var j = 0; j < columnIndices.length; j++) {\n        if (object.dataset.getValue(i,columnIndices[j])===0) {\n          foundAllAssays = false;\n        }\n      }\n      if(foundAllAssays) {\n        rowIndices.push(i);\n        object.tempResults.push(object.results[i])\n      }\n    }\n  }\n  else {\n    rowIndices = [];\n    for (var i = 0; i < object.pertNameVector.size(); i++) {\n      var foundAssays = false;\n      for (var j = 0; j < columnIndices.length; j++) {\n        if (object.dataset.getValue(i,columnIndices[j])>0) {\n          foundAssays = true;\n        }\n      }\n      if(foundAssays) {\n        rowIndices.push(i);\n        object.tempResults.push(object.results[i])\n      }\n    }\n  }\n\n  ds = new morpheus.SlicedDatasetView(ds, rowIndices, null);\n  heatMap.getProject().setRowSortKeys(morpheus.SortKey.keepExistingSortKeys(\n    [new morpheus.SortKey('name', morpheus.SortKey.SortOrder.ASCENDING, false)],\n    heatMap.getProject().getRowSortKeys()), false);\n  heatMap.getProject().setFullDataset(ds, true);\n\n\n  // object.cellLineDataset = new morpheus.SlicedDatasetView(object.fullDataset, null, columnIndices);\n  // var indexVector = object.cellLineDataset.getColumnMetadata().add('is_index');\n  // var connectionsDataset = object.cellLineDataset;\n  // if (object.selectedPerts != null && object.selectedPerts.size() > 0) {\n  //   // pick refererence perts\n  //   var currentDatasetTypeVector = object.cellLineDataset.getColumnMetadata().getByName('type');\n  //   var currentDatasetNameVector = object.cellLineDataset.getColumnMetadata().getByName('name');\n  //   var pertIndices = [];\n  //   for (var j = 0; j < object.cellLineDataset.getColumnCount(); j++) {\n  //     pertName = currentDatasetNameVector.getValue(j) + '-' + currentDatasetTypeVector.getValue(j);\n  //     if (object.selectedPerts.has(pertName)) {\n  //       pertIndices.push(j);\n  //       indexVector.setValue(j, true);\n  //     }\n  //   }\n  //\n  //   connectionsDataset = new morpheus.SlicedDatasetView(object.cellLineDataset, null, pertIndices);\n  // }\n  //\n  // var rowIds = getTopRowIds(connectionsDataset);\n  // var rowIndices = [];\n  // for (var i = 0, size = rowIds.length; i < size; i++) {\n  //   rowIndices.push(object.idToIndex.get(rowIds[i]));\n  // }\n  // var ds = new morpheus.SlicedDatasetView(object.cellLineDataset, rowIndices, null);\n  // heatMap.getProject().setRowSortKeys(morpheus.SortKey.keepExistingSortKeys(\n  //   [new morpheus.SortKey('score', morpheus.SortKey.SortOrder.DESCENDING, false)],\n  //   heatMap.getProject().getRowSortKeys()), false);\n  // heatMap.getProject().setFullDataset(ds, true);\n  //\n  // var heatMaps = object.heatMaps;\n  // var rowIdsMap = getTopRowIdsMap(connectionsDataset);\n  // rowIdsMap.forEach(function(rowIds,idx) {\n  //   var rowIndices = [];\n  //   var heatMap = heatMaps[idx];\n  //   for (var i = 0, size = rowIds.length; i < size; i++) {\n  //     rowIndices.push(object.idToIndex.get(rowIds[i]));\n  //   }\n  //   var ds = new morpheus.SlicedDatasetView(object.cellLineDataset, rowIndices, null);\n  //   heatMap.getProject().setRowSortKeys(morpheus.SortKey.keepExistingSortKeys(\n  //     [new morpheus.SortKey('score', morpheus.SortKey.SortOrder.DESCENDING, false)],\n  //     heatMap.getProject().getRowSortKeys()), false);\n  //   heatMap.getProject().setFullDataset(ds, true);\n  // });\n}\n\n//# sourceURL=webpack:///./public/js/local/command/dist/shared/groupBy.js?");

/***/ }),

/***/ "./public/js/local/command/dist/shared/introspectData.js":
/*!***************************************************************!*\
  !*** ./public/js/local/command/dist/shared/introspectData.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n *\n * @param options.rowIds\n * @param options.symmetric\n * @param options.columnIds\n * @param options.cellLine\n * @return Promise that resolves to a dataset.\n */\nexports.get = function(options) {\n    // cell line dataset has id on column by pert_id on rows, id on rows\n    // is pert_id:cell_id\n    var d = $.Deferred();\n    var p;\n    // todo bw: rid/cid info is still weird for CCSBBROAD id's\n    options.rowIds.forEach(function(str,idx) {\n        options.rowIds[idx] = str.replace(/ccsbbroad/i, 'ccsbBroad');\n    });\n    options.columnIds.forEach(function(str,idx) {\n        options.columnIds[idx] = str.replace(/ccsbbroad/i, 'ccsbBroad');\n    });\n\n    if (options.cellLine == null || options.cellLine.toLowerCase() === 'summary') {\n\n        var queryString = '&rfield=id&rfield=pert_id&cfield=id&cfield=pert_id&cquery=id:(' + options.columnIds.join(' ') +\n            ')';\n        if (options.rowIds !== 'top') {\n            queryString += '&rquery=id:(' + options.rowIds.join(' ') + ')';\n        }\n\n        p = morpheus.DatasetUtil.read(clue.API_URL + '/data-api/slice/?name=' + options.assay + '_introspect_matched_SUMMLY' + queryString);\n    } else { // specific cell line\n\n        var rowIdString = '';\n        var columnIdString = '';\n        if(options.assay==='L1000') {\n            rowIdString = options.rowIds.map(function (id) {\n              return id + ':' + options.cellLine;\n            }).join(' ');\n            columnIdString = options.columnIds.join(' ');\n        }\n        else if(options.assay==='P100') {\n          // GCP is 24\n          rowIdString = options.rowIds.map(function (id) {\n            return id + ':' + options.cellLine + ':3';\n          }).join(' ');\n          columnIdString = options.columnIds.map(function (id) {\n            return id + ':' + options.cellLine + ':3';\n          }).join(' ');\n        }\n        else {\n            // GCP is 24\n          rowIdString = options.rowIds.map(function (id) {\n              return id + ':' + options.cellLine + ':24';\n            }).join(' ');\n          columnIdString = options.columnIds.map(function (id) {\n              return id + ':' + options.cellLine + ':24';\n            }).join(' ');\n        }\n\n        var queryString = '&rfield=id&rfield=pert_id&cfield=id&cfield=pert_id&cquery=id:(' + columnIdString +\n            ')';\n        if (options.rowIds !== 'top') {\n            queryString += '&rquery=id:(' + rowIdString + ')';\n        }\n\n        p = morpheus.DatasetUtil.read(\n            clue.API_URL + '/data-api/slice/?name=' + options.assay + '_introspect_matched_' + options.cellLine + queryString);\n    }\n    p.then(function (introspectDataset) {\n        var rowIdVector = introspectDataset.getRowMetadata().getByName('pert_id');\n        if (rowIdVector == null) {\n            rowIdVector = introspectDataset.getRowMetadata().getByName('id');\n        } else {\n            var idIndex = morpheus.MetadataUtil.indexOf(introspectDataset.getRowMetadata(), 'id');\n            if (idIndex !== -1) {\n                introspectDataset.getRowMetadata().remove(idIndex);\n            }\n        }\n        rowIdVector.setName('id');\n        if (options.rowIds === 'top') {\n            var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n            var topRowIndices = utils.getTopRowIndices(introspectDataset);\n            introspectDataset = new morpheus.SlicedDatasetView(introspectDataset, topRowIndices, null);\n        }\n\n        // put rows and columns in same order\n        if (options.order) {\n            var rowOrder = [];\n            var columnOrder = [];\n            var columnIdVector = introspectDataset.getColumnMetadata().getByName('pert_id'); // put in same order\n            if (columnIdVector == null) {\n                columnIdVector = introspectDataset.getColumnMetadata().getByName('id');\n            } else {\n                var idIndex = morpheus.MetadataUtil.indexOf(introspectDataset.getColumnMetadata(), 'id');\n                if (idIndex !== -1) {\n                    introspectDataset.getColumnMetadata().remove(idIndex);\n                }\n            }\n            columnIdVector.setName('id');\n            var rowIdToIndex = morpheus.VectorUtil.createValueToIndexMap(rowIdVector);\n            var columnIdToIndex = morpheus.VectorUtil.createValueToIndexMap(columnIdVector);\n            var ids = new morpheus.Set();\n            rowIdToIndex.forEach(function (index, id) {\n                ids.add(id);\n            });\n            columnIdToIndex.forEach(function (index, id) {\n                ids.add(id);\n            });\n            ids.forEach(function (id) {\n                var rowIndex = rowIdToIndex.get(id);\n                var columnIndex = columnIdToIndex.get(id);\n                if (rowIndex !== undefined && columnIndex !== undefined) {\n                    rowOrder.push(rowIndex);\n                    columnOrder.push(columnIndex);\n                }\n            });\n            introspectDataset = new morpheus.SlicedDatasetView(introspectDataset, rowOrder, columnOrder);\n        }\n        if (options.symmetric) {\n            for (var i = 0, nrows = introspectDataset.getRowCount(); i < nrows; i++) {\n                introspectDataset.setValue(i, i, NaN); // diagonal\n            }\n            for (var i = 1, nrows = introspectDataset.getRowCount(); i < nrows; i++) {\n                for (var j = 0; j < i; j++) {\n                    var value = (introspectDataset.getValue(i, j) + introspectDataset.getValue(j, i)) / 2;\n                    introspectDataset.setValue(i, j, value);\n                    introspectDataset.setValue(j, i, value);\n                }\n            }\n        }\n        d.resolve(introspectDataset);\n    }).catch(function (ee) {\n        console.log(\"error: \",ee);\n        d.reject('Please try again.');\n    });\n    return d;\n}\n\n\n//# sourceURL=webpack:///./public/js/local/command/dist/shared/introspectData.js?");

/***/ }),

/***/ "./public/js/local/command/dist/shared/search.js":
/*!*******************************************************!*\
  !*** ./public/js/local/command/dist/shared/search.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.getSearchTerms = function(tokens, where, getIds) {\n    var deferred = $.Deferred();\n    if (tokens.length === 0) {\n        return deferred.resolve(getIds ? {\n                idToSearchTerms: new morpheus.Map(),\n                missingTerms: [],\n                ids: [],\n                results: [],\n                tokens: tokens\n            } : []);\n    }\n    var orQuery = []; // inq queries are not working\n    for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        token = token.replace(new RegExp('\"', 'g'), ''); // replace quotes\n        token = token.toLowerCase();\n        orQuery.push({iterm: token});\n    }\n    where.or = orQuery;\n    $.ajax(clue.API_URL + '/api/search_terms?filter=' + encodeURIComponent(JSON.stringify({\n            fields: getIds ? ['ids', 'term'] : ['term'],\n            where: where\n        }))).done(function (results) {\n        // take union\n        if (getIds) {\n            var missingTerms = new morpheus.Set();\n            for (var i = 0; i < tokens.length; i++) {\n                missingTerms.add(orQuery[i].iterm);\n            }\n            var ids = new morpheus.Set();\n            var idToSearchTerms = new morpheus.Map();\n            for (var i = 0; i < results.length; i++) {\n                var item = results[i];\n                missingTerms.remove(item.term.toLowerCase());\n                for (var j = 0; j < item.ids.length; j++) {\n                    ids.add(item.ids[j]);\n                    var searchTerms = idToSearchTerms.get(item.ids[j]);\n                    if (searchTerms === undefined) {\n                        searchTerms = [];\n                        idToSearchTerms.set(item.ids[j], searchTerms);\n                    }\n                    searchTerms.push(item.term);\n                }\n            }\n            deferred.resolve({\n                idToSearchTerms: idToSearchTerms,\n                missingTerms: missingTerms.values(),\n                ids: ids.values(),\n                results: results,\n                tokens: tokens\n            });\n        } else {\n            deferred.resolve(results.term.map(function (t) {\n                return t.term;\n            }));\n        }\n    }).fail(function () {\n        deferred.resolve(getIds ? {\n                idToSearchTerms: new morpheus.Map(),\n                missingTerms: [],\n                ids: [],\n                results: [],\n                tokens: tokens\n            } : []);\n    });\n    return deferred;\n};\n\nexports.getSearchTermCountsNoGenetic = function(tokens, where) {\n  var deferred = $.Deferred();\n  if (tokens.length === 0) {\n    return deferred.resolve([]);\n  }\n  var orQuery = []; // inq queries are not working\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    token = token.replace(new RegExp('\"', 'g'), ''); // replace quotes\n    token = token.toLowerCase();\n    orQuery.push({iterm: token});\n  }\n\n  where.or = orQuery;\n  $.ajax(clue.API_URL + '/api/search_terms/?filter=' + JSON.stringify({\n      fields: ['ids', 'term'],\n      where: where\n    })).done(function (results) {\n    var missingTerms = new morpheus.Set();\n    for (var i = 0; i < tokens.length; i++) {\n      missingTerms.add(orQuery[i].iterm);\n    }\n    var searchTermCounts = new morpheus.Map();\n\n    for (var i = 0; i < results.length; i++) {\n      var item = results[i];\n      item.ids = _.reject(item.ids, function(id){ return id.startsWith('CCSBBROAD') || id.startsWith('CGS'); });\n      searchTermCounts.set(item.term,item.ids.length);\n      missingTerms.remove(item.term.toLowerCase());\n    }\n    deferred.resolve({\n      searchTermCounts: searchTermCounts,\n      missingTerms: missingTerms.values(),\n      results: results,\n      tokens: tokens\n    });\n  }).fail(function () {\n    deferred.resolve([]);\n  });\n  return deferred;\n};\n\nexports.getSearchTermCounts = function(tokens, where) {\n    var deferred = $.Deferred();\n    if (tokens.length === 0) {\n        return deferred.resolve([]);\n    }\n    var orQuery = []; // inq queries are not working\n    for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        token = token.replace(new RegExp('\"', 'g'), ''); // replace quotes\n        token = token.toLowerCase();\n        orQuery.push({iterm: token});\n    }\n\n    where.or = orQuery;\n    $.ajax(clue.API_URL + '/api/search_terms/?filter=' + JSON.stringify({\n            fields: ['ids', 'term'],\n            where: where\n        })).done(function (results) {\n            var missingTerms = new morpheus.Set();\n            for (var i = 0; i < tokens.length; i++) {\n                missingTerms.add(orQuery[i].iterm);\n            }\n            var searchTermCounts = new morpheus.Map();\n\n            for (var i = 0; i < results.length; i++) {\n                var item = results[i];\n                searchTermCounts.set(item.term,item.ids.length);\n                missingTerms.remove(item.term.toLowerCase());\n            }\n            deferred.resolve({\n                searchTermCounts: searchTermCounts,\n                missingTerms: missingTerms.values(),\n                results: results,\n                tokens: tokens\n            });\n    }).fail(function () {\n        deferred.resolve([]);\n    });\n    return deferred;\n};\n\n\n\n\n\nvar PERTS = ['imatinib', 'BRAF', 'CDK inhibitor'];\nvar GENES = ['BRAF', 'KRAS', 'TP53'];\n//shared?\n\nfunction splitArgs(cmd, text) {\n  var text = text.substring(cmd.length).trim().replace(new RegExp('[“”]', 'g'),'\"');\n  var tokens = morpheus.Util.getAutocompleteTokens(text);\n  var ids = [];\n  tokens.forEach(function (p) {\n    p = p.trim();\n    if (p !== '') {\n      ids.push(p);\n    }\n  });\n  return ids;\n}\n\nexports.analyticsCommandLaunchBar = function(sourceCommand, destCommand, fullCommand) {\n  if (window.location.hostname === 'clue.io') {\n    if (typeof ga === 'undefined') {\n      (function (i, s, o, g, r, a, m) {\n        i['GoogleAnalyticsObject'] = r;\n        i[r] = i[r] || function () {\n            (i[r].q = i[r].q || []).push(arguments);\n          }, i[r].l = 1 * new Date();\n        a = s.createElement(o), m = s.getElementsByTagName(o)[0];\n        a.async = 1;\n        a.src = g;\n        m.parentNode.insertBefore(a, m);\n      })(window, document, 'script', '//www.google-analytics.com/analytics.js',\n        'ga');\n    }\n    ga('create', 'UA-62656334-1', 'auto', 'clue');\n    if (clue.getUserName() != null) {\n      ga('clue.set', 'clue_user', clue.getUserName());\n    }\n    var eventAction = sourceCommand + ' => ' + destCommand;\n    ga('clue.send', 'event', 'Command (Launch)', eventAction, fullCommand);\n  }\n};\n\nfunction analyticsCommandSearch(commandName, fullCommand) {\n  if (window.location.hostname === 'clue.io') {\n    if (typeof ga === 'undefined') {\n      (function (i, s, o, g, r, a, m) {\n        i['GoogleAnalyticsObject'] = r;\n        i[r] = i[r] || function () {\n            (i[r].q = i[r].q || []).push(arguments);\n          }, i[r].l = 1 * new Date();\n        a = s.createElement(o), m = s.getElementsByTagName(o)[0];\n        a.async = 1;\n        a.src = g;\n        m.parentNode.insertBefore(a, m);\n      })(window, document, 'script', '//www.google-analytics.com/analytics.js',\n        'ga');\n    }\n    ga('create', 'UA-62656334-1', 'auto', 'clue');\n    if (clue.getUserName() != null) {\n      ga('clue.set', 'clue_user', clue.getUserName());\n    }\n    ga('clue.send', 'event', 'Command', commandName, fullCommand);\n  }\n}\n\n\nfunction getPertTypeIcon(type) {\n  if (type === 'trt_cp') {\n    return '<i class=\"text-center glyphicon glyphicon-adjust touchstone-cp\"></i>';\n  } else if (type === 'trt_sh.cgs') {\n    return '<i class=\"text-center glyphicon glyphicon-minus-sign touchstone-kd\"></i>';\n  } else if (type === 'trt_oe') {\n    return '<i class=\"text-center glyphicon glyphicon-plus-sign touchstone-oe\"></i>';\n  } else {\n    return type;\n  }\n}\n\nfunction showPertTable(options) {\n  return new tablelegs.Table({\n    height: '412px',\n    columnPicker: true,\n    tableClass: 'slick-table slick-bordered-table slick-hover-table',\n    select: true,\n    search: true,\n    export: true,\n    rowHeight: 18,\n    $el: options.$el,\n    columns: [\n      {\n        field: 'pert_iname',\n        name: 'Name'\n      }, {\n        field: 'pert_type',\n        name: 'Type',\n        renderer: function (item, value) {\n          return getPertTypeIcon(value);\n        }\n      }, {\n        field: 'pert_id',\n        name: 'Perturbagen Id'\n      }, {\n        field: 'target',\n        name: 'Target'\n      }, {\n        field: 'moa',\n        name: 'MOA'\n      }],\n    items: options.items\n  });\n}\n\nfunction getPertIds(tokens) {\n  return exports.getSearchTerms(tokens, {type: 'pert'}, true);\n}\n\nfunction getCellIds(tokens) {\n  return exports.getSearchTerms(tokens, {type: 'cell'}, true);\n}\n\nfunction getGeneIds(tokens, fields) {\n  return exports.getSearchTerms(tokens, {type: 'gene'}, true);\n\n}\n\nfunction getSetIds(tokens) {\n  return exports.getSearchTerms(tokens, {subtype: 'pcl'}, false);\n}\n\nfunction argsError(options) {\n  var core = __webpack_require__(/*! Shared/core.js */ \"./public/js/local/command/dist/shared/core.js\");\n  var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n  var selectedAction = options.action;\n  var str = [];\n  str.push('<div class=\"row pad-top-12\"><div class=\"cmd-message\">');\n  if(options.errorMessage) {\n    str.push(options.errorMessage);\n  }\n  else {\n    var min = selectedAction.input[0].min != null ? selectedAction.input[0].min : 1;\n    var input = selectedAction.input[0].name;\n    if (min === 0) {\n      min = 'zero';\n    } else if (min === 1) {\n      min = 'one';\n    } else if (min === 2) {\n      min = 'two';\n    }\n\n    str.push('<p><code>' + selectedAction.command + '</code></p>');\n    str.push('<p>' + selectedAction.help + '</p>');\n    if (input === core.TYPE_PERT) {\n      str.push('<p>Please enter ' + min +\n        ' or more valid ' +\n        ' MoAs, perturbagen' +\n        ' classes,' +\n        ' gene targets,' +\n        ' assays,' +\n        ' perturbagen names or perturbagen ids.</p>');\n    } else if (input === core.TYPE_GENE) {\n      str.push('<p>Please enter ' + min + ' or more valid gene symbols or gene families.</p>');\n    } else if (input === core.TYPE_PCL) {\n      str.push('<p>Please enter ' + min + ' or more valid perturbagen class ids.</p>');\n    }\n\n    if (selectedAction.argsHelp) {\n      str.push(selectedAction.argsHelp);\n    }\n\n    if (selectedAction.example) {\n      str.push('<h4>Example' + ( selectedAction.example.length === 1 ? '' : 's') + '</h4>');\n      str.push('<ul data-name=\"example\"></ul>');\n    } else {\n      if (input === 'perturbagens') {\n        str.push('<br /><br />Example: <ul>');\n        str.push('<li><a class=\"code-box\"' +\n          ' href=\"#\" data-example=\"' + selectedAction.command + ',' + PERTS.join(',') + '\">' + selectedAction.command +\n          ' ' + PERTS.join(' ') + '</a></li>');\n        str.push('</ul>');\n      } else if (input === 'genes') {\n        str.push('<br /><br />Example: <ul>');\n        str.push('<li><a class=\"code-box\"' +\n          ' href=\"#\" data-example=\"' + selectedAction.command + ',' + GENES.join(',') + '\">' + selectedAction.command +\n          ' ' + GENES.join(' ') + '</a></li>');\n        str.push('</ul>');\n      }\n    }\n  }\n  str.push('</div></div>');\n  var $el = utils.getCommandHeader(options.text, null, false);\n  $el.append(str.join(''));\n  if (selectedAction && selectedAction.example) {\n    var $example = $el.find('[data-name=example]');\n    selectedAction.example.forEach(function (ex) {\n      var $li = $('<li><h6>' + ex.desc + '</h6></li>');\n      var s = [];\n      var tokens = ex.command.split(',');\n      for (var i = 0; i < tokens.length; i++) {\n        if (tokens[i].indexOf(' ') !== -1) {\n          tokens[i] = '\"' + tokens[i] + '\"';\n        }\n      }\n\n      var $a = $('<a class=\"code-box\" href=\"#\">' + selectedAction.command + ' ' + tokens.join(' ') + '</a>');\n      $a.data('example', selectedAction.command + ',' + ex.command);\n      $a.appendTo($li);\n      $li.appendTo($example);\n    });\n  }\n\n  return $el;\n\n}\n\nexports.updateMissingTerms = function(missingTerms) {\n  var $commandErrors = $('#commandErrors');\n  if (missingTerms != null && missingTerms.length > 0) {\n    $commandErrors.html('> ERROR: ' + missingTerms.map(function (term) {\n        return '\"' + term.toUpperCase() + '\"';\n      }).join(', ') + ' NOT' +\n      ' FOUND IN OUR' +\n      ' DATABASE').show();\n  } else {\n    $commandErrors.hide();\n  }\n};\n\nexports.search = function(text, tabManager, addToHistory, commandHistory) {\n  var core = __webpack_require__(/*! Shared/core.js */ \"./public/js/local/command/dist/shared/core.js\");\n  var utils = __webpack_require__(/*! Shared/utils.js */ \"./public/js/local/command/dist/shared/utils.js\");\n\n  text = text.trim();\n  if (text === '') {\n    return;\n  }\n\n  if (addToHistory) {\n    commandHistory.push(text);\n    if (commandHistory.length > 20) {\n      commandHistory = commandHistory.slice(0, 20);\n    }\n    // TODO keep track of full session\n  }\n  window.history.pushState({q: text}, '', (window.location.pathname === '/' ? '/command' : '') + '?q=' + text);\n  var lcText = text.toLowerCase();\n  var selectedAction = null;\n  var commandName = 'N/A';\n  // see if any tabs are open that match command\n  var foundTabId = null;\n  try {\n    tabManager.getIdToTabObject().forEach(function (obj, id) {\n      if (obj.reload && obj.command.toLowerCase() === lcText) {\n        foundTabId = id;\n        throw 'break';\n      }\n    });\n  }\n  catch (x) {\n    ; // break out of loop\n  }\n  if (text.startsWith('/home')) {\n    foundTabId = 'morpheus-tab1';\n  }\n  if (foundTabId != null) {\n    tabManager.setActiveTab(foundTabId);\n    return;\n  }\n  var $tabContent = $('<div><div class=\"pull-right\" data-name=\"matches\"></div><div' +\n    ' data-name=\"content\"></div><div' +\n    ' style=\"col-xs-12\" data-name=\"loading\"></div></div>');\n  var $el = $tabContent.find('[data-name=content]');\n  var truncatedCommand = text.length > 80 ? text.substring(0, 80) : text;\n  truncatedCommand = truncatedCommand.replace(/\\//ig, '');\n  var tab;\n  var d = $.Deferred();\n  if (text[0] === '/') {\n    // TODO BW: this only matches substring, /moasdfgm imatinib = /moa sdfgm imatinib\n    for (var i = 0; i < core.actions.length; i++) {\n      var action = core.actions[i];\n      if (lcText.indexOf(action.command) === 0) {\n        selectedAction = action;\n        commandName = action.command;\n        break;\n      }\n    }\n    var tabContent = {\n      $el: $tabContent,\n      closeable: true,\n      rename: true,\n      focus: true,\n      object: {\n        command: text,\n        reload: true,\n        truncatedCommand: truncatedCommand,\n        commandName: selectedAction.command,\n        $el: $tabContent,\n        tabManager: tabManager\n      }\n    };\n    if (selectedAction == null) {\n      tabContent.title = 'error';\n      tab = tabManager.add(tabContent);\n      d.reject(argsError({\n        text: text,\n        errorMessage: text + ' is not a valid command.'\n      }));\n    }\n    else {\n      // tabContent.title = selectedAction.command.substring(1); // remove slash\n      tabContent.title = text.substring(0, Math.min(text.length, 16));\n      if (text.length >= 16) {\n        tabContent.title += '...';\n      }\n      tab = tabManager.add(tabContent);\n      var $loading = clue.createLoadingEl();\n      $loading.appendTo($tabContent.find('[data-name=loading]'));\n\n      var args = splitArgs(selectedAction.command, text);\n      var input = selectedAction.input ? selectedAction.input[0] : null;\n      var min = input.min != null ? input.min : 1;\n      if (args.length < min) {\n        // TODO handle this better\n        d.reject(argsError({\n          text: text,\n          action: selectedAction,\n          args: null\n        }));\n      }\n      if (input.name === core.TYPE_PERT) {\n        getPertIds(args, {\n          type: input.type\n        }).done(function (result) {\n          var ids = result.ids;\n          if (ids.length === 1 && selectedAction.one) {\n            selectedAction.one(ids[0]).done(function (ids) {\n              d.resolve(ids);\n            }).fail(function () {\n              d.reject();\n            });\n          } else if (ids.length < min) {\n            d.reject(argsError({\n              text: text,\n              action: selectedAction,\n              args: ids\n            }));\n          } else {\n            tabContent.object.missingTerms = result.missingTerms;\n            exports.updateMissingTerms(tabContent.object.missingTerms);\n            //   showTermInterpretation(result, core.TYPE_PERT);\n            d.resolve(result);\n          }\n        }).fail(function () {\n          d.reject();\n        });\n      } else if (input.name === core.TYPE_CELL) {\n        getCellIds(args).done(function (result) {\n          var ids = result.ids;\n          if (ids.length < min) {\n            d.reject(argsError({\n              text: text,\n              action: selectedAction,\n              args: ids\n            }));\n          } else {\n            tabContent.object.missingTerms = result.missingTerms;\n            exports.updateMissingTerms(tabContent.object.missingTerms);\n            // showTermInterpretation(result, core.TYPE_CELL);\n            d.resolve(result);\n          }\n        }).fail(function () {\n          d.reject();\n        });\n      } else if (input.name === core.TYPE_GENE) {\n        getGeneIds(args, input.fields).done(function (result) {\n          if (result.ids.length < min) {\n            d.reject(argsError({\n              text: text,\n              action: selectedAction,\n              args: result.ids\n            }));\n          } else {\n            tabContent.object.missingTerms = result.missingTerms;\n            exports.updateMissingTerms(tabContent.object.missingTerms);\n            d.resolve(result);\n          }\n        }).fail(function () {\n          d.reject();\n        });\n      } else if (input.name === core.TYPE_PCL) {\n        getSetIds(args).done(function (ids) {\n          if (ids.length < min) {\n            d.reject(argsError({\n              text: text,\n              action: selectedAction,\n              args: ids\n            }));\n          } else {\n            exports.updateMissingTerms(); // FIXME\n            d.resolve({\n              ids: ids,\n              tokens: args\n            });\n          }\n        }).fail(function () {\n          d.reject();\n        });\n      } else {\n        if (args.length < min) {\n          d.reject(argsError({\n            text: text,\n            action: selectedAction,\n            args: args\n          }));\n        } else {\n          d.resolve(args);\n        }\n      }\n    }\n  }\n  else {\n    var tabContent = {\n      $el: $tabContent,\n      closeable: true,\n      rename: true,\n      focus: true,\n      object: {\n        command: text,\n        reload: true,\n        truncatedCommand: truncatedCommand\n      }\n    };\n    // TODO BW: if missing '/', only looks at perts\n    tabContent.title = text.substring(0, Math.min(text.length, 16));\n    if (text.length >= 16) {\n      tabContent.title += '...';\n    }\n    tab = tabManager.add(tabContent);\n    getPertIds(splitArgs('', text), {}).done(function (result) {\n      var ids = result.ids;\n      if (ids.length === 0) {\n        d.reject(argsError({\n          text: text,\n          errorMessage: text + ' not found in database.'\n        }));\n      } else {\n        tabContent.object.missingTerms = result.missingTerms;\n        exports.updateMissingTerms(tabContent.object.missingTerms);\n        var lookupCommand = {\n          show: function (options) {\n            var d = $.Deferred();\n            var $el = options.$el;\n            // FIXME\n            options.ids.forEach(function(str,idx) {\n              options.ids[idx] = str.replace(/ccsbbroad/i, 'ccsbBroad');\n            });\n            $.ajax(clue.API_URL + '/api/perts?filter=' + JSON.stringify({\n                fields: ['pert_id', 'pert_type', 'moa', 'target', 'pert_iname'],\n                where: {pert_id: {inq: options.ids}}\n              })).done(function (results) {\n\n              var cardId = _.uniqueId('card');\n              var $launchBar = null;\n              if (results.length === 1) {\n                var $tmp = $('<div class=\"row\"><div class=\"col-xs-12 col-sm-6 col-sm-offset-1\">' +\n                  '<div id=\"' + cardId + '\"></div></div>' +\n                  '<div class=\"col-sm-4\"><div class=\"launch-panel\" data-section=\"launchBar\"><br><hr></div></div></div>');\n                $tmp.appendTo($el);\n                $launchBar = $el.find('[data-section=\"launchBar\"]');\n                if (results[0].pert_type==='trt_cp') {\n                  utils.showLaunchOptions([results[0].pert_iname], 'pert', $launchBar, 'search', tabManager);\n                }\n                else {\n                  utils.showLaunchOptions([results[0].pert_iname], 'gene', $launchBar, 'search', tabManager);\n                }\n                $launchBar.find('[name=\"launchbar-header\"]').html('<br>');\n                /* $.pjax({\n                 push: false,\n                 url: getCardUrl(results[0]),\n                 container: '#' + cardId\n                 }); */\n                getCard(getCardUrl(results[0]), '#' + cardId);\n              } else {\n                var $tableEl = $('<div class=\"col-sm-9 col-xs-12\"></div>'); // leave space for card\n                $tableEl.appendTo($el);\n                var $sidebarEl = $('<div class=\"col-sm-3 col-xs-12\">' +\n                  '<div class=\"launch-panel\" data-section=\"launchBar\">' +\n                  '<h3>Nothing selected</h3><br><hr>Select one or more rows to see additional options</div>' +\n                  '<div class=\"pad-bottom-16\"></div>' +\n                  '<div id=\"' + cardId + '\"></div></div>');\n                $sidebarEl.appendTo($el);\n                var table = showPertTable({\n                  items: results,\n                  $el: $tableEl\n                });\n\n                $launchBar = $el.find('[data-section=\"launchBar\"]');\n                table.on('selectionChanged', function (e) {\n                  var row = e.selectedRows[0];\n                  if (row !== undefined) {\n                    // if (results[0].pert_type==='trt_cp') {\n                    //   utils.showLaunchOptions([results[0].pert_iname], 'pert', $launchBar, 'search', tabManager);\n                    // }\n                    // else {\n                    //   utils.showLaunchOptions([results[0].pert_iname], 'gene', $launchBar, 'search', tabManager);\n                    // }\n                    var item = table.getItems()[row];\n                    if (e.selectedRows.length===1 && item.pert_type!='trt_cp') {\n                      utils.showLaunchOptions([item.pert_iname], 'gene', $launchBar, 'search', tabManager);\n                    }\n                    else {\n                      var ids = _.map(e.selectedRows, function(num) {\n                        return table.getItems()[num].pert_iname;\n                      });\n                      utils.showLaunchOptions(ids, 'pert', $launchBar, 'search', tabManager);\n                    }\n                    /* $.pjax({\n                     push: false,\n                     url: getCardUrl(item),\n                     container: '#' + cardId\n                     }); */\n                    getCard(getCardUrl(item), '#' + cardId);\n                  }\n\n                });\n\n              }\n              d.resolve();\n            }).fail(function () {\n              d.reject();\n            });\n            return d;\n          }\n        };\n        selectedAction = lookupCommand;\n        d.resolve(result);\n      }\n    }).fail(function () {\n      d.reject();\n    });\n  }\n  function showError(err) {\n    tabContent.object.reload = false;\n    $tabContent.find('[data-name=loading]').remove();\n    var $content = $tabContent.find('[data-name=content]');\n    $content.addClass('cmd-message');\n    if (err) {\n      $tabContent.html(err);\n    } else {\n\n      $content.html('<h1>Error</h1><p>An unexpected error occurred. Please try again.</p>');\n    }\n  }\n\n  d.done(function (result) {\n    $el.append(utils.getCommandHeader(text, tab.id, true));\n    var actionCallback = selectedAction.show({\n      ids: result.ids,\n      tokens: result.tokens,\n      idToSearchTerms: result.idToSearchTerms,\n      $el: $el,\n      object: tabContent.object\n    });\n    if (actionCallback == null) {\n      $tabContent.find('[data-name=loading]').remove();\n    } else {\n      actionCallback.done(function () {\n        $tabContent.find('[data-name=loading]').hide();\n      });\n      actionCallback.fail(function (err) {\n        showError(err);\n      });\n    }\n\n    tabManager.setTabTitle(tab.id, text);\n  }).fail(function (err) {\n    showError(err);\n  }).always(function () {\n  });\n\n  analyticsCommandSearch(commandName,lcText);\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/shared/search.js?");

/***/ }),

/***/ "./public/js/local/command/dist/shared/utils.js":
/*!******************************************************!*\
  !*** ./public/js/local/command/dist/shared/utils.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n//creategroupedheatmap, conn, tas, sar\nexports.quickMorpheusToolbar = function(options) {\n    options = options || {};\n    return $.extend({}, {\n        dimensions: false,\n        zoom: false,\n        searchRows: false,\n        searchColumns: false,\n        searchValues: false,\n        options: false,\n        saveImage: true,\n        filter: false,\n        colorKey: false\n    }, options);\n};\n\nexports.getCommandHeader = function(title, tabId, showExport) {\n    if(title.length>100) {\n      title = title.slice(0,100)+' ...';\n    }\n\n    var exportHtml = '';\n    var modalHtml = '';\n    if(showExport) {\n      var modalId = 'export-' + tabId;\n        exportHtml = '<button type=\"button\" data-toggle=\"modal\" data-target=\"#' + modalId + '\" class=\"export-btn\">' +\n            '<i class=\"fa fa-floppy-o\">&nbsp;&nbsp;</i>' +\n            '&nbsp;Export as... &nbsp;&nbsp;' +\n            '</button>';\n        // exportHtml = '<div class=\"btn-group\">' +\n        // '<button type=\"button\" data-toggle=\"modal\" data-target=\"#' + modalId + '\" class=\"btn btn-sm export-btn\"> <i class=\"fa fa-floppy-o\"></i><span class=\"hidden-xs hidden-sm\">Export as...</span></button>' +\n        // '</div>';\n        modalHtml = '<div id=\"' + modalId + '\" role=\"dialog\" aria-labelledby=\"contactModal\" aria-hidden=\"true\" class=\"modal fade in export-modal\">' +\n            '<div class=\"modal-dialog\">' +\n            '<div class=\"modal-content\">' +\n            '<form>' +\n            '<div class=\"modal-body\">' +\n            '<div class=\"row\">' +\n            '<p class=\"export-title\">Export Options:</p>' +\n            '<div class=\"col-xs-12 export-options\"></div>' +\n            '</div>' +\n            '<div class=\"row pad-bottom-12\">' +\n            '<hr/>' +\n            '<div class=\"col-xs-12 text-center\">' +\n            '<input type=\"text\" placeholder=\"Enter your filename here (e.g. &quot;command_output&quot;)\" class=\"export-filename-prompt\"/>' +\n            '</div>' +\n            '<div class=\"col-xs-12 text-center pad-bottom-12\">' +\n            '<button type=\"button\" class=\"export-btn-cancel\">Cancel</button>' +\n            '<button type=\"button\" class=\"export-btn-confirm\">Export</button>' +\n            '</div>' +\n            '<div class=\"col-xs-12 export-pending\"></div>' +\n            '<div class=\"col-xs-12 text-warning export-warning\"></div>' +\n            '</div>' +\n            '</div>' +\n            '</form>' +\n            '</div>' +\n            '</div>' +\n            '</div>';\n    }\n\n    return $(modalHtml + '<div class=\"command-header\">' +\n        '<div class=\"row pad-top-4 pad-bottom-8 commandline-tab-header\">' +\n      '<div class=\"col-xs-8\">' +\n        '<div class=\"commandline-tab-title\">' + title + '</div>' +\n        '</div>' +\n      '<div class=\"col-xs-4 pad-top-8\">' +\n        '<div class=\"init-hide input-interpretation\">' +\n        '<span class=\"dropdown pull-right\">' +\n      '<button type=\"button\" data-toggle=\"dropdown\" class=\"dropdown-toggle dropdown-button\">' +\n      '<span class=\"pull-left active-option\">Input Interpretation</span>' +\n        '<span class=\"pull-right caret\"></span>' +\n        '</button>' +\n      '<ul class=\"dropdown-menu dropdown-menu-right input-interpretation-options\"></ul>' +\n        '</span>' +\n        '</div>' +\n      '</div>' +\n        '</div>' +\n        '<div class=\"row pad-bottom-8 commandline-tab-header-options\">' +\n        '<div class=\"col-xs-8 header-display-options\">' +\n      '</div>' +\n        '<div class=\"col-xs-4\">' +\n        '<div class=\"pull-right command-out-links init-hide\">' + exportHtml + '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div>');\n\n// return $(modalHtml + '<div class=\"full-width-section\">' +\n//     '<div class=\"row app-tab-header\">' +\n//     '<div class=\"col-xs-12 col-sm-8\">' +\n//     '<div class=\"app-tab-title\">' + title + '</div>' +\n//     '</div>' +\n//     '<div class=\"col-xs-7 col-sm-4\">' +\n//     '<div class=\"btn-toolbar pad-top-8\" role=\"toolbar\">' +\n//     '<div class=\"btn-group dropdown-with-headings subheading-options pull-right-sm pull-right-md pull-right-lg\">' +\n//     //this part goes off screen easily and doesn't generate options, so using old version\n//     //'<label class=\"pull-left visible-lg\">Input interpretation:</label>' +\n//     '<button type=\"button\" data-toggle=\"dropdown\" class=\"dropdown-toggle dropdown-button\">' +\n//     '<span class=\"pull-left active-option\">Input Interpretation</span>' +\n//     '<span class=\"pull-right caret\"></span>' +\n//     '</button>' +\n//     '<ul class=\"dropdown-menu dropdown-menu-right input-interpretation-options\"></ul>' +\n//     '</div>' +\n//     '</div>' +\n//     '</div>' +\n//     '<div class=\"col-xs-5 col-sm-3 col-sm-push-9 col-md-4 col-md-push-8\">' +\n//     '<div class=\"pad-top-8 visible-xs\"></div>' +\n//     '<div class=\"btn-toolbar pull-right command-out-links init-hide\" role=\"toolbar\">' +\n//     exportHtml +\n//     '</div>' +\n//     '</div>' +\n//     //start here\n//     '</div>' +\n//     '</div>' +\n//     '');\n//\n// var x = $('<div class=\"full-width-section\">\\n' +\n//     '  <div class=\"row app-tab-header\">\\n' +\n//     '    <div class=\"col-xs-12 col-sm-8\">\\n' +\n//     '      <div class=\"app-tab-title\">Top connections for BRAF</div>\\n' +\n//     '    </div>\\n' +\n//\n//\n//     '    <div class=\"col-xs-7 col-sm-4\">\\n' +\n//     '      <div class=\"btn-toolbar pad-top-8\" role=\"toolbar\">\\n' +\n//     '        <div class=\"btn-group dropdown-with-headings subheading-options pull-right-sm pull-right-md pull-right-lg\">\\n' +\n//     '          <label class=\"pull-left visible-lg\">Input interpretation:</label>\\n' +\n//     '          <button class=\"btn dropdown-toggle dropdown-toggle pull-right\" type=\"button\" data-toggle=\"dropdown\"><span class=\"active-option pull-left\">Top connections (L1000)</span><span class=\"caret\"></span></button>\\n' +\n//\n//\n//\n//\n//\n//     '          <ul class=\"dropdown-menu pos-right-sm\" role=\"menu\">\\n' +\n//     '            <h6>Top connections</h6>\\n' +\n//     '            <p>\\n' +\n//     '              Show top connections between\\n' +\n//     '              selected perturbagens and the\\n' +\n//     '              reference Touchstone dataset\\n' +\n//     '            </p>\\n' +\n//     '            <li><a class=\"active\">Gene expression (L1000)</a></li>\\n' +\n//     '            <li><a>Histone profiling (GCP)</a></li>\\n' +\n//     '            <li><a>Phosphoproteomics (P100)</a></li>\\n' +\n//     '            <li class=\"divider\"></li>\\n' +\n//     '            <h6>Introspect</h6>\\n' +\n//     '            <p>View internal connectivities between selected perturbagens</p>\\n' +\n//     '            <li class=\"disabled\"><a>Gene expression (L1000)\\n' +\n//     '                <p>(No data available)</p></a></li>\\n' +\n//     '            <li><a>Histone profiling (GCP)</a></li>\\n' +\n//     '            <li><a>Phosphoproteomics (P100)</a></li>\\n' +\n//     '          </ul>\\n' +\n//\n//\n//\n//\n//\n//     '        </div>\\n' +\n//     '      </div>\\n' +\n//     '    </div>\\n' +\n//\n//\n//\n//\n//\n//     '    <div class=\"col-xs-5 col-sm-3 col-sm-push-9 col-md-4 col-md-push-8\">\\n' +\n//     '      <div class=\"pad-top-8 visible-xs\"></div>\\n' +\n//     '      <div class=\"btn-toolbar pull-right\" role=\"toolbar\">\\n' +\n//     '        <label class=\"pull-left btn-sm hidden-xs hidden-sm\">See all connections: </label>\\n' +\n//     '        <button class=\"btn btn-sm btn-send-to-app\"><i class=\"fa fa-align-left\"></i></button>\\n' +\n//     '        <button class=\"btn btn-sm btn-send-to-app\"><i class=\"fa fa-th\"></i></button>\\n' +\n//     '        <div class=\"btn-group\">\\n' +\n//     '          <button class=\"btn btn-sm\"> <i class=\"fa fa-floppy-o\"></i><span class=\"hidden-xs hidden-sm\">Export as...</span></button>\\n' +\n//     '        </div>\\n' +\n//     '      </div>\\n' +\n//     '    </div>\\n' +\n//\n//\n//\n//     //stopped here\n//\n//     '    <div class=\"col-xs-12 col-sm-9 col-sm-pull-3 col-md-8 col-md-pull-4\">\\n' +\n//     '      <div class=\"pad-top-8 visible-xs\"></div>\\n' +\n//     '      <div class=\"btn-toolbar labels-first\" role=\"toolbar\">\\n' +\n//     '        <div class=\"btn-group\">\\n' +\n//     '          <label class=\"btn-sm pull-left\">Cell lines:</label>\\n' +\n//     '          <div class=\"btn-group\">\\n' +\n//     '            <select class=\"selectpicker\" multiple=\"multiple\" data-width=\"fit\" data-selected-text-format=\"count &gt; 3\">Cell line\\n' +\n//     '              <option>Summary</option>\\n' +\n//     '              <option>A375</option>\\n' +\n//     '              <option>A549</option>\\n' +\n//     '              <option>HA1E</option>\\n' +\n//     '              <option>HCC515</option>\\n' +\n//     '              <option>HCC515</option>\\n' +\n//     '              <option>HEPG2</option>\\n' +\n//     '              <option>HT29</option>\\n' +\n//     '              <option>MCF7</option>\\n' +\n//     '              <option>PC3</option>\\n' +\n//     '              <option>VCAP</option>\\n' +\n//     '            </select>\\n' +\n//     '          </div>\\n' +\n//     '        </div>\\n' +\n//     '        <div class=\"btn-group\">\\n' +\n//     '          <label class=\"btn-sm pull-left\">Perturbagens:</label>\\n' +\n//     '          <div class=\"btn-group\">\\n' +\n//     '            <select class=\"selectpicker\" multiple=\"multiple\" data-width=\"fit\" data-selected-text-format=\"count &gt; 3\">Pert type\\n' +\n//     '              <optgroup>\\n' +\n//     '                <option>OE</option>\\n' +\n//     '                <option>KD</option>\\n' +\n//     '                <option>CRISPR</option>\\n' +\n//     '                <option>Mutant</option>\\n' +\n//     '                <option>CP</option>\\n' +\n//     '              </optgroup>\\n' +\n//     '              <optgroup>\\n' +\n//     '                <option>Targeting compounds</option>\\n' +\n//     '              </optgroup>\\n' +\n//     '            </select>\\n' +\n//     '          </div>\\n' +\n//     '        </div>\\n' +\n//     '        <div class=\"btn-group\">\\n' +\n//     '          <label class=\"btn-sm pull-left\">Group by:</label>\\n' +\n//     '          <div class=\"btn-group\">\\n' +\n//     '            <select class=\"selectpicker select-single\" data-width=\"fit\">Pert type\\n' +\n//     '              <optgroup label=\"Columns\">\\n' +\n//     '                <option>Cell line</option>\\n' +\n//     '                <option>Index perturbagen</option>\\n' +\n//     '              </optgroup>\\n' +\n//     '            </select>\\n' +\n//     '          </div>\\n' +\n//     '        </div>\\n' +\n//     '      </div>\\n' +\n//     '    </div>\\n' +\n//     '  </div>\\n' +\n//     '</div>');\n};\n\n//one ready (twice)\nexports.getTopRowIndices = function(dataset) {\n    var ids = new morpheus.Set();\n    // show union of top/bottom 20 most similar\n    var project = new morpheus.Project(dataset);\n    for (var j = 0, ncols = dataset.getColumnCount(); j < ncols; j++) {\n        project.setRowSortKeys([new morpheus.SortByValuesKey([j], morpheus.SortKey.SortOrder.DESCENDING, false)], true);\n        var sortedDataset = project.getSortedFilteredDataset();\n        var idVector = sortedDataset.getRowMetadata().getByName('id');\n        for (var i = 0; i < 20; i++) {\n            ids.add(idVector.getValue(i));\n        }\n        for (var i = 0, j = idVector.size() - 1; i < 20; i++, j--) {\n            ids.add(idVector.getValue(j));\n        }\n    }\n    var rowIndices = [];\n    var idToRowIndex = morpheus.VectorUtil.createValueToIndexMap(dataset.getRowMetadata().getByName('id'));\n    ids.forEach(function (id) {\n        rowIndices.push(idToRowIndex.get(id));\n    });\n    return rowIndices;\n};\n\nexports.getHeatMapSelection = function(heatMap, field, isRows) {\n  // reverse viewIndices to show most recent first\n  if(isRows) {\n    var viewIndices = heatMap.getProject().getRowSelectionModel().getViewIndices().values().reverse();\n    var fieldVector = heatMap.getProject()\n      .getSortedFilteredDataset()\n      .getRowMetadata()\n      .getByName(field);\n  }\n  else {\n    var viewIndices = heatMap.getProject().getColumnSelectionModel().getViewIndices().values().reverse();\n    var fieldVector = heatMap.getProject()\n      .getSortedFilteredDataset()\n      .getColumnMetadata()\n      .getByName(field);\n  }\n  return viewIndices.map(function(idx) {\n    return fieldVector.getValue(idx);\n  });\n};\nfunction getButtonHtml(commandName,description) {\n  return '<div class=\"row\"><div class=\"col-sm-6\">' + description + '</div>' +\n    '<div class=\"col-sm-6\"><button type=\"button\" class=\"btn btn-send-to-app\" data-command=\"' + commandName +'\">' +\n    commandName + '</button></div></div>';\n}\nexports.showLaunchOptions = function(ids, type, $el, sourceCommand, tabManager) {\n  var search = __webpack_require__(/*! Shared/search.js */ \"./public/js/local/command/dist/shared/search.js\");\n  var core = __webpack_require__(/*! Shared/core.js */ \"./public/js/local/command/dist/shared/core.js\");\n  var $search = $('#homepage-search');\n  var $html = $('<div></div>');\n  var typePluralObj = {\n    pert:'perturbagens',\n    target:'genes',\n    gene:'genes',\n    moa:'MoAs'\n  };\n  var commandsHtml = {\n    '/conn': getButtonHtml('/conn','View top connections/internal connectivities'),\n    '/conn_gene': getButtonHtml('/conn',\"View relevant perturbagens' top connections/internal connectivities\"),\n    '/sig': getButtonHtml('/sig','View/download signatures'),\n    '/sig_gene': getButtonHtml('/sig','View/download relevant perturbagens'),\n    '/assay': getButtonHtml('/assay','Find assays profiled'),\n    '/gene-space': getButtonHtml('/gene-space','Find gene space'),\n    '/moa_pert': getButtonHtml('/moa','Find MoA annotations'),\n    '/moa_moa': getButtonHtml('/moa','Find compounds with matching MoAs'),\n    '/target': getButtonHtml('/target','Find gene targets')\n  };\n  var typePlural = typePluralObj[type];\n  var recCommands = [];\n  if (!typePlural) {\n    return;\n  }\n  var $header = $('<div name=\"launchbar-header\">');\n  if (ids.length === 0) {\n    $header.append('<h3>Nothing selected</h3><br><hr></div>Select a row/column to see additional options');\n    $html.append($header);\n    return;\n  }\n  else if (ids.length === 1) {\n    $header.append('<h2>' + ids[0] + '</h2>');\n  }\n  else if (ids.length === 2) {\n    $header.append('<h2>2 ' + typePlural + ' selected</h2>');\n    $header.append('<b>(' + ids[0] + ', ' + ids[1] + ')</b><br>');\n  }\n  else {\n    $header.append('<h2>' + ids.length + ' ' + typePlural + ' selected</h2>');\n    $header.append('<b>(' + ids[0] + ', ' + ids[1] + ', and ' + (ids.length - 2) + ' more)</b><br>')\n  }\n  $header.append('<hr>');\n  recCommands = getRecCommands(sourceCommand,type);\n  if(recCommands) {\n    $header.append('<h5><strong>Use selection to:</strong></h5><br></div>');\n    $html.append($header);\n    recCommands.forEach(function (command,idx) {\n      if(commandsHtml[command]) {\n        $html.append(commandsHtml[command]);\n        if(idx!=recCommands.length-1) {\n          $html.append('<div class=\"always-visible-hr\">');\n        }\n        else {\n          $html.append('<br>')\n        }\n      }\n    });\n  }\n  $el.html($html);\n\n  core.actions.forEach(function(action) {\n    var selector = '[data-command=\"' + action.command + '\"]';\n    $el.find(selector).click(function() {\n      var text = action.command + ' \"' + ids.join('\" \"') + '\"';\n      $search.val(text);\n      search.analyticsCommandLaunchBar(sourceCommand,action.command,text);\n      search.search(text, tabManager, false, null);\n    });\n  });\n  // use loop with actions array\n};\nfunction getRecCommands(sourceCommand, type) {\n  var recCommands = [];\n  switch (sourceCommand) {\n    case '/assay':\n      // assay (pass) and pert\n      recCommands = ['/conn', '/moa_pert', '/target', '/sig'];\n      break;\n    case '/moa':\n      // pert and moa\n      if(type==='pert') {\n        recCommands = ['/conn', '/sig', '/assay', '/target'];\n      }\n      else {\n        recCommands = ['/conn', '/sig', '/assay', '/moa_moa'];\n      }\n      break;\n    case '/target':\n      // pert and gene\n      if (type === 'pert') {\n        recCommands = ['/conn', '/sig', '/assay', '/moa_pert'];\n      }\n      else {\n        recCommands = ['/target', '/conn_gene', '/sig_gene', '/gene-space'];\n      }\n      break;\n    case 'search':\n      // pert and gene\n      if (type === 'pert') {\n        recCommands = ['/conn', '/sig'];\n      }\n      else {\n        recCommands = ['/conn_gene', '/sig_gene'];\n      }\n      break;\n    default:\n      break;\n  }\n  return recCommands;\n}\n\n//# sourceURL=webpack:///./public/js/local/command/dist/shared/utils.js?");

/***/ }),

/***/ "./public/js/local/command/dist/shared/zs.js":
/*!***************************************************!*\
  !*** ./public/js/local/command/dist/shared/zs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//sig, gene-mod\nvar GENE_INFO_LINES = null;\n\nexports.getZScoreDataset = function (sigIds, geneIds) {\n    var d = $.Deferred();\n    if (sigIds != null && sigIds.length > 100) {\n        return d.reject('Maximum of 100 signatures allowed.');\n    }\n\n    var promises = [];\n    var sigIdFields = [\n        'cell_id',\n        'pert_id',\n        'pert_iname',\n        'pert_type',\n        'pert_idose',\n        'pert_itime',\n        'distil_cc_q75',\n        'distil_ss'];\n    var sigIdToObject = new morpheus.Map();\n\n    if (sigIds != null) {\n        var sigFilter = {\n            fields: ['sig_id'].concat(sigIdFields),\n            where: {\n                sig_id: {inq: sigIds}\n            }\n        };\n        promises.push($.ajax(clue.API_URL + '/api/sigs?filter=' + JSON.stringify(sigFilter)).done(function (results) {\n            for (var i = 0; i < results.length; i++) {\n                sigIdToObject.set(results[i].sig_id, results[i]);\n            }\n        }));\n    } else {\n        var skip = 0;\n        var sigDef = $.Deferred();\n        promises.push(sigDef);\n        sigIds = [];\n        var batchSize = 200000;\n        var getMoreSigs = function () {\n            var sigFilter = {\n                fields: ['sig_id'].concat(sigIdFields),\n                limit: batchSize,\n                skip: skip\n            };\n            $.ajax(clue.API_URL + '/api/sigs?filter=' + JSON.stringify(sigFilter)).done(function (results) {\n                for (var i = 0; i < results.length; i++) {\n                    sigIds.push(results[i].sig_id);\n                    sigIdToObject.set(results[i].sig_id, results[i]);\n                }\n                skip += results.length;\n                if (results.length < batchSize) {\n                    sigDef.resolve();\n                } else {\n                    setTimeout(getMoreSigs, 1000);\n                }\n            }).fail(function () {\n                console.log('Error downloading signatures.');\n                return d.reject('Error downloading data. Please try again.');\n            });\n        };\n        getMoreSigs();\n    }\n\n    if (GENE_INFO_LINES == null) {\n        // pr_id   pr_gene_id      pr_gene_symbol  pr_gene_title   pr_is_lm        pr_is_bing      self_correlatio\n        promises.push($.ajax('https://s3.amazonaws.com/data.clue.io/l1kaig.chip').done(function (text) {\n            GENE_INFO_LINES = text.split('\\n');\n        }));\n    }\n    $.when.apply($, promises).fail(function () {\n        d.reject('Error downloading data. Please try again.');\n    }).done(function () {\n        if (geneIds != null) { // get pr_id for array of symbols\n            var tab = /\\t/;\n            // convert symbols to affy probe ids\n            var geneSymbolsSet = new morpheus.Set();\n            geneIds.forEach(function (id) {\n                geneSymbolsSet.add(id);\n            });\n            var header = GENE_INFO_LINES[0].split(tab);\n            var symbolColumn = header.indexOf('pr_gene_symbol');\n            var lmColumn = header.indexOf('pr_is_lm');\n            geneIds = [];\n            for (var i = 0; i < GENE_INFO_LINES.length; i++) {\n                var row = GENE_INFO_LINES[i].split(tab);\n                if (geneSymbolsSet.has(row[symbolColumn]) && row[lmColumn] == '1') {\n                    geneIds.push(row[0]);\n                }\n            }\n        }\n\n        if (geneIds == null) {\n            var sigIdStart = 0; // split into batches\n            var batchSize = 80;\n            var sigIdEnd = Math.min(batchSize, sigIds.length);\n            var datasets = [];\n            var batchDeferred = $.Deferred();\n\n            var getDataByIds = function () {\n                sigIdEnd = Math.min(sigIdEnd, sigIds.length);\n                var sigIdString = sigIds.slice(sigIdStart, sigIdEnd).join(' ');\n                var ds = morpheus.DatasetUtil.read(\n                    clue.API_URL + '/data-api/slice/?name=modzs&cquery=id:(' + encodeURIComponent(sigIdString) + ')');\n                ds.then(function (dataset) {\n                    datasets.push(dataset);\n                    sigIdStart = sigIdEnd;\n                    sigIdEnd += batchSize;\n                    d.notify(sigIdEnd / sigIds.length);\n                    if (sigIdEnd < sigIds.length) {\n                        getDataByIds();\n                    }\n                    else {\n                        batchDeferred.resolve();\n                    }\n\n                }).catch(function (ee) {\n                    console.log(ee)\n                    return d.reject('Error downloading data. Please try again.');\n                });\n\n            };\n            getDataByIds();\n        } else {\n            var start = 0; // split into batches\n            var end = 20000;\n            var nsigs = sigIds.length;\n            var datasets = [];\n            var batchDeferred = $.Deferred();\n            var numRetrieved = 0;\n            var getData = function () {\n                var ds = morpheus.DatasetUtil.read(\n                    clue.API_URL + '/data-api/slice/?name=modzs&cquery=INDEX:' + start + '..' + end + '&rquery=id:(' +\n                    encodeURIComponent(geneIds.join(' ') + ')'));\n                ds.then(function (dataset) {\n                    datasets.push(dataset);\n                    numRetrieved += dataset.getColumnCount();\n                    start += dataset.getColumnCount();\n                    end += dataset.getColumnCount();\n                    console.log('got nsigs ' + numRetrieved + ' out of ' + nsigs);\n                    if (numRetrieved < nsigs) {\n                        setTimeout(getData, 1000);\n                    } else {\n                        batchDeferred.resolve();\n                    }\n\n                }).catch(function (ee) {\n                    console.log(ee);\n                    return d.reject('Error downloading data. Please try again.');\n                });\n\n            };\n            getData();\n        }\n        batchDeferred.fail(function () {\n            d.reject('Error downloading data. Please try again.');\n        });\n        batchDeferred.done(function () {\n            var dataset;\n            if (datasets.length > 1) {\n                for (var i = 0; i < datasets.length; i++) {\n                    datasets[i] = new morpheus.TransposedDatasetView(datasets[i]);\n                }\n                var dataset = new morpheus.JoinedDataset(datasets[0], datasets[1]);\n                for (var i = 2; i < datasets.length; i++) {\n                    dataset = new morpheus.JoinedDataset(dataset,\n                        datasets[i]);\n                }\n                dataset = new morpheus.TransposedDatasetView(dataset);\n            } else {\n                dataset = datasets[0];\n            }\n\n            // annotate sig ids on columns\n            var columnIdVector = dataset.getColumnMetadata().get(0);\n            var vectors = [];\n            for (var i = 0; i < sigIdFields.length; i++) {\n                vectors.push(dataset.getColumnMetadata().add(sigIdFields[i]));\n            }\n\n            for (var i = 0; i < columnIdVector.size(); i++) {\n                var sig = sigIdToObject.get(columnIdVector.getValue(i));\n                if (sig != null) {\n                    for (var j = 0; j < vectors.length; j++) {\n                        vectors[j].setValue(i, sig[sigIdFields[j]]);\n                    }\n                }\n            }\n            // row ids are entrez ids\n\n            const opts = {};\n            opts.dataset = dataset;\n            opts.fileColumnNamesToInclude = null;\n            opts.lines = GENE_INFO_LINES;\n            opts.isColumns = false;\n            opts.sets = null;\n            opts.metadataName = 'id';\n            opts.fileColumnName = 'pr_gene_id';\n            new morpheus.OpenFileTool().annotate(opts);\n\n            var geneSpaceVector = dataset.getRowMetadata().add('gene_space');\n            var geneIdVector = dataset.getRowMetadata().getByName('pr_gene_id');\n            var isLmVector = dataset.getRowMetadata().getByName('pr_is_lm');\n            var isBingVector = dataset.getRowMetadata().getByName('pr_is_bing');\n            var geneSymbolVector = dataset.getRowMetadata().getByName('pr_gene_symbol');\n            dataset.getRowMetadata().remove(morpheus.MetadataUtil.indexOf(dataset.getRowMetadata(), 'pr_id'));\n            for (var i = 0, nrows = geneSpaceVector.size(); i < nrows; i++) {\n\n                if (geneSymbolVector.getValue(i) != null) {\n                    var space = 'inferred';\n                    if (isLmVector.getValue(i) == '1') {\n                        space = 'landmark';\n                    } else if (isBingVector.getValue(i) == '1') {\n                        space = 'well inferred';\n                    }\n                    geneSpaceVector.setValue(i, space);\n                }\n            }\n            d.resolve(dataset);\n\n        });\n    });\n    return d;\n};\n\n//# sourceURL=webpack:///./public/js/local/command/dist/shared/zs.js?");

/***/ })

/******/ });